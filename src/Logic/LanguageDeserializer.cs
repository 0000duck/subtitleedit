using System.IO;
using System.Xml;

namespace Nikse.SubtitleEdit.Logic
{

    public class LanguageDeserializer // NOTE: This class is AUTO-GENERATED!!!! (Choose language + press ctrl+alt+shift+C)
    {

        public static Language CustomDeserializeLanguage(string fileName)
        {
            var doc = new XmlDocument();
            doc.PreserveWhitespace = true;

            var stream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            doc.Load(stream);
            stream.Close();

            XmlNode node = doc.DocumentElement;
            XmlNode subNode;
            var language = new Language();

            subNode = node.SelectSingleNode("Name");
            if (subNode != null)
                language.Name = subNode.InnerText;

            language.General = new Nikse.SubtitleEdit.Logic.LanguageStructure.General();
            node = doc.DocumentElement.SelectSingleNode("General");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.General.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Version");
                if (subNode != null)
                    language.General.Version = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslatedBy");
                if (subNode != null)
                    language.General.TranslatedBy = subNode.InnerText;
                subNode = node.SelectSingleNode("CultureName");
                if (subNode != null)
                    language.General.CultureName = subNode.InnerText;
                subNode = node.SelectSingleNode("HelpFile");
                if (subNode != null)
                    language.General.HelpFile = subNode.InnerText;
                subNode = node.SelectSingleNode("OK");
                if (subNode != null)
                    language.General.OK = subNode.InnerText;
                subNode = node.SelectSingleNode("Cancel");
                if (subNode != null)
                    language.General.Cancel = subNode.InnerText;
                subNode = node.SelectSingleNode("Apply");
                if (subNode != null)
                    language.General.Apply = subNode.InnerText;
                subNode = node.SelectSingleNode("None");
                if (subNode != null)
                    language.General.None = subNode.InnerText;
                subNode = node.SelectSingleNode("All");
                if (subNode != null)
                    language.General.All = subNode.InnerText;
                subNode = node.SelectSingleNode("Preview");
                if (subNode != null)
                    language.General.Preview = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleFiles");
                if (subNode != null)
                    language.General.SubtitleFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("AllFiles");
                if (subNode != null)
                    language.General.AllFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoFiles");
                if (subNode != null)
                    language.General.VideoFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("AudioFiles");
                if (subNode != null)
                    language.General.AudioFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenSubtitle");
                if (subNode != null)
                    language.General.OpenSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenVideoFile");
                if (subNode != null)
                    language.General.OpenVideoFile = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenVideoFileTitle");
                if (subNode != null)
                    language.General.OpenVideoFileTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("NoVideoLoaded");
                if (subNode != null)
                    language.General.NoVideoLoaded = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoInformation");
                if (subNode != null)
                    language.General.VideoInformation = subNode.InnerText;
                subNode = node.SelectSingleNode("PositionX");
                if (subNode != null)
                    language.General.PositionX = subNode.InnerText;
                subNode = node.SelectSingleNode("StartTime");
                if (subNode != null)
                    language.General.StartTime = subNode.InnerText;
                subNode = node.SelectSingleNode("EndTime");
                if (subNode != null)
                    language.General.EndTime = subNode.InnerText;
                subNode = node.SelectSingleNode("Duration");
                if (subNode != null)
                    language.General.Duration = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberSymbol");
                if (subNode != null)
                    language.General.NumberSymbol = subNode.InnerText;
                subNode = node.SelectSingleNode("Number");
                if (subNode != null)
                    language.General.Number = subNode.InnerText;
                subNode = node.SelectSingleNode("Text");
                if (subNode != null)
                    language.General.Text = subNode.InnerText;
                subNode = node.SelectSingleNode("HourMinutesSecondsMilliseconds");
                if (subNode != null)
                    language.General.HourMinutesSecondsMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("Bold");
                if (subNode != null)
                    language.General.Bold = subNode.InnerText;
                subNode = node.SelectSingleNode("Italic");
                if (subNode != null)
                    language.General.Italic = subNode.InnerText;
                subNode = node.SelectSingleNode("Underline");
                if (subNode != null)
                    language.General.Underline = subNode.InnerText;
                subNode = node.SelectSingleNode("Visible");
                if (subNode != null)
                    language.General.Visible = subNode.InnerText;
                subNode = node.SelectSingleNode("FrameRate");
                if (subNode != null)
                    language.General.FrameRate = subNode.InnerText;
                subNode = node.SelectSingleNode("Name");
                if (subNode != null)
                    language.General.Name = subNode.InnerText;
                subNode = node.SelectSingleNode("FileNameXAndSize");
                if (subNode != null)
                    language.General.FileNameXAndSize = subNode.InnerText;
                subNode = node.SelectSingleNode("ResolutionX");
                if (subNode != null)
                    language.General.ResolutionX = subNode.InnerText;
                subNode = node.SelectSingleNode("FrameRateX");
                if (subNode != null)
                    language.General.FrameRateX = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalFramesX");
                if (subNode != null)
                    language.General.TotalFramesX = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoEncodingX");
                if (subNode != null)
                    language.General.VideoEncodingX = subNode.InnerText;
                subNode = node.SelectSingleNode("SingleLineLengths");
                if (subNode != null)
                    language.General.SingleLineLengths = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalLengthX");
                if (subNode != null)
                    language.General.TotalLengthX = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalLengthXSplitLine");
                if (subNode != null)
                    language.General.TotalLengthXSplitLine = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitLine");
                if (subNode != null)
                    language.General.SplitLine = subNode.InnerText;
                subNode = node.SelectSingleNode("NotAvailable");
                if (subNode != null)
                    language.General.NotAvailable = subNode.InnerText;
                subNode = node.SelectSingleNode("OverlapPreviousLineX");
                if (subNode != null)
                    language.General.OverlapPreviousLineX = subNode.InnerText;
                subNode = node.SelectSingleNode("OverlapX");
                if (subNode != null)
                    language.General.OverlapX = subNode.InnerText;
                subNode = node.SelectSingleNode("OverlapNextX");
                if (subNode != null)
                    language.General.OverlapNextX = subNode.InnerText;
                subNode = node.SelectSingleNode("Negative");
                if (subNode != null)
                    language.General.Negative = subNode.InnerText;
                subNode = node.SelectSingleNode("RegularExpressionIsNotValid");
                if (subNode != null)
                    language.General.RegularExpressionIsNotValid = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleSaved");
                if (subNode != null)
                    language.General.SubtitleSaved = subNode.InnerText;
                subNode = node.SelectSingleNode("CurrentSubtitle");
                if (subNode != null)
                    language.General.CurrentSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("OriginalText");
                if (subNode != null)
                    language.General.OriginalText = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenOriginalSubtitleFile");
                if (subNode != null)
                    language.General.OpenOriginalSubtitleFile = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseWait");
                if (subNode != null)
                    language.General.PleaseWait = subNode.InnerText;
                subNode = node.SelectSingleNode("SessionKey");
                if (subNode != null)
                    language.General.SessionKey = subNode.InnerText;
                subNode = node.SelectSingleNode("UserName");
                if (subNode != null)
                    language.General.UserName = subNode.InnerText;
                subNode = node.SelectSingleNode("UserNameAlreadyInUse");
                if (subNode != null)
                    language.General.UserNameAlreadyInUse = subNode.InnerText;
                subNode = node.SelectSingleNode("WebServiceUrl");
                if (subNode != null)
                    language.General.WebServiceUrl = subNode.InnerText;
                subNode = node.SelectSingleNode("IP");
                if (subNode != null)
                    language.General.IP = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoWindowTitle");
                if (subNode != null)
                    language.General.VideoWindowTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("AudioWindowTitle");
                if (subNode != null)
                    language.General.AudioWindowTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("ControlsWindowTitle");
                if (subNode != null)
                    language.General.ControlsWindowTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("Advanced");
                if (subNode != null)
                    language.General.Advanced = subNode.InnerText;
                subNode = node.SelectSingleNode("Style");
                if (subNode != null)
                    language.General.Style = subNode.InnerText;
                subNode = node.SelectSingleNode("Class");
                if (subNode != null)
                    language.General.Class = subNode.InnerText;
                subNode = node.SelectSingleNode("GeneralText");
                if (subNode != null)
                    language.General.GeneralText = subNode.InnerText;
                subNode = node.SelectSingleNode("LineNumber");
                if (subNode != null)
                    language.General.LineNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("Before");
                if (subNode != null)
                    language.General.Before = subNode.InnerText;
                subNode = node.SelectSingleNode("After");
                if (subNode != null)
                    language.General.After = subNode.InnerText;
                subNode = node.SelectSingleNode("Size");
                if (subNode != null)
                    language.General.Size = subNode.InnerText;

            }

            language.About = new Nikse.SubtitleEdit.Logic.LanguageStructure.About();
            node = doc.DocumentElement.SelectSingleNode("About");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.About.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("AboutText1");
                if (subNode != null)
                    language.About.AboutText1 = subNode.InnerText;

            }

            language.AddToNames = new Nikse.SubtitleEdit.Logic.LanguageStructure.AddToNames();
            node = doc.DocumentElement.SelectSingleNode("AddToNames");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.AddToNames.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Description");
                if (subNode != null)
                    language.AddToNames.Description = subNode.InnerText;

            }

            language.AddToOcrReplaceList = new Nikse.SubtitleEdit.Logic.LanguageStructure.AddToOcrReplaceList();
            node = doc.DocumentElement.SelectSingleNode("AddToOcrReplaceList");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.AddToOcrReplaceList.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Description");
                if (subNode != null)
                    language.AddToOcrReplaceList.Description = subNode.InnerText;

            }

            language.AddToUserDictionary = new Nikse.SubtitleEdit.Logic.LanguageStructure.AddToUserDictionary();
            node = doc.DocumentElement.SelectSingleNode("AddToUserDictionary");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.AddToUserDictionary.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Description");
                if (subNode != null)
                    language.AddToUserDictionary.Description = subNode.InnerText;

            }

            language.AddWaveForm = new Nikse.SubtitleEdit.Logic.LanguageStructure.AddWaveForm();
            node = doc.DocumentElement.SelectSingleNode("AddWaveForm");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.AddWaveForm.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("SourceVideoFile");
                if (subNode != null)
                    language.AddWaveForm.SourceVideoFile = subNode.InnerText;
                subNode = node.SelectSingleNode("GenerateWaveFormData");
                if (subNode != null)
                    language.AddWaveForm.GenerateWaveFormData = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseWait");
                if (subNode != null)
                    language.AddWaveForm.PleaseWait = subNode.InnerText;
                subNode = node.SelectSingleNode("VlcMediaPlayerNotFoundTitle");
                if (subNode != null)
                    language.AddWaveForm.VlcMediaPlayerNotFoundTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("VlcMediaPlayerNotFound");
                if (subNode != null)
                    language.AddWaveForm.VlcMediaPlayerNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToVlcMediaPlayerHomePage");
                if (subNode != null)
                    language.AddWaveForm.GoToVlcMediaPlayerHomePage = subNode.InnerText;
                subNode = node.SelectSingleNode("GeneratingPeakFile");
                if (subNode != null)
                    language.AddWaveForm.GeneratingPeakFile = subNode.InnerText;
                subNode = node.SelectSingleNode("GeneratingSpectrogram");
                if (subNode != null)
                    language.AddWaveForm.GeneratingSpectrogram = subNode.InnerText;
                subNode = node.SelectSingleNode("ExtractingSeconds");
                if (subNode != null)
                    language.AddWaveForm.ExtractingSeconds = subNode.InnerText;
                subNode = node.SelectSingleNode("ExtractingMinutes");
                if (subNode != null)
                    language.AddWaveForm.ExtractingMinutes = subNode.InnerText;

            }

            language.AdjustDisplayDuration = new Nikse.SubtitleEdit.Logic.LanguageStructure.AdjustDisplayDuration();
            node = doc.DocumentElement.SelectSingleNode("AdjustDisplayDuration");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.AdjustDisplayDuration.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustVia");
                if (subNode != null)
                    language.AdjustDisplayDuration.AdjustVia = subNode.InnerText;
                subNode = node.SelectSingleNode("Seconds");
                if (subNode != null)
                    language.AdjustDisplayDuration.Seconds = subNode.InnerText;
                subNode = node.SelectSingleNode("Percent");
                if (subNode != null)
                    language.AdjustDisplayDuration.Percent = subNode.InnerText;
                subNode = node.SelectSingleNode("Recalculate");
                if (subNode != null)
                    language.AdjustDisplayDuration.Recalculate = subNode.InnerText;
                subNode = node.SelectSingleNode("AddSeconds");
                if (subNode != null)
                    language.AdjustDisplayDuration.AddSeconds = subNode.InnerText;
                subNode = node.SelectSingleNode("SetAsPercent");
                if (subNode != null)
                    language.AdjustDisplayDuration.SetAsPercent = subNode.InnerText;
                subNode = node.SelectSingleNode("Note");
                if (subNode != null)
                    language.AdjustDisplayDuration.Note = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseSelectAValueFromTheDropDownList");
                if (subNode != null)
                    language.AdjustDisplayDuration.PleaseSelectAValueFromTheDropDownList = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseChoose");
                if (subNode != null)
                    language.AdjustDisplayDuration.PleaseChoose = subNode.InnerText;

            }

            language.ApplyDurationLimits = new Nikse.SubtitleEdit.Logic.LanguageStructure.ApplyDurationLimits();
            node = doc.DocumentElement.SelectSingleNode("ApplyDurationLimits");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ApplyDurationLimits.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("FixesAvailable");
                if (subNode != null)
                    language.ApplyDurationLimits.FixesAvailable = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToFix");
                if (subNode != null)
                    language.ApplyDurationLimits.UnableToFix = subNode.InnerText;

            }

            language.AutoBreakUnbreakLines = new Nikse.SubtitleEdit.Logic.LanguageStructure.AutoBreakUnbreakLines();
            node = doc.DocumentElement.SelectSingleNode("AutoBreakUnbreakLines");
            if (node != null)
            {
                subNode = node.SelectSingleNode("TitleAutoBreak");
                if (subNode != null)
                    language.AutoBreakUnbreakLines.TitleAutoBreak = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleUnbreak");
                if (subNode != null)
                    language.AutoBreakUnbreakLines.TitleUnbreak = subNode.InnerText;
                subNode = node.SelectSingleNode("LinesFoundX");
                if (subNode != null)
                    language.AutoBreakUnbreakLines.LinesFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyBreakLinesLongerThan");
                if (subNode != null)
                    language.AutoBreakUnbreakLines.OnlyBreakLinesLongerThan = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyUnbreakLinesLongerThan");
                if (subNode != null)
                    language.AutoBreakUnbreakLines.OnlyUnbreakLinesLongerThan = subNode.InnerText;

            }

            language.BatchConvert = new Nikse.SubtitleEdit.Logic.LanguageStructure.BatchConvert();
            node = doc.DocumentElement.SelectSingleNode("BatchConvert");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.BatchConvert.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Input");
                if (subNode != null)
                    language.BatchConvert.Input = subNode.InnerText;
                subNode = node.SelectSingleNode("InputDescription");
                if (subNode != null)
                    language.BatchConvert.InputDescription = subNode.InnerText;
                subNode = node.SelectSingleNode("Status");
                if (subNode != null)
                    language.BatchConvert.Status = subNode.InnerText;
                subNode = node.SelectSingleNode("Output");
                if (subNode != null)
                    language.BatchConvert.Output = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseOutputFolder");
                if (subNode != null)
                    language.BatchConvert.ChooseOutputFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("OverwriteExistingFiles");
                if (subNode != null)
                    language.BatchConvert.OverwriteExistingFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("Style");
                if (subNode != null)
                    language.BatchConvert.Style = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertOptions");
                if (subNode != null)
                    language.BatchConvert.ConvertOptions = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveFormatting");
                if (subNode != null)
                    language.BatchConvert.RemoveFormatting = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveTextForHI");
                if (subNode != null)
                    language.BatchConvert.RemoveTextForHI = subNode.InnerText;
                subNode = node.SelectSingleNode("OverwriteOriginalFiles");
                if (subNode != null)
                    language.BatchConvert.OverwriteOriginalFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("ReDoCasing");
                if (subNode != null)
                    language.BatchConvert.ReDoCasing = subNode.InnerText;
                subNode = node.SelectSingleNode("Convert");
                if (subNode != null)
                    language.BatchConvert.Convert = subNode.InnerText;
                subNode = node.SelectSingleNode("NothingToConvert");
                if (subNode != null)
                    language.BatchConvert.NothingToConvert = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseChooseOutputFolder");
                if (subNode != null)
                    language.BatchConvert.PleaseChooseOutputFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("Converted");
                if (subNode != null)
                    language.BatchConvert.Converted = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertedX");
                if (subNode != null)
                    language.BatchConvert.ConvertedX = subNode.InnerText;
                subNode = node.SelectSingleNode("Settings");
                if (subNode != null)
                    language.BatchConvert.Settings = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitLongLines");
                if (subNode != null)
                    language.BatchConvert.SplitLongLines = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBalance");
                if (subNode != null)
                    language.BatchConvert.AutoBalance = subNode.InnerText;
                subNode = node.SelectSingleNode("ScanFolder");
                if (subNode != null)
                    language.BatchConvert.ScanFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("ScanningFolder");
                if (subNode != null)
                    language.BatchConvert.ScanningFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("Recursive");
                if (subNode != null)
                    language.BatchConvert.Recursive = subNode.InnerText;
                subNode = node.SelectSingleNode("SetMinMsBetweenSubtitles");
                if (subNode != null)
                    language.BatchConvert.SetMinMsBetweenSubtitles = subNode.InnerText;

            }

            language.Beamer = new Nikse.SubtitleEdit.Logic.LanguageStructure.Beamer();
            node = doc.DocumentElement.SelectSingleNode("Beamer");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.Beamer.Title = subNode.InnerText;

            }

            language.ChangeCasing = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChangeCasing();
            node = doc.DocumentElement.SelectSingleNode("ChangeCasing");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChangeCasing.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ChangeCasingTo");
                if (subNode != null)
                    language.ChangeCasing.ChangeCasingTo = subNode.InnerText;
                subNode = node.SelectSingleNode("NormalCasing");
                if (subNode != null)
                    language.ChangeCasing.NormalCasing = subNode.InnerText;
                subNode = node.SelectSingleNode("FixNamesCasing");
                if (subNode != null)
                    language.ChangeCasing.FixNamesCasing = subNode.InnerText;
                subNode = node.SelectSingleNode("FixOnlyNamesCasing");
                if (subNode != null)
                    language.ChangeCasing.FixOnlyNamesCasing = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyChangeAllUppercaseLines");
                if (subNode != null)
                    language.ChangeCasing.OnlyChangeAllUppercaseLines = subNode.InnerText;
                subNode = node.SelectSingleNode("AllUppercase");
                if (subNode != null)
                    language.ChangeCasing.AllUppercase = subNode.InnerText;
                subNode = node.SelectSingleNode("AllLowercase");
                if (subNode != null)
                    language.ChangeCasing.AllLowercase = subNode.InnerText;

            }

            language.ChangeCasingNames = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChangeCasingNames();
            node = doc.DocumentElement.SelectSingleNode("ChangeCasingNames");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChangeCasingNames.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("NamesFoundInSubtitleX");
                if (subNode != null)
                    language.ChangeCasingNames.NamesFoundInSubtitleX = subNode.InnerText;
                subNode = node.SelectSingleNode("Enabled");
                if (subNode != null)
                    language.ChangeCasingNames.Enabled = subNode.InnerText;
                subNode = node.SelectSingleNode("Name");
                if (subNode != null)
                    language.ChangeCasingNames.Name = subNode.InnerText;
                subNode = node.SelectSingleNode("LinesFoundX");
                if (subNode != null)
                    language.ChangeCasingNames.LinesFoundX = subNode.InnerText;

            }

            language.ChangeFrameRate = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChangeFrameRate();
            node = doc.DocumentElement.SelectSingleNode("ChangeFrameRate");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChangeFrameRate.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertFrameRateOfSubtitle");
                if (subNode != null)
                    language.ChangeFrameRate.ConvertFrameRateOfSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("FromFrameRate");
                if (subNode != null)
                    language.ChangeFrameRate.FromFrameRate = subNode.InnerText;
                subNode = node.SelectSingleNode("ToFrameRate");
                if (subNode != null)
                    language.ChangeFrameRate.ToFrameRate = subNode.InnerText;
                subNode = node.SelectSingleNode("FrameRateNotCorrect");
                if (subNode != null)
                    language.ChangeFrameRate.FrameRateNotCorrect = subNode.InnerText;
                subNode = node.SelectSingleNode("FrameRateNotChanged");
                if (subNode != null)
                    language.ChangeFrameRate.FrameRateNotChanged = subNode.InnerText;

            }

            language.ChangeSpeedInPercent = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChangeSpeedInPercent();
            node = doc.DocumentElement.SelectSingleNode("ChangeSpeedInPercent");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChangeSpeedInPercent.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Info");
                if (subNode != null)
                    language.ChangeSpeedInPercent.Info = subNode.InnerText;

            }

            language.CheckForUpdates = new Nikse.SubtitleEdit.Logic.LanguageStructure.CheckForUpdates();
            node = doc.DocumentElement.SelectSingleNode("CheckForUpdates");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.CheckForUpdates.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("CheckingForUpdates");
                if (subNode != null)
                    language.CheckForUpdates.CheckingForUpdates = subNode.InnerText;
                subNode = node.SelectSingleNode("CheckingForUpdatesFailedX");
                if (subNode != null)
                    language.CheckForUpdates.CheckingForUpdatesFailedX = subNode.InnerText;
                subNode = node.SelectSingleNode("CheckingForUpdatesNoneAvailable");
                if (subNode != null)
                    language.CheckForUpdates.CheckingForUpdatesNoneAvailable = subNode.InnerText;
                subNode = node.SelectSingleNode("CheckingForUpdatesNewVersion");
                if (subNode != null)
                    language.CheckForUpdates.CheckingForUpdatesNewVersion = subNode.InnerText;
                subNode = node.SelectSingleNode("InstallUpdate");
                if (subNode != null)
                    language.CheckForUpdates.InstallUpdate = subNode.InnerText;
                subNode = node.SelectSingleNode("NoUpdates");
                if (subNode != null)
                    language.CheckForUpdates.NoUpdates = subNode.InnerText;

            }

            language.ChooseAudioTrack = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChooseAudioTrack();
            node = doc.DocumentElement.SelectSingleNode("ChooseAudioTrack");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChooseAudioTrack.Title = subNode.InnerText;

            }

            language.ChooseEncoding = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChooseEncoding();
            node = doc.DocumentElement.SelectSingleNode("ChooseEncoding");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChooseEncoding.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("CodePage");
                if (subNode != null)
                    language.ChooseEncoding.CodePage = subNode.InnerText;
                subNode = node.SelectSingleNode("DisplayName");
                if (subNode != null)
                    language.ChooseEncoding.DisplayName = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseSelectAnEncoding");
                if (subNode != null)
                    language.ChooseEncoding.PleaseSelectAnEncoding = subNode.InnerText;

            }

            language.ChooseLanguage = new Nikse.SubtitleEdit.Logic.LanguageStructure.ChooseLanguage();
            node = doc.DocumentElement.SelectSingleNode("ChooseLanguage");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ChooseLanguage.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Language");
                if (subNode != null)
                    language.ChooseLanguage.Language = subNode.InnerText;

            }

            language.ColorChooser = new Nikse.SubtitleEdit.Logic.LanguageStructure.ColorChooser();
            node = doc.DocumentElement.SelectSingleNode("ColorChooser");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ColorChooser.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Red");
                if (subNode != null)
                    language.ColorChooser.Red = subNode.InnerText;
                subNode = node.SelectSingleNode("Green");
                if (subNode != null)
                    language.ColorChooser.Green = subNode.InnerText;
                subNode = node.SelectSingleNode("Blue");
                if (subNode != null)
                    language.ColorChooser.Blue = subNode.InnerText;
                subNode = node.SelectSingleNode("Alpha");
                if (subNode != null)
                    language.ColorChooser.Alpha = subNode.InnerText;

            }

            language.ColumnPaste = new Nikse.SubtitleEdit.Logic.LanguageStructure.ColumnPaste();
            node = doc.DocumentElement.SelectSingleNode("ColumnPaste");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ColumnPaste.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseColumn");
                if (subNode != null)
                    language.ColumnPaste.ChooseColumn = subNode.InnerText;
                subNode = node.SelectSingleNode("OverwriteShiftCellsDown");
                if (subNode != null)
                    language.ColumnPaste.OverwriteShiftCellsDown = subNode.InnerText;
                subNode = node.SelectSingleNode("Overwrite");
                if (subNode != null)
                    language.ColumnPaste.Overwrite = subNode.InnerText;
                subNode = node.SelectSingleNode("ShiftCellsDown");
                if (subNode != null)
                    language.ColumnPaste.ShiftCellsDown = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodesOnly");
                if (subNode != null)
                    language.ColumnPaste.TimeCodesOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("TextOnly");
                if (subNode != null)
                    language.ColumnPaste.TextOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("OriginalTextOnly");
                if (subNode != null)
                    language.ColumnPaste.OriginalTextOnly = subNode.InnerText;

            }

            language.CompareSubtitles = new Nikse.SubtitleEdit.Logic.LanguageStructure.CompareSubtitles();
            node = doc.DocumentElement.SelectSingleNode("CompareSubtitles");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.CompareSubtitles.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("PreviousDifference");
                if (subNode != null)
                    language.CompareSubtitles.PreviousDifference = subNode.InnerText;
                subNode = node.SelectSingleNode("NextDifference");
                if (subNode != null)
                    language.CompareSubtitles.NextDifference = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitlesNotAlike");
                if (subNode != null)
                    language.CompareSubtitles.SubtitlesNotAlike = subNode.InnerText;
                subNode = node.SelectSingleNode("XNumberOfDifference");
                if (subNode != null)
                    language.CompareSubtitles.XNumberOfDifference = subNode.InnerText;
                subNode = node.SelectSingleNode("XNumberOfDifferenceAndPercentChanged");
                if (subNode != null)
                    language.CompareSubtitles.XNumberOfDifferenceAndPercentChanged = subNode.InnerText;
                subNode = node.SelectSingleNode("XNumberOfDifferenceAndPercentLettersChanged");
                if (subNode != null)
                    language.CompareSubtitles.XNumberOfDifferenceAndPercentLettersChanged = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowOnlyDifferences");
                if (subNode != null)
                    language.CompareSubtitles.ShowOnlyDifferences = subNode.InnerText;
                subNode = node.SelectSingleNode("IgnoreLineBreaks");
                if (subNode != null)
                    language.CompareSubtitles.IgnoreLineBreaks = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyLookForDifferencesInText");
                if (subNode != null)
                    language.CompareSubtitles.OnlyLookForDifferencesInText = subNode.InnerText;
                subNode = node.SelectSingleNode("CannotCompareWithImageBasedSubtitles");
                if (subNode != null)
                    language.CompareSubtitles.CannotCompareWithImageBasedSubtitles = subNode.InnerText;

            }

            language.DCinemaProperties = new Nikse.SubtitleEdit.Logic.LanguageStructure.DCinemaProperties();
            node = doc.DocumentElement.SelectSingleNode("DCinemaProperties");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.DCinemaProperties.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleSmpte");
                if (subNode != null)
                    language.DCinemaProperties.TitleSmpte = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleId");
                if (subNode != null)
                    language.DCinemaProperties.SubtitleId = subNode.InnerText;
                subNode = node.SelectSingleNode("GenerateId");
                if (subNode != null)
                    language.DCinemaProperties.GenerateId = subNode.InnerText;
                subNode = node.SelectSingleNode("MovieTitle");
                if (subNode != null)
                    language.DCinemaProperties.MovieTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("ReelNumber");
                if (subNode != null)
                    language.DCinemaProperties.ReelNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("Language");
                if (subNode != null)
                    language.DCinemaProperties.Language = subNode.InnerText;
                subNode = node.SelectSingleNode("IssueDate");
                if (subNode != null)
                    language.DCinemaProperties.IssueDate = subNode.InnerText;
                subNode = node.SelectSingleNode("EditRate");
                if (subNode != null)
                    language.DCinemaProperties.EditRate = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeRate");
                if (subNode != null)
                    language.DCinemaProperties.TimeCodeRate = subNode.InnerText;
                subNode = node.SelectSingleNode("StartTime");
                if (subNode != null)
                    language.DCinemaProperties.StartTime = subNode.InnerText;
                subNode = node.SelectSingleNode("Font");
                if (subNode != null)
                    language.DCinemaProperties.Font = subNode.InnerText;
                subNode = node.SelectSingleNode("FontId");
                if (subNode != null)
                    language.DCinemaProperties.FontId = subNode.InnerText;
                subNode = node.SelectSingleNode("FontUri");
                if (subNode != null)
                    language.DCinemaProperties.FontUri = subNode.InnerText;
                subNode = node.SelectSingleNode("FontColor");
                if (subNode != null)
                    language.DCinemaProperties.FontColor = subNode.InnerText;
                subNode = node.SelectSingleNode("FontEffect");
                if (subNode != null)
                    language.DCinemaProperties.FontEffect = subNode.InnerText;
                subNode = node.SelectSingleNode("FontEffectColor");
                if (subNode != null)
                    language.DCinemaProperties.FontEffectColor = subNode.InnerText;
                subNode = node.SelectSingleNode("FontSize");
                if (subNode != null)
                    language.DCinemaProperties.FontSize = subNode.InnerText;
                subNode = node.SelectSingleNode("TopBottomMargin");
                if (subNode != null)
                    language.DCinemaProperties.TopBottomMargin = subNode.InnerText;
                subNode = node.SelectSingleNode("FadeUpTime");
                if (subNode != null)
                    language.DCinemaProperties.FadeUpTime = subNode.InnerText;
                subNode = node.SelectSingleNode("FadeDownTime");
                if (subNode != null)
                    language.DCinemaProperties.FadeDownTime = subNode.InnerText;
                subNode = node.SelectSingleNode("ZPosition");
                if (subNode != null)
                    language.DCinemaProperties.ZPosition = subNode.InnerText;
                subNode = node.SelectSingleNode("ZPositionHelp");
                if (subNode != null)
                    language.DCinemaProperties.ZPositionHelp = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseColor");
                if (subNode != null)
                    language.DCinemaProperties.ChooseColor = subNode.InnerText;
                subNode = node.SelectSingleNode("Generate");
                if (subNode != null)
                    language.DCinemaProperties.Generate = subNode.InnerText;

            }

            language.DurationsBridgeGaps = new Nikse.SubtitleEdit.Logic.LanguageStructure.DurationsBridgeGaps();
            node = doc.DocumentElement.SelectSingleNode("DurationsBridgeGaps");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.DurationsBridgeGaps.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("GapsBridgedX");
                if (subNode != null)
                    language.DurationsBridgeGaps.GapsBridgedX = subNode.InnerText;
                subNode = node.SelectSingleNode("GapToNext");
                if (subNode != null)
                    language.DurationsBridgeGaps.GapToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("BridgeGapsSmallerThanXPart1");
                if (subNode != null)
                    language.DurationsBridgeGaps.BridgeGapsSmallerThanXPart1 = subNode.InnerText;
                subNode = node.SelectSingleNode("BridgeGapsSmallerThanXPart2");
                if (subNode != null)
                    language.DurationsBridgeGaps.BridgeGapsSmallerThanXPart2 = subNode.InnerText;
                subNode = node.SelectSingleNode("MinMsBetweenLines");
                if (subNode != null)
                    language.DurationsBridgeGaps.MinMsBetweenLines = subNode.InnerText;
                subNode = node.SelectSingleNode("ProlongEndTime");
                if (subNode != null)
                    language.DurationsBridgeGaps.ProlongEndTime = subNode.InnerText;
                subNode = node.SelectSingleNode("DivideEven");
                if (subNode != null)
                    language.DurationsBridgeGaps.DivideEven = subNode.InnerText;

            }

            language.DvdSubRip = new Nikse.SubtitleEdit.Logic.LanguageStructure.DvdSubRip();
            node = doc.DocumentElement.SelectSingleNode("DvdSubRip");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.DvdSubRip.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("DvdGroupTitle");
                if (subNode != null)
                    language.DvdSubRip.DvdGroupTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("IfoFile");
                if (subNode != null)
                    language.DvdSubRip.IfoFile = subNode.InnerText;
                subNode = node.SelectSingleNode("IfoFiles");
                if (subNode != null)
                    language.DvdSubRip.IfoFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("VobFiles");
                if (subNode != null)
                    language.DvdSubRip.VobFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("Add");
                if (subNode != null)
                    language.DvdSubRip.Add = subNode.InnerText;
                subNode = node.SelectSingleNode("Remove");
                if (subNode != null)
                    language.DvdSubRip.Remove = subNode.InnerText;
                subNode = node.SelectSingleNode("Clear");
                if (subNode != null)
                    language.DvdSubRip.Clear = subNode.InnerText;
                subNode = node.SelectSingleNode("MoveUp");
                if (subNode != null)
                    language.DvdSubRip.MoveUp = subNode.InnerText;
                subNode = node.SelectSingleNode("MoveDown");
                if (subNode != null)
                    language.DvdSubRip.MoveDown = subNode.InnerText;
                subNode = node.SelectSingleNode("Languages");
                if (subNode != null)
                    language.DvdSubRip.Languages = subNode.InnerText;
                subNode = node.SelectSingleNode("PalNtsc");
                if (subNode != null)
                    language.DvdSubRip.PalNtsc = subNode.InnerText;
                subNode = node.SelectSingleNode("Pal");
                if (subNode != null)
                    language.DvdSubRip.Pal = subNode.InnerText;
                subNode = node.SelectSingleNode("Ntsc");
                if (subNode != null)
                    language.DvdSubRip.Ntsc = subNode.InnerText;
                subNode = node.SelectSingleNode("StartRipping");
                if (subNode != null)
                    language.DvdSubRip.StartRipping = subNode.InnerText;
                subNode = node.SelectSingleNode("Abort");
                if (subNode != null)
                    language.DvdSubRip.Abort = subNode.InnerText;
                subNode = node.SelectSingleNode("AbortedByUser");
                if (subNode != null)
                    language.DvdSubRip.AbortedByUser = subNode.InnerText;
                subNode = node.SelectSingleNode("ReadingSubtitleData");
                if (subNode != null)
                    language.DvdSubRip.ReadingSubtitleData = subNode.InnerText;
                subNode = node.SelectSingleNode("RippingVobFileXofYZ");
                if (subNode != null)
                    language.DvdSubRip.RippingVobFileXofYZ = subNode.InnerText;
                subNode = node.SelectSingleNode("WrongIfoType");
                if (subNode != null)
                    language.DvdSubRip.WrongIfoType = subNode.InnerText;

            }

            language.DvdSubRipChooseLanguage = new Nikse.SubtitleEdit.Logic.LanguageStructure.DvdSubRipChooseLanguage();
            node = doc.DocumentElement.SelectSingleNode("DvdSubRipChooseLanguage");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.DvdSubRipChooseLanguage.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseLanguageStreamId");
                if (subNode != null)
                    language.DvdSubRipChooseLanguage.ChooseLanguageStreamId = subNode.InnerText;
                subNode = node.SelectSingleNode("UnknownLanguage");
                if (subNode != null)
                    language.DvdSubRipChooseLanguage.UnknownLanguage = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleImageXofYAndWidthXHeight");
                if (subNode != null)
                    language.DvdSubRipChooseLanguage.SubtitleImageXofYAndWidthXHeight = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleImage");
                if (subNode != null)
                    language.DvdSubRipChooseLanguage.SubtitleImage = subNode.InnerText;

            }

            language.EbuSaveOtpions = new Nikse.SubtitleEdit.Logic.LanguageStructure.EbuSaveOtpions();
            node = doc.DocumentElement.SelectSingleNode("EbuSaveOtpions");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.EbuSaveOtpions.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("GeneralSubtitleInformation");
                if (subNode != null)
                    language.EbuSaveOtpions.GeneralSubtitleInformation = subNode.InnerText;
                subNode = node.SelectSingleNode("CodePageNumber");
                if (subNode != null)
                    language.EbuSaveOtpions.CodePageNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("DiskFormatCode");
                if (subNode != null)
                    language.EbuSaveOtpions.DiskFormatCode = subNode.InnerText;
                subNode = node.SelectSingleNode("DisplayStandardCode");
                if (subNode != null)
                    language.EbuSaveOtpions.DisplayStandardCode = subNode.InnerText;
                subNode = node.SelectSingleNode("CharacterCodeTable");
                if (subNode != null)
                    language.EbuSaveOtpions.CharacterCodeTable = subNode.InnerText;
                subNode = node.SelectSingleNode("LanguageCode");
                if (subNode != null)
                    language.EbuSaveOtpions.LanguageCode = subNode.InnerText;
                subNode = node.SelectSingleNode("OriginalProgramTitle");
                if (subNode != null)
                    language.EbuSaveOtpions.OriginalProgramTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("OriginalEpisodeTitle");
                if (subNode != null)
                    language.EbuSaveOtpions.OriginalEpisodeTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslatedProgramTitle");
                if (subNode != null)
                    language.EbuSaveOtpions.TranslatedProgramTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslatedEpisodeTitle");
                if (subNode != null)
                    language.EbuSaveOtpions.TranslatedEpisodeTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslatorsName");
                if (subNode != null)
                    language.EbuSaveOtpions.TranslatorsName = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleListReferenceCode");
                if (subNode != null)
                    language.EbuSaveOtpions.SubtitleListReferenceCode = subNode.InnerText;
                subNode = node.SelectSingleNode("CountryOfOrigin");
                if (subNode != null)
                    language.EbuSaveOtpions.CountryOfOrigin = subNode.InnerText;
                subNode = node.SelectSingleNode("RevisionNumber");
                if (subNode != null)
                    language.EbuSaveOtpions.RevisionNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxNoOfDisplayableChars");
                if (subNode != null)
                    language.EbuSaveOtpions.MaxNoOfDisplayableChars = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxNumberOfDisplayableRows");
                if (subNode != null)
                    language.EbuSaveOtpions.MaxNumberOfDisplayableRows = subNode.InnerText;
                subNode = node.SelectSingleNode("DiskSequenceNumber");
                if (subNode != null)
                    language.EbuSaveOtpions.DiskSequenceNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalNumberOfDisks");
                if (subNode != null)
                    language.EbuSaveOtpions.TotalNumberOfDisks = subNode.InnerText;
                subNode = node.SelectSingleNode("Import");
                if (subNode != null)
                    language.EbuSaveOtpions.Import = subNode.InnerText;
                subNode = node.SelectSingleNode("TextAndTimingInformation");
                if (subNode != null)
                    language.EbuSaveOtpions.TextAndTimingInformation = subNode.InnerText;
                subNode = node.SelectSingleNode("JustificationCode");
                if (subNode != null)
                    language.EbuSaveOtpions.JustificationCode = subNode.InnerText;
                subNode = node.SelectSingleNode("Errors");
                if (subNode != null)
                    language.EbuSaveOtpions.Errors = subNode.InnerText;
                subNode = node.SelectSingleNode("ErrorsX");
                if (subNode != null)
                    language.EbuSaveOtpions.ErrorsX = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxLengthError");
                if (subNode != null)
                    language.EbuSaveOtpions.MaxLengthError = subNode.InnerText;
                subNode = node.SelectSingleNode("TextUnchangedPresentation");
                if (subNode != null)
                    language.EbuSaveOtpions.TextUnchangedPresentation = subNode.InnerText;
                subNode = node.SelectSingleNode("TextLeftJustifiedText");
                if (subNode != null)
                    language.EbuSaveOtpions.TextLeftJustifiedText = subNode.InnerText;
                subNode = node.SelectSingleNode("TextCentredText");
                if (subNode != null)
                    language.EbuSaveOtpions.TextCentredText = subNode.InnerText;
                subNode = node.SelectSingleNode("TextRightJustifiedText");
                if (subNode != null)
                    language.EbuSaveOtpions.TextRightJustifiedText = subNode.InnerText;

            }

            language.EffectKaraoke = new Nikse.SubtitleEdit.Logic.LanguageStructure.EffectKaraoke();
            node = doc.DocumentElement.SelectSingleNode("EffectKaraoke");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.EffectKaraoke.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseColor");
                if (subNode != null)
                    language.EffectKaraoke.ChooseColor = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalMilliseconds");
                if (subNode != null)
                    language.EffectKaraoke.TotalMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("EndDelayInMilliseconds");
                if (subNode != null)
                    language.EffectKaraoke.EndDelayInMilliseconds = subNode.InnerText;

            }

            language.EffectTypewriter = new Nikse.SubtitleEdit.Logic.LanguageStructure.EffectTypewriter();
            node = doc.DocumentElement.SelectSingleNode("EffectTypewriter");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.EffectTypewriter.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalMilliseconds");
                if (subNode != null)
                    language.EffectTypewriter.TotalMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("EndDelayInMillisecs");
                if (subNode != null)
                    language.EffectTypewriter.EndDelayInMillisecs = subNode.InnerText;

            }

            language.ExportCustomText = new Nikse.SubtitleEdit.Logic.LanguageStructure.ExportCustomText();
            node = doc.DocumentElement.SelectSingleNode("ExportCustomText");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ExportCustomText.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Formats");
                if (subNode != null)
                    language.ExportCustomText.Formats = subNode.InnerText;
                subNode = node.SelectSingleNode("New");
                if (subNode != null)
                    language.ExportCustomText.New = subNode.InnerText;
                subNode = node.SelectSingleNode("Edit");
                if (subNode != null)
                    language.ExportCustomText.Edit = subNode.InnerText;
                subNode = node.SelectSingleNode("Delete");
                if (subNode != null)
                    language.ExportCustomText.Delete = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveAs");
                if (subNode != null)
                    language.ExportCustomText.SaveAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveSubtitleAs");
                if (subNode != null)
                    language.ExportCustomText.SaveSubtitleAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleExportedInCustomFormatToX");
                if (subNode != null)
                    language.ExportCustomText.SubtitleExportedInCustomFormatToX = subNode.InnerText;

            }

            language.ExportCustomTextFormat = new Nikse.SubtitleEdit.Logic.LanguageStructure.ExportCustomTextFormat();
            node = doc.DocumentElement.SelectSingleNode("ExportCustomTextFormat");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ExportCustomTextFormat.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Template");
                if (subNode != null)
                    language.ExportCustomTextFormat.Template = subNode.InnerText;
                subNode = node.SelectSingleNode("Header");
                if (subNode != null)
                    language.ExportCustomTextFormat.Header = subNode.InnerText;
                subNode = node.SelectSingleNode("TextLine");
                if (subNode != null)
                    language.ExportCustomTextFormat.TextLine = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCode");
                if (subNode != null)
                    language.ExportCustomTextFormat.TimeCode = subNode.InnerText;
                subNode = node.SelectSingleNode("NewLine");
                if (subNode != null)
                    language.ExportCustomTextFormat.NewLine = subNode.InnerText;
                subNode = node.SelectSingleNode("Footer");
                if (subNode != null)
                    language.ExportCustomTextFormat.Footer = subNode.InnerText;
                subNode = node.SelectSingleNode("DoNotModify");
                if (subNode != null)
                    language.ExportCustomTextFormat.DoNotModify = subNode.InnerText;

            }

            language.ExportPngXml = new Nikse.SubtitleEdit.Logic.LanguageStructure.ExportPngXml();
            node = doc.DocumentElement.SelectSingleNode("ExportPngXml");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ExportPngXml.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageSettings");
                if (subNode != null)
                    language.ExportPngXml.ImageSettings = subNode.InnerText;
                subNode = node.SelectSingleNode("FontFamily");
                if (subNode != null)
                    language.ExportPngXml.FontFamily = subNode.InnerText;
                subNode = node.SelectSingleNode("FontSize");
                if (subNode != null)
                    language.ExportPngXml.FontSize = subNode.InnerText;
                subNode = node.SelectSingleNode("FontColor");
                if (subNode != null)
                    language.ExportPngXml.FontColor = subNode.InnerText;
                subNode = node.SelectSingleNode("BorderColor");
                if (subNode != null)
                    language.ExportPngXml.BorderColor = subNode.InnerText;
                subNode = node.SelectSingleNode("BorderWidth");
                if (subNode != null)
                    language.ExportPngXml.BorderWidth = subNode.InnerText;
                subNode = node.SelectSingleNode("BorderStyle");
                if (subNode != null)
                    language.ExportPngXml.BorderStyle = subNode.InnerText;
                subNode = node.SelectSingleNode("BorderStyleOneBox");
                if (subNode != null)
                    language.ExportPngXml.BorderStyleOneBox = subNode.InnerText;
                subNode = node.SelectSingleNode("BorderStyleBoxForEachLine");
                if (subNode != null)
                    language.ExportPngXml.BorderStyleBoxForEachLine = subNode.InnerText;
                subNode = node.SelectSingleNode("BorderStyleNormalWidthX");
                if (subNode != null)
                    language.ExportPngXml.BorderStyleNormalWidthX = subNode.InnerText;
                subNode = node.SelectSingleNode("ShadowColor");
                if (subNode != null)
                    language.ExportPngXml.ShadowColor = subNode.InnerText;
                subNode = node.SelectSingleNode("ShadowWidth");
                if (subNode != null)
                    language.ExportPngXml.ShadowWidth = subNode.InnerText;
                subNode = node.SelectSingleNode("Transparency");
                if (subNode != null)
                    language.ExportPngXml.Transparency = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageFormat");
                if (subNode != null)
                    language.ExportPngXml.ImageFormat = subNode.InnerText;
                subNode = node.SelectSingleNode("SimpleRendering");
                if (subNode != null)
                    language.ExportPngXml.SimpleRendering = subNode.InnerText;
                subNode = node.SelectSingleNode("AntiAliasingWithTransparency");
                if (subNode != null)
                    language.ExportPngXml.AntiAliasingWithTransparency = subNode.InnerText;
                subNode = node.SelectSingleNode("Text3D");
                if (subNode != null)
                    language.ExportPngXml.Text3D = subNode.InnerText;
                subNode = node.SelectSingleNode("SideBySide3D");
                if (subNode != null)
                    language.ExportPngXml.SideBySide3D = subNode.InnerText;
                subNode = node.SelectSingleNode("HalfTopBottom3D");
                if (subNode != null)
                    language.ExportPngXml.HalfTopBottom3D = subNode.InnerText;
                subNode = node.SelectSingleNode("Depth");
                if (subNode != null)
                    language.ExportPngXml.Depth = subNode.InnerText;
                subNode = node.SelectSingleNode("ExportAllLines");
                if (subNode != null)
                    language.ExportPngXml.ExportAllLines = subNode.InnerText;
                subNode = node.SelectSingleNode("XImagesSavedInY");
                if (subNode != null)
                    language.ExportPngXml.XImagesSavedInY = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoResolution");
                if (subNode != null)
                    language.ExportPngXml.VideoResolution = subNode.InnerText;
                subNode = node.SelectSingleNode("Align");
                if (subNode != null)
                    language.ExportPngXml.Align = subNode.InnerText;
                subNode = node.SelectSingleNode("Left");
                if (subNode != null)
                    language.ExportPngXml.Left = subNode.InnerText;
                subNode = node.SelectSingleNode("Right");
                if (subNode != null)
                    language.ExportPngXml.Right = subNode.InnerText;
                subNode = node.SelectSingleNode("Center");
                if (subNode != null)
                    language.ExportPngXml.Center = subNode.InnerText;
                subNode = node.SelectSingleNode("BottomMargin");
                if (subNode != null)
                    language.ExportPngXml.BottomMargin = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveBluRraySupAs");
                if (subNode != null)
                    language.ExportPngXml.SaveBluRraySupAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveVobSubAs");
                if (subNode != null)
                    language.ExportPngXml.SaveVobSubAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveFabImageScriptAs");
                if (subNode != null)
                    language.ExportPngXml.SaveFabImageScriptAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveDvdStudioProStlAs");
                if (subNode != null)
                    language.ExportPngXml.SaveDvdStudioProStlAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SomeLinesWereTooLongX");
                if (subNode != null)
                    language.ExportPngXml.SomeLinesWereTooLongX = subNode.InnerText;
                subNode = node.SelectSingleNode("LineHeight");
                if (subNode != null)
                    language.ExportPngXml.LineHeight = subNode.InnerText;
                subNode = node.SelectSingleNode("BoxSingleLine");
                if (subNode != null)
                    language.ExportPngXml.BoxSingleLine = subNode.InnerText;
                subNode = node.SelectSingleNode("BoxMultiLine");
                if (subNode != null)
                    language.ExportPngXml.BoxMultiLine = subNode.InnerText;

            }

            language.ExportText = new Nikse.SubtitleEdit.Logic.LanguageStructure.ExportText();
            node = doc.DocumentElement.SelectSingleNode("ExportText");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ExportText.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Preview");
                if (subNode != null)
                    language.ExportText.Preview = subNode.InnerText;
                subNode = node.SelectSingleNode("ExportOptions");
                if (subNode != null)
                    language.ExportText.ExportOptions = subNode.InnerText;
                subNode = node.SelectSingleNode("FormatText");
                if (subNode != null)
                    language.ExportText.FormatText = subNode.InnerText;
                subNode = node.SelectSingleNode("None");
                if (subNode != null)
                    language.ExportText.None = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeAllLines");
                if (subNode != null)
                    language.ExportText.MergeAllLines = subNode.InnerText;
                subNode = node.SelectSingleNode("UnbreakLines");
                if (subNode != null)
                    language.ExportText.UnbreakLines = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveStyling");
                if (subNode != null)
                    language.ExportText.RemoveStyling = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowLineNumbers");
                if (subNode != null)
                    language.ExportText.ShowLineNumbers = subNode.InnerText;
                subNode = node.SelectSingleNode("AddNewLineAfterLineNumber");
                if (subNode != null)
                    language.ExportText.AddNewLineAfterLineNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowTimeCode");
                if (subNode != null)
                    language.ExportText.ShowTimeCode = subNode.InnerText;
                subNode = node.SelectSingleNode("AddNewLineAfterTimeCode");
                if (subNode != null)
                    language.ExportText.AddNewLineAfterTimeCode = subNode.InnerText;
                subNode = node.SelectSingleNode("AddNewLineAfterTexts");
                if (subNode != null)
                    language.ExportText.AddNewLineAfterTexts = subNode.InnerText;
                subNode = node.SelectSingleNode("AddNewLineBetweenSubtitles");
                if (subNode != null)
                    language.ExportText.AddNewLineBetweenSubtitles = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeFormat");
                if (subNode != null)
                    language.ExportText.TimeCodeFormat = subNode.InnerText;
                subNode = node.SelectSingleNode("Srt");
                if (subNode != null)
                    language.ExportText.Srt = subNode.InnerText;
                subNode = node.SelectSingleNode("Milliseconds");
                if (subNode != null)
                    language.ExportText.Milliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("HHMMSSFF");
                if (subNode != null)
                    language.ExportText.HHMMSSFF = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeSeperator");
                if (subNode != null)
                    language.ExportText.TimeCodeSeperator = subNode.InnerText;

            }

            language.ExtractDateTimeInfo = new Nikse.SubtitleEdit.Logic.LanguageStructure.ExtractDateTimeInfo();
            node = doc.DocumentElement.SelectSingleNode("ExtractDateTimeInfo");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ExtractDateTimeInfo.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenVideoFile");
                if (subNode != null)
                    language.ExtractDateTimeInfo.OpenVideoFile = subNode.InnerText;
                subNode = node.SelectSingleNode("StartFrom");
                if (subNode != null)
                    language.ExtractDateTimeInfo.StartFrom = subNode.InnerText;
                subNode = node.SelectSingleNode("DateTimeFormat");
                if (subNode != null)
                    language.ExtractDateTimeInfo.DateTimeFormat = subNode.InnerText;
                subNode = node.SelectSingleNode("Example");
                if (subNode != null)
                    language.ExtractDateTimeInfo.Example = subNode.InnerText;
                subNode = node.SelectSingleNode("GenerateSubtitle");
                if (subNode != null)
                    language.ExtractDateTimeInfo.GenerateSubtitle = subNode.InnerText;

            }

            language.FindDialog = new Nikse.SubtitleEdit.Logic.LanguageStructure.FindDialog();
            node = doc.DocumentElement.SelectSingleNode("FindDialog");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.FindDialog.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Find");
                if (subNode != null)
                    language.FindDialog.Find = subNode.InnerText;
                subNode = node.SelectSingleNode("Normal");
                if (subNode != null)
                    language.FindDialog.Normal = subNode.InnerText;
                subNode = node.SelectSingleNode("CaseSensitive");
                if (subNode != null)
                    language.FindDialog.CaseSensitive = subNode.InnerText;
                subNode = node.SelectSingleNode("RegularExpression");
                if (subNode != null)
                    language.FindDialog.RegularExpression = subNode.InnerText;

            }

            language.FindSubtitleLine = new Nikse.SubtitleEdit.Logic.LanguageStructure.FindSubtitleLine();
            node = doc.DocumentElement.SelectSingleNode("FindSubtitleLine");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.FindSubtitleLine.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Find");
                if (subNode != null)
                    language.FindSubtitleLine.Find = subNode.InnerText;
                subNode = node.SelectSingleNode("FindNext");
                if (subNode != null)
                    language.FindSubtitleLine.FindNext = subNode.InnerText;

            }

            language.FixCommonErrors = new Nikse.SubtitleEdit.Logic.LanguageStructure.FixCommonErrors();
            node = doc.DocumentElement.SelectSingleNode("FixCommonErrors");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.FixCommonErrors.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Step1");
                if (subNode != null)
                    language.FixCommonErrors.Step1 = subNode.InnerText;
                subNode = node.SelectSingleNode("WhatToFix");
                if (subNode != null)
                    language.FixCommonErrors.WhatToFix = subNode.InnerText;
                subNode = node.SelectSingleNode("Example");
                if (subNode != null)
                    language.FixCommonErrors.Example = subNode.InnerText;
                subNode = node.SelectSingleNode("SelectAll");
                if (subNode != null)
                    language.FixCommonErrors.SelectAll = subNode.InnerText;
                subNode = node.SelectSingleNode("InverseSelection");
                if (subNode != null)
                    language.FixCommonErrors.InverseSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("Back");
                if (subNode != null)
                    language.FixCommonErrors.Back = subNode.InnerText;
                subNode = node.SelectSingleNode("Next");
                if (subNode != null)
                    language.FixCommonErrors.Next = subNode.InnerText;
                subNode = node.SelectSingleNode("Step2");
                if (subNode != null)
                    language.FixCommonErrors.Step2 = subNode.InnerText;
                subNode = node.SelectSingleNode("Fixes");
                if (subNode != null)
                    language.FixCommonErrors.Fixes = subNode.InnerText;
                subNode = node.SelectSingleNode("Log");
                if (subNode != null)
                    language.FixCommonErrors.Log = subNode.InnerText;
                subNode = node.SelectSingleNode("Function");
                if (subNode != null)
                    language.FixCommonErrors.Function = subNode.InnerText;
                subNode = node.SelectSingleNode("RemovedEmptyLine");
                if (subNode != null)
                    language.FixCommonErrors.RemovedEmptyLine = subNode.InnerText;
                subNode = node.SelectSingleNode("RemovedEmptyLineAtTop");
                if (subNode != null)
                    language.FixCommonErrors.RemovedEmptyLineAtTop = subNode.InnerText;
                subNode = node.SelectSingleNode("RemovedEmptyLineAtBottom");
                if (subNode != null)
                    language.FixCommonErrors.RemovedEmptyLineAtBottom = subNode.InnerText;
                subNode = node.SelectSingleNode("RemovedEmptyLinesUnsedLineBreaks");
                if (subNode != null)
                    language.FixCommonErrors.RemovedEmptyLinesUnsedLineBreaks = subNode.InnerText;
                subNode = node.SelectSingleNode("EmptyLinesRemovedX");
                if (subNode != null)
                    language.FixCommonErrors.EmptyLinesRemovedX = subNode.InnerText;
                subNode = node.SelectSingleNode("FixOverlappingDisplayTimes");
                if (subNode != null)
                    language.FixCommonErrors.FixOverlappingDisplayTimes = subNode.InnerText;
                subNode = node.SelectSingleNode("FixShortDisplayTimes");
                if (subNode != null)
                    language.FixCommonErrors.FixShortDisplayTimes = subNode.InnerText;
                subNode = node.SelectSingleNode("FixLongDisplayTimes");
                if (subNode != null)
                    language.FixCommonErrors.FixLongDisplayTimes = subNode.InnerText;
                subNode = node.SelectSingleNode("FixInvalidItalicTags");
                if (subNode != null)
                    language.FixCommonErrors.FixInvalidItalicTags = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveUnneededSpaces");
                if (subNode != null)
                    language.FixCommonErrors.RemoveUnneededSpaces = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveUnneededPeriods");
                if (subNode != null)
                    language.FixCommonErrors.RemoveUnneededPeriods = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingSpaces");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingSpaces = subNode.InnerText;
                subNode = node.SelectSingleNode("BreakLongLines");
                if (subNode != null)
                    language.FixCommonErrors.BreakLongLines = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveLineBreaks");
                if (subNode != null)
                    language.FixCommonErrors.RemoveLineBreaks = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveLineBreaksAll");
                if (subNode != null)
                    language.FixCommonErrors.RemoveLineBreaksAll = subNode.InnerText;
                subNode = node.SelectSingleNode("FixUppercaseIInsindeLowercaseWords");
                if (subNode != null)
                    language.FixCommonErrors.FixUppercaseIInsindeLowercaseWords = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleApostrophes");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleApostrophes = subNode.InnerText;
                subNode = node.SelectSingleNode("AddPeriods");
                if (subNode != null)
                    language.FixCommonErrors.AddPeriods = subNode.InnerText;
                subNode = node.SelectSingleNode("StartWithUppercaseLetterAfterParagraph");
                if (subNode != null)
                    language.FixCommonErrors.StartWithUppercaseLetterAfterParagraph = subNode.InnerText;
                subNode = node.SelectSingleNode("StartWithUppercaseLetterAfterPeriodInsideParagraph");
                if (subNode != null)
                    language.FixCommonErrors.StartWithUppercaseLetterAfterPeriodInsideParagraph = subNode.InnerText;
                subNode = node.SelectSingleNode("StartWithUppercaseLetterAfterColon");
                if (subNode != null)
                    language.FixCommonErrors.StartWithUppercaseLetterAfterColon = subNode.InnerText;
                subNode = node.SelectSingleNode("FixLowercaseIToUppercaseI");
                if (subNode != null)
                    language.FixCommonErrors.FixLowercaseIToUppercaseI = subNode.InnerText;
                subNode = node.SelectSingleNode("FixCommonOcrErrors");
                if (subNode != null)
                    language.FixCommonErrors.FixCommonOcrErrors = subNode.InnerText;
                subNode = node.SelectSingleNode("CommonOcrErrorsFixed");
                if (subNode != null)
                    language.FixCommonErrors.CommonOcrErrorsFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveSpaceBetweenNumber");
                if (subNode != null)
                    language.FixCommonErrors.RemoveSpaceBetweenNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDialogsOnOneLine");
                if (subNode != null)
                    language.FixCommonErrors.FixDialogsOnOneLine = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveSpaceBetweenNumbersFixed");
                if (subNode != null)
                    language.FixCommonErrors.RemoveSpaceBetweenNumbersFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("FixTurkishAnsi");
                if (subNode != null)
                    language.FixCommonErrors.FixTurkishAnsi = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDanishLetterI");
                if (subNode != null)
                    language.FixCommonErrors.FixDanishLetterI = subNode.InnerText;
                subNode = node.SelectSingleNode("FixSpanishInvertedQuestionAndExclamationMarks");
                if (subNode != null)
                    language.FixCommonErrors.FixSpanishInvertedQuestionAndExclamationMarks = subNode.InnerText;
                subNode = node.SelectSingleNode("AddMissingQuote");
                if (subNode != null)
                    language.FixCommonErrors.AddMissingQuote = subNode.InnerText;
                subNode = node.SelectSingleNode("AddMissingQuotes");
                if (subNode != null)
                    language.FixCommonErrors.AddMissingQuotes = subNode.InnerText;
                subNode = node.SelectSingleNode("FixHyphens");
                if (subNode != null)
                    language.FixCommonErrors.FixHyphens = subNode.InnerText;
                subNode = node.SelectSingleNode("FixHyphensAdd");
                if (subNode != null)
                    language.FixCommonErrors.FixHyphensAdd = subNode.InnerText;
                subNode = node.SelectSingleNode("FixHyphen");
                if (subNode != null)
                    language.FixCommonErrors.FixHyphen = subNode.InnerText;
                subNode = node.SelectSingleNode("XHyphensFixed");
                if (subNode != null)
                    language.FixCommonErrors.XHyphensFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("AddMissingQuotesExample");
                if (subNode != null)
                    language.FixCommonErrors.AddMissingQuotesExample = subNode.InnerText;
                subNode = node.SelectSingleNode("XMissingQuotesAdded");
                if (subNode != null)
                    language.FixCommonErrors.XMissingQuotesAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("Fix3PlusLines");
                if (subNode != null)
                    language.FixCommonErrors.Fix3PlusLines = subNode.InnerText;
                subNode = node.SelectSingleNode("Fix3PlusLine");
                if (subNode != null)
                    language.FixCommonErrors.Fix3PlusLine = subNode.InnerText;
                subNode = node.SelectSingleNode("X3PlusLinesFixed");
                if (subNode != null)
                    language.FixCommonErrors.X3PlusLinesFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("Analysing");
                if (subNode != null)
                    language.FixCommonErrors.Analysing = subNode.InnerText;
                subNode = node.SelectSingleNode("NothingToFix");
                if (subNode != null)
                    language.FixCommonErrors.NothingToFix = subNode.InnerText;
                subNode = node.SelectSingleNode("FixesFoundX");
                if (subNode != null)
                    language.FixCommonErrors.FixesFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixesApplied");
                if (subNode != null)
                    language.FixCommonErrors.XFixesApplied = subNode.InnerText;
                subNode = node.SelectSingleNode("NothingToFixBut");
                if (subNode != null)
                    language.FixCommonErrors.NothingToFixBut = subNode.InnerText;
                subNode = node.SelectSingleNode("FixLowercaseIToUppercaseICheckedButCurrentLanguageIsNotEnglish");
                if (subNode != null)
                    language.FixCommonErrors.FixLowercaseIToUppercaseICheckedButCurrentLanguageIsNotEnglish = subNode.InnerText;
                subNode = node.SelectSingleNode("Continue");
                if (subNode != null)
                    language.FixCommonErrors.Continue = subNode.InnerText;
                subNode = node.SelectSingleNode("ContinueAnyway");
                if (subNode != null)
                    language.FixCommonErrors.ContinueAnyway = subNode.InnerText;
                subNode = node.SelectSingleNode("UncheckedFixLowercaseIToUppercaseI");
                if (subNode != null)
                    language.FixCommonErrors.UncheckedFixLowercaseIToUppercaseI = subNode.InnerText;
                subNode = node.SelectSingleNode("XIsChangedToUppercase");
                if (subNode != null)
                    language.FixCommonErrors.XIsChangedToUppercase = subNode.InnerText;
                subNode = node.SelectSingleNode("FixFirstLetterToUppercaseAfterParagraph");
                if (subNode != null)
                    language.FixCommonErrors.FixFirstLetterToUppercaseAfterParagraph = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeShortLine");
                if (subNode != null)
                    language.FixCommonErrors.MergeShortLine = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeShortLineAll");
                if (subNode != null)
                    language.FixCommonErrors.MergeShortLineAll = subNode.InnerText;
                subNode = node.SelectSingleNode("XLineBreaksAdded");
                if (subNode != null)
                    language.FixCommonErrors.XLineBreaksAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("BreakLongLine");
                if (subNode != null)
                    language.FixCommonErrors.BreakLongLine = subNode.InnerText;
                subNode = node.SelectSingleNode("FixLongDisplayTime");
                if (subNode != null)
                    language.FixCommonErrors.FixLongDisplayTime = subNode.InnerText;
                subNode = node.SelectSingleNode("FixInvalidItalicTag");
                if (subNode != null)
                    language.FixCommonErrors.FixInvalidItalicTag = subNode.InnerText;
                subNode = node.SelectSingleNode("FixShortDisplayTime");
                if (subNode != null)
                    language.FixCommonErrors.FixShortDisplayTime = subNode.InnerText;
                subNode = node.SelectSingleNode("FixOverlappingDisplayTime");
                if (subNode != null)
                    language.FixCommonErrors.FixOverlappingDisplayTime = subNode.InnerText;
                subNode = node.SelectSingleNode("FixInvalidItalicTagsExample");
                if (subNode != null)
                    language.FixCommonErrors.FixInvalidItalicTagsExample = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveUnneededSpacesExample");
                if (subNode != null)
                    language.FixCommonErrors.RemoveUnneededSpacesExample = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveUnneededPeriodsExample");
                if (subNode != null)
                    language.FixCommonErrors.RemoveUnneededPeriodsExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingSpacesExample");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingSpacesExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixUppercaseIInsindeLowercaseWordsExample");
                if (subNode != null)
                    language.FixCommonErrors.FixUppercaseIInsindeLowercaseWordsExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixLowercaseIToUppercaseIExample");
                if (subNode != null)
                    language.FixCommonErrors.FixLowercaseIToUppercaseIExample = subNode.InnerText;
                subNode = node.SelectSingleNode("StartTimeLaterThanEndTime");
                if (subNode != null)
                    language.FixCommonErrors.StartTimeLaterThanEndTime = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToFixStartTimeLaterThanEndTime");
                if (subNode != null)
                    language.FixCommonErrors.UnableToFixStartTimeLaterThanEndTime = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixedToYZ");
                if (subNode != null)
                    language.FixCommonErrors.XFixedToYZ = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToFixTextXY");
                if (subNode != null)
                    language.FixCommonErrors.UnableToFixTextXY = subNode.InnerText;
                subNode = node.SelectSingleNode("XOverlappingTimestampsFixed");
                if (subNode != null)
                    language.FixCommonErrors.XOverlappingTimestampsFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("XDisplayTimesProlonged");
                if (subNode != null)
                    language.FixCommonErrors.XDisplayTimesProlonged = subNode.InnerText;
                subNode = node.SelectSingleNode("XInvalidHtmlTagsFixed");
                if (subNode != null)
                    language.FixCommonErrors.XInvalidHtmlTagsFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("XDisplayTimesShortned");
                if (subNode != null)
                    language.FixCommonErrors.XDisplayTimesShortned = subNode.InnerText;
                subNode = node.SelectSingleNode("XLinesUnbreaked");
                if (subNode != null)
                    language.FixCommonErrors.XLinesUnbreaked = subNode.InnerText;
                subNode = node.SelectSingleNode("UnneededSpace");
                if (subNode != null)
                    language.FixCommonErrors.UnneededSpace = subNode.InnerText;
                subNode = node.SelectSingleNode("XUnneededSpacesRemoved");
                if (subNode != null)
                    language.FixCommonErrors.XUnneededSpacesRemoved = subNode.InnerText;
                subNode = node.SelectSingleNode("UnneededPeriod");
                if (subNode != null)
                    language.FixCommonErrors.UnneededPeriod = subNode.InnerText;
                subNode = node.SelectSingleNode("XUnneededPeriodsRemoved");
                if (subNode != null)
                    language.FixCommonErrors.XUnneededPeriodsRemoved = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingSpace");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingSpace = subNode.InnerText;
                subNode = node.SelectSingleNode("XMissingSpacesAdded");
                if (subNode != null)
                    language.FixCommonErrors.XMissingSpacesAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("FixUppercaseIInsideLowercaseWord");
                if (subNode != null)
                    language.FixCommonErrors.FixUppercaseIInsideLowercaseWord = subNode.InnerText;
                subNode = node.SelectSingleNode("XPeriodsAdded");
                if (subNode != null)
                    language.FixCommonErrors.XPeriodsAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingPeriodAtEndOfLine");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingPeriodAtEndOfLine = subNode.InnerText;
                subNode = node.SelectSingleNode("XDoubleApostrophesFixed");
                if (subNode != null)
                    language.FixCommonErrors.XDoubleApostrophesFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("XUppercaseIsFoundInsideLowercaseWords");
                if (subNode != null)
                    language.FixCommonErrors.XUppercaseIsFoundInsideLowercaseWords = subNode.InnerText;
                subNode = node.SelectSingleNode("RefreshFixes");
                if (subNode != null)
                    language.FixCommonErrors.RefreshFixes = subNode.InnerText;
                subNode = node.SelectSingleNode("ApplyFixes");
                if (subNode != null)
                    language.FixCommonErrors.ApplyFixes = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBreak");
                if (subNode != null)
                    language.FixCommonErrors.AutoBreak = subNode.InnerText;
                subNode = node.SelectSingleNode("Unbreak");
                if (subNode != null)
                    language.FixCommonErrors.Unbreak = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleDash");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleDash = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleGreaterThan");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleGreaterThan = subNode.InnerText;
                subNode = node.SelectSingleNode("FixEllipsesStart");
                if (subNode != null)
                    language.FixCommonErrors.FixEllipsesStart = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingOpenBracket");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingOpenBracket = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMusicNotation");
                if (subNode != null)
                    language.FixCommonErrors.FixMusicNotation = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleDashs");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleDashs = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleGreaterThans");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleGreaterThans = subNode.InnerText;
                subNode = node.SelectSingleNode("FixEllipsesStarts");
                if (subNode != null)
                    language.FixCommonErrors.FixEllipsesStarts = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingOpenBrackets");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingOpenBrackets = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMusicNotations");
                if (subNode != null)
                    language.FixCommonErrors.FixMusicNotations = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixDoubleDash");
                if (subNode != null)
                    language.FixCommonErrors.XFixDoubleDash = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixDoubleGreaterThan");
                if (subNode != null)
                    language.FixCommonErrors.XFixDoubleGreaterThan = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixEllipsesStart");
                if (subNode != null)
                    language.FixCommonErrors.XFixEllipsesStart = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixMissingOpenBracket");
                if (subNode != null)
                    language.FixCommonErrors.XFixMissingOpenBracket = subNode.InnerText;
                subNode = node.SelectSingleNode("XFixMusicNotation");
                if (subNode != null)
                    language.FixCommonErrors.XFixMusicNotation = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleDashExample");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleDashExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixDoubleGreaterThanExample");
                if (subNode != null)
                    language.FixCommonErrors.FixDoubleGreaterThanExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixEllipsesStartExample");
                if (subNode != null)
                    language.FixCommonErrors.FixEllipsesStartExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMissingOpenBracketExample");
                if (subNode != null)
                    language.FixCommonErrors.FixMissingOpenBracketExample = subNode.InnerText;
                subNode = node.SelectSingleNode("FixMusicNotationExample");
                if (subNode != null)
                    language.FixCommonErrors.FixMusicNotationExample = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfImportantLogMessages");
                if (subNode != null)
                    language.FixCommonErrors.NumberOfImportantLogMessages = subNode.InnerText;
                subNode = node.SelectSingleNode("FixedOkXY");
                if (subNode != null)
                    language.FixCommonErrors.FixedOkXY = subNode.InnerText;

            }

            language.GetDictionaries = new Nikse.SubtitleEdit.Logic.LanguageStructure.GetDictionaries();
            node = doc.DocumentElement.SelectSingleNode("GetDictionaries");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.GetDictionaries.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("DescriptionLine1");
                if (subNode != null)
                    language.GetDictionaries.DescriptionLine1 = subNode.InnerText;
                subNode = node.SelectSingleNode("DescriptionLine2");
                if (subNode != null)
                    language.GetDictionaries.DescriptionLine2 = subNode.InnerText;
                subNode = node.SelectSingleNode("GetDictionariesHere");
                if (subNode != null)
                    language.GetDictionaries.GetDictionariesHere = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenOpenOfficeWiki");
                if (subNode != null)
                    language.GetDictionaries.OpenOpenOfficeWiki = subNode.InnerText;
                subNode = node.SelectSingleNode("GetAllDictionaries");
                if (subNode != null)
                    language.GetDictionaries.GetAllDictionaries = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseLanguageAndClickDownload");
                if (subNode != null)
                    language.GetDictionaries.ChooseLanguageAndClickDownload = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenDictionariesFolder");
                if (subNode != null)
                    language.GetDictionaries.OpenDictionariesFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("Download");
                if (subNode != null)
                    language.GetDictionaries.Download = subNode.InnerText;
                subNode = node.SelectSingleNode("XDownloaded");
                if (subNode != null)
                    language.GetDictionaries.XDownloaded = subNode.InnerText;

            }

            language.GetTesseractDictionaries = new Nikse.SubtitleEdit.Logic.LanguageStructure.GetTesseractDictionaries();
            node = doc.DocumentElement.SelectSingleNode("GetTesseractDictionaries");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.GetTesseractDictionaries.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("DescriptionLine1");
                if (subNode != null)
                    language.GetTesseractDictionaries.DescriptionLine1 = subNode.InnerText;
                subNode = node.SelectSingleNode("DownloadFailed");
                if (subNode != null)
                    language.GetTesseractDictionaries.DownloadFailed = subNode.InnerText;
                subNode = node.SelectSingleNode("GetDictionariesHere");
                if (subNode != null)
                    language.GetTesseractDictionaries.GetDictionariesHere = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenOpenOfficeWiki");
                if (subNode != null)
                    language.GetTesseractDictionaries.OpenOpenOfficeWiki = subNode.InnerText;
                subNode = node.SelectSingleNode("GetAllDictionaries");
                if (subNode != null)
                    language.GetTesseractDictionaries.GetAllDictionaries = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseLanguageAndClickDownload");
                if (subNode != null)
                    language.GetTesseractDictionaries.ChooseLanguageAndClickDownload = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenDictionariesFolder");
                if (subNode != null)
                    language.GetTesseractDictionaries.OpenDictionariesFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("Download");
                if (subNode != null)
                    language.GetTesseractDictionaries.Download = subNode.InnerText;
                subNode = node.SelectSingleNode("XDownloaded");
                if (subNode != null)
                    language.GetTesseractDictionaries.XDownloaded = subNode.InnerText;

            }

            language.GoogleTranslate = new Nikse.SubtitleEdit.Logic.LanguageStructure.GoogleTranslate();
            node = doc.DocumentElement.SelectSingleNode("GoogleTranslate");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.GoogleTranslate.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("From");
                if (subNode != null)
                    language.GoogleTranslate.From = subNode.InnerText;
                subNode = node.SelectSingleNode("To");
                if (subNode != null)
                    language.GoogleTranslate.To = subNode.InnerText;
                subNode = node.SelectSingleNode("Translate");
                if (subNode != null)
                    language.GoogleTranslate.Translate = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseWait");
                if (subNode != null)
                    language.GoogleTranslate.PleaseWait = subNode.InnerText;
                subNode = node.SelectSingleNode("PoweredByGoogleTranslate");
                if (subNode != null)
                    language.GoogleTranslate.PoweredByGoogleTranslate = subNode.InnerText;
                subNode = node.SelectSingleNode("PoweredByMicrosoftTranslate");
                if (subNode != null)
                    language.GoogleTranslate.PoweredByMicrosoftTranslate = subNode.InnerText;

            }

            language.GoogleOrMicrosoftTranslate = new Nikse.SubtitleEdit.Logic.LanguageStructure.GoogleOrMicrosoftTranslate();
            node = doc.DocumentElement.SelectSingleNode("GoogleOrMicrosoftTranslate");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("From");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.From = subNode.InnerText;
                subNode = node.SelectSingleNode("To");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.To = subNode.InnerText;
                subNode = node.SelectSingleNode("Translate");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.Translate = subNode.InnerText;
                subNode = node.SelectSingleNode("SourceText");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.SourceText = subNode.InnerText;
                subNode = node.SelectSingleNode("GoogleTranslate");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.GoogleTranslate = subNode.InnerText;
                subNode = node.SelectSingleNode("MicrosoftTranslate");
                if (subNode != null)
                    language.GoogleOrMicrosoftTranslate.MicrosoftTranslate = subNode.InnerText;

            }

            language.GoToLine = new Nikse.SubtitleEdit.Logic.LanguageStructure.GoToLine();
            node = doc.DocumentElement.SelectSingleNode("GoToLine");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.GoToLine.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("XIsNotAValidNumber");
                if (subNode != null)
                    language.GoToLine.XIsNotAValidNumber = subNode.InnerText;

            }

            language.ImportImages = new Nikse.SubtitleEdit.Logic.LanguageStructure.ImportImages();
            node = doc.DocumentElement.SelectSingleNode("ImportImages");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ImportImages.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageFiles");
                if (subNode != null)
                    language.ImportImages.ImageFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("Input");
                if (subNode != null)
                    language.ImportImages.Input = subNode.InnerText;
                subNode = node.SelectSingleNode("InputDescription");
                if (subNode != null)
                    language.ImportImages.InputDescription = subNode.InnerText;

            }

            language.ImportSceneChanges = new Nikse.SubtitleEdit.Logic.LanguageStructure.ImportSceneChanges();
            node = doc.DocumentElement.SelectSingleNode("ImportSceneChanges");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ImportSceneChanges.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenTextFile");
                if (subNode != null)
                    language.ImportSceneChanges.OpenTextFile = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportOptions");
                if (subNode != null)
                    language.ImportSceneChanges.ImportOptions = subNode.InnerText;
                subNode = node.SelectSingleNode("TextFiles");
                if (subNode != null)
                    language.ImportSceneChanges.TextFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodes");
                if (subNode != null)
                    language.ImportSceneChanges.TimeCodes = subNode.InnerText;
                subNode = node.SelectSingleNode("Frames");
                if (subNode != null)
                    language.ImportSceneChanges.Frames = subNode.InnerText;
                subNode = node.SelectSingleNode("Seconds");
                if (subNode != null)
                    language.ImportSceneChanges.Seconds = subNode.InnerText;
                subNode = node.SelectSingleNode("Milliseconds");
                if (subNode != null)
                    language.ImportSceneChanges.Milliseconds = subNode.InnerText;

            }

            language.ImportText = new Nikse.SubtitleEdit.Logic.LanguageStructure.ImportText();
            node = doc.DocumentElement.SelectSingleNode("ImportText");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ImportText.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("OneSubtitleIsOneFile");
                if (subNode != null)
                    language.ImportText.OneSubtitleIsOneFile = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenTextFile");
                if (subNode != null)
                    language.ImportText.OpenTextFile = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenTextFiles");
                if (subNode != null)
                    language.ImportText.OpenTextFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportOptions");
                if (subNode != null)
                    language.ImportText.ImportOptions = subNode.InnerText;
                subNode = node.SelectSingleNode("Splitting");
                if (subNode != null)
                    language.ImportText.Splitting = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoSplitText");
                if (subNode != null)
                    language.ImportText.AutoSplitText = subNode.InnerText;
                subNode = node.SelectSingleNode("OneLineIsOneSubtitle");
                if (subNode != null)
                    language.ImportText.OneLineIsOneSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("LineBreak");
                if (subNode != null)
                    language.ImportText.LineBreak = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitAtBlankLines");
                if (subNode != null)
                    language.ImportText.SplitAtBlankLines = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeShortLines");
                if (subNode != null)
                    language.ImportText.MergeShortLines = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveEmptyLines");
                if (subNode != null)
                    language.ImportText.RemoveEmptyLines = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveLinesWithoutLetters");
                if (subNode != null)
                    language.ImportText.RemoveLinesWithoutLetters = subNode.InnerText;
                subNode = node.SelectSingleNode("GenerateTimeCodes");
                if (subNode != null)
                    language.ImportText.GenerateTimeCodes = subNode.InnerText;
                subNode = node.SelectSingleNode("GapBetweenSubtitles");
                if (subNode != null)
                    language.ImportText.GapBetweenSubtitles = subNode.InnerText;
                subNode = node.SelectSingleNode("Auto");
                if (subNode != null)
                    language.ImportText.Auto = subNode.InnerText;
                subNode = node.SelectSingleNode("Fixed");
                if (subNode != null)
                    language.ImportText.Fixed = subNode.InnerText;
                subNode = node.SelectSingleNode("Refresh");
                if (subNode != null)
                    language.ImportText.Refresh = subNode.InnerText;
                subNode = node.SelectSingleNode("TextFiles");
                if (subNode != null)
                    language.ImportText.TextFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("PreviewLinesModifiedX");
                if (subNode != null)
                    language.ImportText.PreviewLinesModifiedX = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodes");
                if (subNode != null)
                    language.ImportText.TimeCodes = subNode.InnerText;

            }

            language.Interjections = new Nikse.SubtitleEdit.Logic.LanguageStructure.Interjections();
            node = doc.DocumentElement.SelectSingleNode("Interjections");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.Interjections.Title = subNode.InnerText;

            }

            language.JoinSubtitles = new Nikse.SubtitleEdit.Logic.LanguageStructure.JoinSubtitles();
            node = doc.DocumentElement.SelectSingleNode("JoinSubtitles");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.JoinSubtitles.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Information");
                if (subNode != null)
                    language.JoinSubtitles.Information = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfLines");
                if (subNode != null)
                    language.JoinSubtitles.NumberOfLines = subNode.InnerText;
                subNode = node.SelectSingleNode("StartTime");
                if (subNode != null)
                    language.JoinSubtitles.StartTime = subNode.InnerText;
                subNode = node.SelectSingleNode("EndTime");
                if (subNode != null)
                    language.JoinSubtitles.EndTime = subNode.InnerText;
                subNode = node.SelectSingleNode("FileName");
                if (subNode != null)
                    language.JoinSubtitles.FileName = subNode.InnerText;
                subNode = node.SelectSingleNode("Join");
                if (subNode != null)
                    language.JoinSubtitles.Join = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalNumberOfLinesX");
                if (subNode != null)
                    language.JoinSubtitles.TotalNumberOfLinesX = subNode.InnerText;

            }

            language.Main = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main();
            node = doc.DocumentElement.SelectSingleNode("Main");
            if (node != null)
            {
                subNode = node.SelectSingleNode("SaveChangesToUntitled");
                if (subNode != null)
                    language.Main.SaveChangesToUntitled = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveChangesToX");
                if (subNode != null)
                    language.Main.SaveChangesToX = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveChangesToUntitledOriginal");
                if (subNode != null)
                    language.Main.SaveChangesToUntitledOriginal = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveChangesToOriginalX");
                if (subNode != null)
                    language.Main.SaveChangesToOriginalX = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveSubtitleAs");
                if (subNode != null)
                    language.Main.SaveSubtitleAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveOriginalSubtitleAs");
                if (subNode != null)
                    language.Main.SaveOriginalSubtitleAs = subNode.InnerText;
                subNode = node.SelectSingleNode("NoSubtitleLoaded");
                if (subNode != null)
                    language.Main.NoSubtitleLoaded = subNode.InnerText;
                subNode = node.SelectSingleNode("VisualSyncSelectedLines");
                if (subNode != null)
                    language.Main.VisualSyncSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("VisualSyncTitle");
                if (subNode != null)
                    language.Main.VisualSyncTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeVisualSync");
                if (subNode != null)
                    language.Main.BeforeVisualSync = subNode.InnerText;
                subNode = node.SelectSingleNode("VisualSyncPerformedOnSelectedLines");
                if (subNode != null)
                    language.Main.VisualSyncPerformedOnSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("VisualSyncPerformed");
                if (subNode != null)
                    language.Main.VisualSyncPerformed = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportThisVobSubSubtitle");
                if (subNode != null)
                    language.Main.ImportThisVobSubSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("FileXIsLargerThan10Mb");
                if (subNode != null)
                    language.Main.FileXIsLargerThan10Mb = subNode.InnerText;
                subNode = node.SelectSingleNode("ContinueAnyway");
                if (subNode != null)
                    language.Main.ContinueAnyway = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeLoadOf");
                if (subNode != null)
                    language.Main.BeforeLoadOf = subNode.InnerText;
                subNode = node.SelectSingleNode("LoadedSubtitleX");
                if (subNode != null)
                    language.Main.LoadedSubtitleX = subNode.InnerText;
                subNode = node.SelectSingleNode("LoadedEmptyOrShort");
                if (subNode != null)
                    language.Main.LoadedEmptyOrShort = subNode.InnerText;
                subNode = node.SelectSingleNode("FileIsEmptyOrShort");
                if (subNode != null)
                    language.Main.FileIsEmptyOrShort = subNode.InnerText;
                subNode = node.SelectSingleNode("FileNotFound");
                if (subNode != null)
                    language.Main.FileNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("SavedSubtitleX");
                if (subNode != null)
                    language.Main.SavedSubtitleX = subNode.InnerText;
                subNode = node.SelectSingleNode("SavedOriginalSubtitleX");
                if (subNode != null)
                    language.Main.SavedOriginalSubtitleX = subNode.InnerText;
                subNode = node.SelectSingleNode("FileOnDiskModified");
                if (subNode != null)
                    language.Main.FileOnDiskModified = subNode.InnerText;
                subNode = node.SelectSingleNode("OverwriteModifiedFile");
                if (subNode != null)
                    language.Main.OverwriteModifiedFile = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToSaveSubtitleX");
                if (subNode != null)
                    language.Main.UnableToSaveSubtitleX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeNew");
                if (subNode != null)
                    language.Main.BeforeNew = subNode.InnerText;
                subNode = node.SelectSingleNode("New");
                if (subNode != null)
                    language.Main.New = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeConvertingToX");
                if (subNode != null)
                    language.Main.BeforeConvertingToX = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertedToX");
                if (subNode != null)
                    language.Main.ConvertedToX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeShowEarlier");
                if (subNode != null)
                    language.Main.BeforeShowEarlier = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeShowLater");
                if (subNode != null)
                    language.Main.BeforeShowLater = subNode.InnerText;
                subNode = node.SelectSingleNode("LineNumberX");
                if (subNode != null)
                    language.Main.LineNumberX = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenVideoFile");
                if (subNode != null)
                    language.Main.OpenVideoFile = subNode.InnerText;
                subNode = node.SelectSingleNode("NewFrameRateUsedToCalculateTimeCodes");
                if (subNode != null)
                    language.Main.NewFrameRateUsedToCalculateTimeCodes = subNode.InnerText;
                subNode = node.SelectSingleNode("NewFrameRateUsedToCalculateFrameNumbers");
                if (subNode != null)
                    language.Main.NewFrameRateUsedToCalculateFrameNumbers = subNode.InnerText;
                subNode = node.SelectSingleNode("FindContinue");
                if (subNode != null)
                    language.Main.FindContinue = subNode.InnerText;
                subNode = node.SelectSingleNode("FindContinueTitle");
                if (subNode != null)
                    language.Main.FindContinueTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceContinueNotFound");
                if (subNode != null)
                    language.Main.ReplaceContinueNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceXContinue");
                if (subNode != null)
                    language.Main.ReplaceXContinue = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceContinueTitle");
                if (subNode != null)
                    language.Main.ReplaceContinueTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("SearchingForXFromLineY");
                if (subNode != null)
                    language.Main.SearchingForXFromLineY = subNode.InnerText;
                subNode = node.SelectSingleNode("XFoundAtLineNumberY");
                if (subNode != null)
                    language.Main.XFoundAtLineNumberY = subNode.InnerText;
                subNode = node.SelectSingleNode("XNotFound");
                if (subNode != null)
                    language.Main.XNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeReplace");
                if (subNode != null)
                    language.Main.BeforeReplace = subNode.InnerText;
                subNode = node.SelectSingleNode("MatchFoundX");
                if (subNode != null)
                    language.Main.MatchFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("NoMatchFoundX");
                if (subNode != null)
                    language.Main.NoMatchFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("FoundNothingToReplace");
                if (subNode != null)
                    language.Main.FoundNothingToReplace = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceCountX");
                if (subNode != null)
                    language.Main.ReplaceCountX = subNode.InnerText;
                subNode = node.SelectSingleNode("NoXFoundAtLineY");
                if (subNode != null)
                    language.Main.NoXFoundAtLineY = subNode.InnerText;
                subNode = node.SelectSingleNode("OneReplacementMade");
                if (subNode != null)
                    language.Main.OneReplacementMade = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeChangesMadeInSourceView");
                if (subNode != null)
                    language.Main.BeforeChangesMadeInSourceView = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToParseSourceView");
                if (subNode != null)
                    language.Main.UnableToParseSourceView = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToLineNumberX");
                if (subNode != null)
                    language.Main.GoToLineNumberX = subNode.InnerText;
                subNode = node.SelectSingleNode("CreateAdjustChangesApplied");
                if (subNode != null)
                    language.Main.CreateAdjustChangesApplied = subNode.InnerText;
                subNode = node.SelectSingleNode("SelectedLines");
                if (subNode != null)
                    language.Main.SelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeDisplayTimeAdjustment");
                if (subNode != null)
                    language.Main.BeforeDisplayTimeAdjustment = subNode.InnerText;
                subNode = node.SelectSingleNode("DisplayTimeAdjustedX");
                if (subNode != null)
                    language.Main.DisplayTimeAdjustedX = subNode.InnerText;
                subNode = node.SelectSingleNode("DisplayTimesAdjustedX");
                if (subNode != null)
                    language.Main.DisplayTimesAdjustedX = subNode.InnerText;
                subNode = node.SelectSingleNode("StarTimeAdjustedX");
                if (subNode != null)
                    language.Main.StarTimeAdjustedX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeCommonErrorFixes");
                if (subNode != null)
                    language.Main.BeforeCommonErrorFixes = subNode.InnerText;
                subNode = node.SelectSingleNode("CommonErrorsFixedInSelectedLines");
                if (subNode != null)
                    language.Main.CommonErrorsFixedInSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("CommonErrorsFixed");
                if (subNode != null)
                    language.Main.CommonErrorsFixed = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeRenumbering");
                if (subNode != null)
                    language.Main.BeforeRenumbering = subNode.InnerText;
                subNode = node.SelectSingleNode("RenumberedStartingFromX");
                if (subNode != null)
                    language.Main.RenumberedStartingFromX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeRemovalOfTextingForHearingImpaired");
                if (subNode != null)
                    language.Main.BeforeRemovalOfTextingForHearingImpaired = subNode.InnerText;
                subNode = node.SelectSingleNode("TextingForHearingImpairedRemovedOneLine");
                if (subNode != null)
                    language.Main.TextingForHearingImpairedRemovedOneLine = subNode.InnerText;
                subNode = node.SelectSingleNode("TextingForHearingImpairedRemovedXLines");
                if (subNode != null)
                    language.Main.TextingForHearingImpairedRemovedXLines = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleSplitted");
                if (subNode != null)
                    language.Main.SubtitleSplitted = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleAppendPrompt");
                if (subNode != null)
                    language.Main.SubtitleAppendPrompt = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleAppendPromptTitle");
                if (subNode != null)
                    language.Main.SubtitleAppendPromptTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenSubtitleToAppend");
                if (subNode != null)
                    language.Main.OpenSubtitleToAppend = subNode.InnerText;
                subNode = node.SelectSingleNode("AppendViaVisualSyncTitle");
                if (subNode != null)
                    language.Main.AppendViaVisualSyncTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("AppendSynchronizedSubtitlePrompt");
                if (subNode != null)
                    language.Main.AppendSynchronizedSubtitlePrompt = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeAppend");
                if (subNode != null)
                    language.Main.BeforeAppend = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleAppendedX");
                if (subNode != null)
                    language.Main.SubtitleAppendedX = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleNotAppended");
                if (subNode != null)
                    language.Main.SubtitleNotAppended = subNode.InnerText;
                subNode = node.SelectSingleNode("GoogleTranslate");
                if (subNode != null)
                    language.Main.GoogleTranslate = subNode.InnerText;
                subNode = node.SelectSingleNode("MicrosoftTranslate");
                if (subNode != null)
                    language.Main.MicrosoftTranslate = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeGoogleTranslation");
                if (subNode != null)
                    language.Main.BeforeGoogleTranslation = subNode.InnerText;
                subNode = node.SelectSingleNode("SelectedLinesTranslated");
                if (subNode != null)
                    language.Main.SelectedLinesTranslated = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleTranslated");
                if (subNode != null)
                    language.Main.SubtitleTranslated = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslateSwedishToDanish");
                if (subNode != null)
                    language.Main.TranslateSwedishToDanish = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslateSwedishToDanishWarning");
                if (subNode != null)
                    language.Main.TranslateSwedishToDanishWarning = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslatingViaNikseDkMt");
                if (subNode != null)
                    language.Main.TranslatingViaNikseDkMt = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSwedishToDanishTranslation");
                if (subNode != null)
                    language.Main.BeforeSwedishToDanishTranslation = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslationFromSwedishToDanishComplete");
                if (subNode != null)
                    language.Main.TranslationFromSwedishToDanishComplete = subNode.InnerText;
                subNode = node.SelectSingleNode("TranslationFromSwedishToDanishFailed");
                if (subNode != null)
                    language.Main.TranslationFromSwedishToDanishFailed = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeUndo");
                if (subNode != null)
                    language.Main.BeforeUndo = subNode.InnerText;
                subNode = node.SelectSingleNode("UndoPerformed");
                if (subNode != null)
                    language.Main.UndoPerformed = subNode.InnerText;
                subNode = node.SelectSingleNode("RedoPerformed");
                if (subNode != null)
                    language.Main.RedoPerformed = subNode.InnerText;
                subNode = node.SelectSingleNode("NothingToUndo");
                if (subNode != null)
                    language.Main.NothingToUndo = subNode.InnerText;
                subNode = node.SelectSingleNode("InvalidLanguageNameX");
                if (subNode != null)
                    language.Main.InvalidLanguageNameX = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToChangeLanguage");
                if (subNode != null)
                    language.Main.UnableToChangeLanguage = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfCorrectedWords");
                if (subNode != null)
                    language.Main.NumberOfCorrectedWords = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfSkippedWords");
                if (subNode != null)
                    language.Main.NumberOfSkippedWords = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfCorrectWords");
                if (subNode != null)
                    language.Main.NumberOfCorrectWords = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfWordsAddedToDictionary");
                if (subNode != null)
                    language.Main.NumberOfWordsAddedToDictionary = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfNameHits");
                if (subNode != null)
                    language.Main.NumberOfNameHits = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheck");
                if (subNode != null)
                    language.Main.SpellCheck = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSpellCheck");
                if (subNode != null)
                    language.Main.BeforeSpellCheck = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheckChangedXToY");
                if (subNode != null)
                    language.Main.SpellCheckChangedXToY = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeAddingTagX");
                if (subNode != null)
                    language.Main.BeforeAddingTagX = subNode.InnerText;
                subNode = node.SelectSingleNode("TagXAdded");
                if (subNode != null)
                    language.Main.TagXAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("LineXOfY");
                if (subNode != null)
                    language.Main.LineXOfY = subNode.InnerText;
                subNode = node.SelectSingleNode("XLinesSavedAsY");
                if (subNode != null)
                    language.Main.XLinesSavedAsY = subNode.InnerText;
                subNode = node.SelectSingleNode("XLinesDeleted");
                if (subNode != null)
                    language.Main.XLinesDeleted = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeDeletingXLines");
                if (subNode != null)
                    language.Main.BeforeDeletingXLines = subNode.InnerText;
                subNode = node.SelectSingleNode("DeleteXLinesPrompt");
                if (subNode != null)
                    language.Main.DeleteXLinesPrompt = subNode.InnerText;
                subNode = node.SelectSingleNode("OneLineDeleted");
                if (subNode != null)
                    language.Main.OneLineDeleted = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeDeletingOneLine");
                if (subNode != null)
                    language.Main.BeforeDeletingOneLine = subNode.InnerText;
                subNode = node.SelectSingleNode("DeleteOneLinePrompt");
                if (subNode != null)
                    language.Main.DeleteOneLinePrompt = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeInsertLine");
                if (subNode != null)
                    language.Main.BeforeInsertLine = subNode.InnerText;
                subNode = node.SelectSingleNode("LineInserted");
                if (subNode != null)
                    language.Main.LineInserted = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeLineUpdatedInListView");
                if (subNode != null)
                    language.Main.BeforeLineUpdatedInListView = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSettingFontToNormal");
                if (subNode != null)
                    language.Main.BeforeSettingFontToNormal = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSplitLine");
                if (subNode != null)
                    language.Main.BeforeSplitLine = subNode.InnerText;
                subNode = node.SelectSingleNode("LineSplitted");
                if (subNode != null)
                    language.Main.LineSplitted = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeMergeLines");
                if (subNode != null)
                    language.Main.BeforeMergeLines = subNode.InnerText;
                subNode = node.SelectSingleNode("LinesMerged");
                if (subNode != null)
                    language.Main.LinesMerged = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSettingColor");
                if (subNode != null)
                    language.Main.BeforeSettingColor = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSettingFontName");
                if (subNode != null)
                    language.Main.BeforeSettingFontName = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeTypeWriterEffect");
                if (subNode != null)
                    language.Main.BeforeTypeWriterEffect = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeKaraokeEffect");
                if (subNode != null)
                    language.Main.BeforeKaraokeEffect = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeImportingDvdSubtitle");
                if (subNode != null)
                    language.Main.BeforeImportingDvdSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenMatroskaFile");
                if (subNode != null)
                    language.Main.OpenMatroskaFile = subNode.InnerText;
                subNode = node.SelectSingleNode("MatroskaFiles");
                if (subNode != null)
                    language.Main.MatroskaFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("NoSubtitlesFound");
                if (subNode != null)
                    language.Main.NoSubtitlesFound = subNode.InnerText;
                subNode = node.SelectSingleNode("NotAValidMatroskaFileX");
                if (subNode != null)
                    language.Main.NotAValidMatroskaFileX = subNode.InnerText;
                subNode = node.SelectSingleNode("ParsingMatroskaFile");
                if (subNode != null)
                    language.Main.ParsingMatroskaFile = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeImportFromMatroskaFile");
                if (subNode != null)
                    language.Main.BeforeImportFromMatroskaFile = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleImportedFromMatroskaFile");
                if (subNode != null)
                    language.Main.SubtitleImportedFromMatroskaFile = subNode.InnerText;
                subNode = node.SelectSingleNode("DropFileXNotAccepted");
                if (subNode != null)
                    language.Main.DropFileXNotAccepted = subNode.InnerText;
                subNode = node.SelectSingleNode("DropOnlyOneFile");
                if (subNode != null)
                    language.Main.DropOnlyOneFile = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeCreateAdjustLines");
                if (subNode != null)
                    language.Main.BeforeCreateAdjustLines = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenAnsiSubtitle");
                if (subNode != null)
                    language.Main.OpenAnsiSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeChangeCasing");
                if (subNode != null)
                    language.Main.BeforeChangeCasing = subNode.InnerText;
                subNode = node.SelectSingleNode("CasingCompleteMessageNoNames");
                if (subNode != null)
                    language.Main.CasingCompleteMessageNoNames = subNode.InnerText;
                subNode = node.SelectSingleNode("CasingCompleteMessageOnlyNames");
                if (subNode != null)
                    language.Main.CasingCompleteMessageOnlyNames = subNode.InnerText;
                subNode = node.SelectSingleNode("CasingCompleteMessage");
                if (subNode != null)
                    language.Main.CasingCompleteMessage = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeChangeFrameRate");
                if (subNode != null)
                    language.Main.BeforeChangeFrameRate = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeAdjustSpeedInPercent");
                if (subNode != null)
                    language.Main.BeforeAdjustSpeedInPercent = subNode.InnerText;
                subNode = node.SelectSingleNode("FrameRateChangedFromXToY");
                if (subNode != null)
                    language.Main.FrameRateChangedFromXToY = subNode.InnerText;
                subNode = node.SelectSingleNode("IdxFileNotFoundWarning");
                if (subNode != null)
                    language.Main.IdxFileNotFoundWarning = subNode.InnerText;
                subNode = node.SelectSingleNode("InvalidVobSubHeader");
                if (subNode != null)
                    language.Main.InvalidVobSubHeader = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenVobSubFile");
                if (subNode != null)
                    language.Main.OpenVobSubFile = subNode.InnerText;
                subNode = node.SelectSingleNode("VobSubFiles");
                if (subNode != null)
                    language.Main.VobSubFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenBluRaySupFile");
                if (subNode != null)
                    language.Main.OpenBluRaySupFile = subNode.InnerText;
                subNode = node.SelectSingleNode("BluRaySupFiles");
                if (subNode != null)
                    language.Main.BluRaySupFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenXSubFiles");
                if (subNode != null)
                    language.Main.OpenXSubFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("XSubFiles");
                if (subNode != null)
                    language.Main.XSubFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeImportingVobSubFile");
                if (subNode != null)
                    language.Main.BeforeImportingVobSubFile = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeImportingBluRaySupFile");
                if (subNode != null)
                    language.Main.BeforeImportingBluRaySupFile = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeImportingBdnXml");
                if (subNode != null)
                    language.Main.BeforeImportingBdnXml = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeShowSelectedLinesEarlierLater");
                if (subNode != null)
                    language.Main.BeforeShowSelectedLinesEarlierLater = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowAllLinesXSecondsLinesEarlier");
                if (subNode != null)
                    language.Main.ShowAllLinesXSecondsLinesEarlier = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowAllLinesXSecondsLinesLater");
                if (subNode != null)
                    language.Main.ShowAllLinesXSecondsLinesLater = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowSelectedLinesXSecondsLinesEarlier");
                if (subNode != null)
                    language.Main.ShowSelectedLinesXSecondsLinesEarlier = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowSelectedLinesXSecondsLinesLater");
                if (subNode != null)
                    language.Main.ShowSelectedLinesXSecondsLinesLater = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowSelectionAndForwardXSecondsLinesEarlier");
                if (subNode != null)
                    language.Main.ShowSelectionAndForwardXSecondsLinesEarlier = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowSelectionAndForwardXSecondsLinesLater");
                if (subNode != null)
                    language.Main.ShowSelectionAndForwardXSecondsLinesLater = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowSelectedLinesEarlierLaterPerformed");
                if (subNode != null)
                    language.Main.ShowSelectedLinesEarlierLaterPerformed = subNode.InnerText;
                subNode = node.SelectSingleNode("DoubleWordsViaRegEx");
                if (subNode != null)
                    language.Main.DoubleWordsViaRegEx = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSortX");
                if (subNode != null)
                    language.Main.BeforeSortX = subNode.InnerText;
                subNode = node.SelectSingleNode("SortedByX");
                if (subNode != null)
                    language.Main.SortedByX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeAutoBalanceSelectedLines");
                if (subNode != null)
                    language.Main.BeforeAutoBalanceSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfLinesAutoBalancedX");
                if (subNode != null)
                    language.Main.NumberOfLinesAutoBalancedX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeRemoveLineBreaksInSelectedLines");
                if (subNode != null)
                    language.Main.BeforeRemoveLineBreaksInSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfWithRemovedLineBreakX");
                if (subNode != null)
                    language.Main.NumberOfWithRemovedLineBreakX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeMultipleReplace");
                if (subNode != null)
                    language.Main.BeforeMultipleReplace = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfLinesReplacedX");
                if (subNode != null)
                    language.Main.NumberOfLinesReplacedX = subNode.InnerText;
                subNode = node.SelectSingleNode("NameXAddedToNamesEtcList");
                if (subNode != null)
                    language.Main.NameXAddedToNamesEtcList = subNode.InnerText;
                subNode = node.SelectSingleNode("NameXNotAddedToNamesEtcList");
                if (subNode != null)
                    language.Main.NameXNotAddedToNamesEtcList = subNode.InnerText;
                subNode = node.SelectSingleNode("WordXAddedToUserDic");
                if (subNode != null)
                    language.Main.WordXAddedToUserDic = subNode.InnerText;
                subNode = node.SelectSingleNode("WordXNotAddedToUserDic");
                if (subNode != null)
                    language.Main.WordXNotAddedToUserDic = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrReplacePairXAdded");
                if (subNode != null)
                    language.Main.OcrReplacePairXAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrReplacePairXNotAdded");
                if (subNode != null)
                    language.Main.OcrReplacePairXNotAdded = subNode.InnerText;
                subNode = node.SelectSingleNode("XLinesSelected");
                if (subNode != null)
                    language.Main.XLinesSelected = subNode.InnerText;
                subNode = node.SelectSingleNode("UnicodeMusicSymbolsAnsiWarning");
                if (subNode != null)
                    language.Main.UnicodeMusicSymbolsAnsiWarning = subNode.InnerText;
                subNode = node.SelectSingleNode("UnicodeCharactersAnsiWarning");
                if (subNode != null)
                    language.Main.UnicodeCharactersAnsiWarning = subNode.InnerText;
                subNode = node.SelectSingleNode("NegativeTimeWarning");
                if (subNode != null)
                    language.Main.NegativeTimeWarning = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeMergeShortLines");
                if (subNode != null)
                    language.Main.BeforeMergeShortLines = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSplitLongLines");
                if (subNode != null)
                    language.Main.BeforeSplitLongLines = subNode.InnerText;
                subNode = node.SelectSingleNode("MergedShortLinesX");
                if (subNode != null)
                    language.Main.MergedShortLinesX = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSetMinimumDisplayTimeBetweenParagraphs");
                if (subNode != null)
                    language.Main.BeforeSetMinimumDisplayTimeBetweenParagraphs = subNode.InnerText;
                subNode = node.SelectSingleNode("XMinimumDisplayTimeBetweenParagraphsChanged");
                if (subNode != null)
                    language.Main.XMinimumDisplayTimeBetweenParagraphsChanged = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeImportText");
                if (subNode != null)
                    language.Main.BeforeImportText = subNode.InnerText;
                subNode = node.SelectSingleNode("TextImported");
                if (subNode != null)
                    language.Main.TextImported = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforePointSynchronization");
                if (subNode != null)
                    language.Main.BeforePointSynchronization = subNode.InnerText;
                subNode = node.SelectSingleNode("PointSynchronizationDone");
                if (subNode != null)
                    language.Main.PointSynchronizationDone = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeTimeCodeImport");
                if (subNode != null)
                    language.Main.BeforeTimeCodeImport = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeImportedFromXY");
                if (subNode != null)
                    language.Main.TimeCodeImportedFromXY = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeInsertSubtitleAtVideoPosition");
                if (subNode != null)
                    language.Main.BeforeInsertSubtitleAtVideoPosition = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSetStartTimeAndOffsetTheRest");
                if (subNode != null)
                    language.Main.BeforeSetStartTimeAndOffsetTheRest = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSetEndTimeAndOffsetTheRest");
                if (subNode != null)
                    language.Main.BeforeSetEndTimeAndOffsetTheRest = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeSetEndAndVideoPosition");
                if (subNode != null)
                    language.Main.BeforeSetEndAndVideoPosition = subNode.InnerText;
                subNode = node.SelectSingleNode("ContinueWithCurrentSpellCheck");
                if (subNode != null)
                    language.Main.ContinueWithCurrentSpellCheck = subNode.InnerText;
                subNode = node.SelectSingleNode("CharactersPerSecond");
                if (subNode != null)
                    language.Main.CharactersPerSecond = subNode.InnerText;
                subNode = node.SelectSingleNode("GetFrameRateFromVideoFile");
                if (subNode != null)
                    language.Main.GetFrameRateFromVideoFile = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkMessage");
                if (subNode != null)
                    language.Main.NetworkMessage = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkUpdate");
                if (subNode != null)
                    language.Main.NetworkUpdate = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkInsert");
                if (subNode != null)
                    language.Main.NetworkInsert = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkDelete");
                if (subNode != null)
                    language.Main.NetworkDelete = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkNewUser");
                if (subNode != null)
                    language.Main.NetworkNewUser = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkByeUser");
                if (subNode != null)
                    language.Main.NetworkByeUser = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkUnableToConnectToServer");
                if (subNode != null)
                    language.Main.NetworkUnableToConnectToServer = subNode.InnerText;
                subNode = node.SelectSingleNode("UserAndAction");
                if (subNode != null)
                    language.Main.UserAndAction = subNode.InnerText;
                subNode = node.SelectSingleNode("NetworkMode");
                if (subNode != null)
                    language.Main.NetworkMode = subNode.InnerText;
                subNode = node.SelectSingleNode("XStartedSessionYAtZ");
                if (subNode != null)
                    language.Main.XStartedSessionYAtZ = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellChekingViaWordXLineYOfX");
                if (subNode != null)
                    language.Main.SpellChekingViaWordXLineYOfX = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToStartWord");
                if (subNode != null)
                    language.Main.UnableToStartWord = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheckAbortedXCorrections");
                if (subNode != null)
                    language.Main.SpellCheckAbortedXCorrections = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheckCompletedXCorrections");
                if (subNode != null)
                    language.Main.SpellCheckCompletedXCorrections = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenOtherSubtitle");
                if (subNode != null)
                    language.Main.OpenOtherSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeToggleDialogueDashes");
                if (subNode != null)
                    language.Main.BeforeToggleDialogueDashes = subNode.InnerText;
                subNode = node.SelectSingleNode("ExportPlainTextAs");
                if (subNode != null)
                    language.Main.ExportPlainTextAs = subNode.InnerText;
                subNode = node.SelectSingleNode("TextFiles");
                if (subNode != null)
                    language.Main.TextFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleExported");
                if (subNode != null)
                    language.Main.SubtitleExported = subNode.InnerText;
                subNode = node.SelectSingleNode("LineNumberXErrorReadingFromSourceLineY");
                if (subNode != null)
                    language.Main.LineNumberXErrorReadingFromSourceLineY = subNode.InnerText;
                subNode = node.SelectSingleNode("LineNumberXErrorReadingTimeCodeFromSourceLineY");
                if (subNode != null)
                    language.Main.LineNumberXErrorReadingTimeCodeFromSourceLineY = subNode.InnerText;
                subNode = node.SelectSingleNode("LineNumberXExpectedNumberFromSourceLineY");
                if (subNode != null)
                    language.Main.LineNumberXExpectedNumberFromSourceLineY = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeGuessingTimeCodes");
                if (subNode != null)
                    language.Main.BeforeGuessingTimeCodes = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeAutoDuration");
                if (subNode != null)
                    language.Main.BeforeAutoDuration = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeColumnPaste");
                if (subNode != null)
                    language.Main.BeforeColumnPaste = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeColumnDelete");
                if (subNode != null)
                    language.Main.BeforeColumnDelete = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeColumnImportText");
                if (subNode != null)
                    language.Main.BeforeColumnImportText = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeColumnShiftCellsDown");
                if (subNode != null)
                    language.Main.BeforeColumnShiftCellsDown = subNode.InnerText;
                subNode = node.SelectSingleNode("ErrorLoadingPluginXErrorY");
                if (subNode != null)
                    language.Main.ErrorLoadingPluginXErrorY = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeRunningPluginXVersionY");
                if (subNode != null)
                    language.Main.BeforeRunningPluginXVersionY = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToReadPluginResult");
                if (subNode != null)
                    language.Main.UnableToReadPluginResult = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToCreateBackupDirectory");
                if (subNode != null)
                    language.Main.UnableToCreateBackupDirectory = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeDisplaySubtitleJoin");
                if (subNode != null)
                    language.Main.BeforeDisplaySubtitleJoin = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitlesJoined");
                if (subNode != null)
                    language.Main.SubtitlesJoined = subNode.InnerText;
                subNode = node.SelectSingleNode("StatusLog");
                if (subNode != null)
                    language.Main.StatusLog = subNode.InnerText;
                subNode = node.SelectSingleNode("XSceneChangesImported");
                if (subNode != null)
                    language.Main.XSceneChangesImported = subNode.InnerText;
                subNode = node.SelectSingleNode("PluginXExecuted");
                if (subNode != null)
                    language.Main.PluginXExecuted = subNode.InnerText;
                subNode = node.SelectSingleNode("NotAValidXSubFile");
                if (subNode != null)
                    language.Main.NotAValidXSubFile = subNode.InnerText;
                subNode = node.SelectSingleNode("BeforeMergeLinesWithSameText");
                if (subNode != null)
                    language.Main.BeforeMergeLinesWithSameText = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportTimeCodesDifferentNumberOfLinesWarning");
                if (subNode != null)
                    language.Main.ImportTimeCodesDifferentNumberOfLinesWarning = subNode.InnerText;
                subNode = node.SelectSingleNode("ParsingTransportStream");
                if (subNode != null)
                    language.Main.ParsingTransportStream = subNode.InnerText;
                subNode = node.SelectSingleNode("ErrorLoadIdx");
                if (subNode != null)
                    language.Main.ErrorLoadIdx = subNode.InnerText;
                subNode = node.SelectSingleNode("ErrorLoadRar");
                if (subNode != null)
                    language.Main.ErrorLoadRar = subNode.InnerText;
                subNode = node.SelectSingleNode("ErrorLoadZip");
                if (subNode != null)
                    language.Main.ErrorLoadZip = subNode.InnerText;

                language.Main.Menu = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu();
                node = doc.DocumentElement.SelectSingleNode("Main/Menu");
                if (node != null)
                {

                    language.Main.Menu.File = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.FileMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/File");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.File.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("New");
                        if (subNode != null)
                            language.Main.Menu.File.New = subNode.InnerText;
                        subNode = node.SelectSingleNode("Open");
                        if (subNode != null)
                            language.Main.Menu.File.Open = subNode.InnerText;
                        subNode = node.SelectSingleNode("OpenKeepVideo");
                        if (subNode != null)
                            language.Main.Menu.File.OpenKeepVideo = subNode.InnerText;
                        subNode = node.SelectSingleNode("Reopen");
                        if (subNode != null)
                            language.Main.Menu.File.Reopen = subNode.InnerText;
                        subNode = node.SelectSingleNode("Save");
                        if (subNode != null)
                            language.Main.Menu.File.Save = subNode.InnerText;
                        subNode = node.SelectSingleNode("SaveAs");
                        if (subNode != null)
                            language.Main.Menu.File.SaveAs = subNode.InnerText;
                        subNode = node.SelectSingleNode("RestoreAutoBackup");
                        if (subNode != null)
                            language.Main.Menu.File.RestoreAutoBackup = subNode.InnerText;
                        subNode = node.SelectSingleNode("AdvancedSubStationAlphaProperties");
                        if (subNode != null)
                            language.Main.Menu.File.AdvancedSubStationAlphaProperties = subNode.InnerText;
                        subNode = node.SelectSingleNode("SubStationAlphaProperties");
                        if (subNode != null)
                            language.Main.Menu.File.SubStationAlphaProperties = subNode.InnerText;
                        subNode = node.SelectSingleNode("OpenOriginal");
                        if (subNode != null)
                            language.Main.Menu.File.OpenOriginal = subNode.InnerText;
                        subNode = node.SelectSingleNode("SaveOriginal");
                        if (subNode != null)
                            language.Main.Menu.File.SaveOriginal = subNode.InnerText;
                        subNode = node.SelectSingleNode("CloseOriginal");
                        if (subNode != null)
                            language.Main.Menu.File.CloseOriginal = subNode.InnerText;
                        subNode = node.SelectSingleNode("OpenContainingFolder");
                        if (subNode != null)
                            language.Main.Menu.File.OpenContainingFolder = subNode.InnerText;
                        subNode = node.SelectSingleNode("Compare");
                        if (subNode != null)
                            language.Main.Menu.File.Compare = subNode.InnerText;
                        subNode = node.SelectSingleNode("Statistics");
                        if (subNode != null)
                            language.Main.Menu.File.Statistics = subNode.InnerText;
                        subNode = node.SelectSingleNode("Plugins");
                        if (subNode != null)
                            language.Main.Menu.File.Plugins = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportOcrFromDvd");
                        if (subNode != null)
                            language.Main.Menu.File.ImportOcrFromDvd = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportOcrVobSubSubtitle");
                        if (subNode != null)
                            language.Main.Menu.File.ImportOcrVobSubSubtitle = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportBluRaySupFile");
                        if (subNode != null)
                            language.Main.Menu.File.ImportBluRaySupFile = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportXSub");
                        if (subNode != null)
                            language.Main.Menu.File.ImportXSub = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportSubtitleFromMatroskaFile");
                        if (subNode != null)
                            language.Main.Menu.File.ImportSubtitleFromMatroskaFile = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportSubtitleWithManualChosenEncoding");
                        if (subNode != null)
                            language.Main.Menu.File.ImportSubtitleWithManualChosenEncoding = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportText");
                        if (subNode != null)
                            language.Main.Menu.File.ImportText = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportImages");
                        if (subNode != null)
                            language.Main.Menu.File.ImportImages = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportTimecodes");
                        if (subNode != null)
                            language.Main.Menu.File.ImportTimecodes = subNode.InnerText;
                        subNode = node.SelectSingleNode("Export");
                        if (subNode != null)
                            language.Main.Menu.File.Export = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportBdnXml");
                        if (subNode != null)
                            language.Main.Menu.File.ExportBdnXml = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportBluRaySup");
                        if (subNode != null)
                            language.Main.Menu.File.ExportBluRaySup = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportVobSub");
                        if (subNode != null)
                            language.Main.Menu.File.ExportVobSub = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportCavena890");
                        if (subNode != null)
                            language.Main.Menu.File.ExportCavena890 = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportEbu");
                        if (subNode != null)
                            language.Main.Menu.File.ExportEbu = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportPac");
                        if (subNode != null)
                            language.Main.Menu.File.ExportPac = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportPlainText");
                        if (subNode != null)
                            language.Main.Menu.File.ExportPlainText = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportAdobeEncoreFabImageScript");
                        if (subNode != null)
                            language.Main.Menu.File.ExportAdobeEncoreFabImageScript = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportKoreanAtsFilePair");
                        if (subNode != null)
                            language.Main.Menu.File.ExportKoreanAtsFilePair = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportAvidStl");
                        if (subNode != null)
                            language.Main.Menu.File.ExportAvidStl = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportDvdStudioProStl");
                        if (subNode != null)
                            language.Main.Menu.File.ExportDvdStudioProStl = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportCapMakerPlus");
                        if (subNode != null)
                            language.Main.Menu.File.ExportCapMakerPlus = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportCaptionsInc");
                        if (subNode != null)
                            language.Main.Menu.File.ExportCaptionsInc = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportCheetahCap");
                        if (subNode != null)
                            language.Main.Menu.File.ExportCheetahCap = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportUltech130");
                        if (subNode != null)
                            language.Main.Menu.File.ExportUltech130 = subNode.InnerText;
                        subNode = node.SelectSingleNode("ExportCustomTextFormat");
                        if (subNode != null)
                            language.Main.Menu.File.ExportCustomTextFormat = subNode.InnerText;
                        subNode = node.SelectSingleNode("Exit");
                        if (subNode != null)
                            language.Main.Menu.File.Exit = subNode.InnerText;

                    }

                    language.Main.Menu.Edit = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.EditMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Edit");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Edit.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("Undo");
                        if (subNode != null)
                            language.Main.Menu.Edit.Undo = subNode.InnerText;
                        subNode = node.SelectSingleNode("Redo");
                        if (subNode != null)
                            language.Main.Menu.Edit.Redo = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowUndoHistory");
                        if (subNode != null)
                            language.Main.Menu.Edit.ShowUndoHistory = subNode.InnerText;
                        subNode = node.SelectSingleNode("InsertUnicodeSymbol");
                        if (subNode != null)
                            language.Main.Menu.Edit.InsertUnicodeSymbol = subNode.InnerText;
                        subNode = node.SelectSingleNode("Find");
                        if (subNode != null)
                            language.Main.Menu.Edit.Find = subNode.InnerText;
                        subNode = node.SelectSingleNode("FindNext");
                        if (subNode != null)
                            language.Main.Menu.Edit.FindNext = subNode.InnerText;
                        subNode = node.SelectSingleNode("Replace");
                        if (subNode != null)
                            language.Main.Menu.Edit.Replace = subNode.InnerText;
                        subNode = node.SelectSingleNode("MultipleReplace");
                        if (subNode != null)
                            language.Main.Menu.Edit.MultipleReplace = subNode.InnerText;
                        subNode = node.SelectSingleNode("GoToSubtitleNumber");
                        if (subNode != null)
                            language.Main.Menu.Edit.GoToSubtitleNumber = subNode.InnerText;
                        subNode = node.SelectSingleNode("RightToLeftMode");
                        if (subNode != null)
                            language.Main.Menu.Edit.RightToLeftMode = subNode.InnerText;
                        subNode = node.SelectSingleNode("FixTrlViaUnicodeControlCharacters");
                        if (subNode != null)
                            language.Main.Menu.Edit.FixTrlViaUnicodeControlCharacters = subNode.InnerText;
                        subNode = node.SelectSingleNode("ReverseRightToLeftStartEnd");
                        if (subNode != null)
                            language.Main.Menu.Edit.ReverseRightToLeftStartEnd = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowOriginalTextInAudioAndVideoPreview");
                        if (subNode != null)
                            language.Main.Menu.Edit.ShowOriginalTextInAudioAndVideoPreview = subNode.InnerText;
                        subNode = node.SelectSingleNode("ModifySelection");
                        if (subNode != null)
                            language.Main.Menu.Edit.ModifySelection = subNode.InnerText;
                        subNode = node.SelectSingleNode("InverseSelection");
                        if (subNode != null)
                            language.Main.Menu.Edit.InverseSelection = subNode.InnerText;

                    }

                    language.Main.Menu.Tools = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.ToolsMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Tools");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Tools.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("AdjustDisplayDuration");
                        if (subNode != null)
                            language.Main.Menu.Tools.AdjustDisplayDuration = subNode.InnerText;
                        subNode = node.SelectSingleNode("ApplyDurationLimits");
                        if (subNode != null)
                            language.Main.Menu.Tools.ApplyDurationLimits = subNode.InnerText;
                        subNode = node.SelectSingleNode("DurationsBridgeGap");
                        if (subNode != null)
                            language.Main.Menu.Tools.DurationsBridgeGap = subNode.InnerText;
                        subNode = node.SelectSingleNode("FixCommonErrors");
                        if (subNode != null)
                            language.Main.Menu.Tools.FixCommonErrors = subNode.InnerText;
                        subNode = node.SelectSingleNode("StartNumberingFrom");
                        if (subNode != null)
                            language.Main.Menu.Tools.StartNumberingFrom = subNode.InnerText;
                        subNode = node.SelectSingleNode("RemoveTextForHearingImpaired");
                        if (subNode != null)
                            language.Main.Menu.Tools.RemoveTextForHearingImpaired = subNode.InnerText;
                        subNode = node.SelectSingleNode("ChangeCasing");
                        if (subNode != null)
                            language.Main.Menu.Tools.ChangeCasing = subNode.InnerText;
                        subNode = node.SelectSingleNode("ChangeFrameRate");
                        if (subNode != null)
                            language.Main.Menu.Tools.ChangeFrameRate = subNode.InnerText;
                        subNode = node.SelectSingleNode("ChangeSpeedInPercent");
                        if (subNode != null)
                            language.Main.Menu.Tools.ChangeSpeedInPercent = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeShortLines");
                        if (subNode != null)
                            language.Main.Menu.Tools.MergeShortLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeDuplicateText");
                        if (subNode != null)
                            language.Main.Menu.Tools.MergeDuplicateText = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeSameTimeCodes");
                        if (subNode != null)
                            language.Main.Menu.Tools.MergeSameTimeCodes = subNode.InnerText;
                        subNode = node.SelectSingleNode("SplitLongLines");
                        if (subNode != null)
                            language.Main.Menu.Tools.SplitLongLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("MinimumDisplayTimeBetweenParagraphs");
                        if (subNode != null)
                            language.Main.Menu.Tools.MinimumDisplayTimeBetweenParagraphs = subNode.InnerText;
                        subNode = node.SelectSingleNode("SortBy");
                        if (subNode != null)
                            language.Main.Menu.Tools.SortBy = subNode.InnerText;
                        subNode = node.SelectSingleNode("Number");
                        if (subNode != null)
                            language.Main.Menu.Tools.Number = subNode.InnerText;
                        subNode = node.SelectSingleNode("StartTime");
                        if (subNode != null)
                            language.Main.Menu.Tools.StartTime = subNode.InnerText;
                        subNode = node.SelectSingleNode("EndTime");
                        if (subNode != null)
                            language.Main.Menu.Tools.EndTime = subNode.InnerText;
                        subNode = node.SelectSingleNode("Duration");
                        if (subNode != null)
                            language.Main.Menu.Tools.Duration = subNode.InnerText;
                        subNode = node.SelectSingleNode("TextAlphabetically");
                        if (subNode != null)
                            language.Main.Menu.Tools.TextAlphabetically = subNode.InnerText;
                        subNode = node.SelectSingleNode("TextSingleLineMaximumLength");
                        if (subNode != null)
                            language.Main.Menu.Tools.TextSingleLineMaximumLength = subNode.InnerText;
                        subNode = node.SelectSingleNode("TextTotalLength");
                        if (subNode != null)
                            language.Main.Menu.Tools.TextTotalLength = subNode.InnerText;
                        subNode = node.SelectSingleNode("TextNumberOfLines");
                        if (subNode != null)
                            language.Main.Menu.Tools.TextNumberOfLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("TextNumberOfCharactersPerSeconds");
                        if (subNode != null)
                            language.Main.Menu.Tools.TextNumberOfCharactersPerSeconds = subNode.InnerText;
                        subNode = node.SelectSingleNode("WordsPerMinute");
                        if (subNode != null)
                            language.Main.Menu.Tools.WordsPerMinute = subNode.InnerText;
                        subNode = node.SelectSingleNode("Style");
                        if (subNode != null)
                            language.Main.Menu.Tools.Style = subNode.InnerText;
                        subNode = node.SelectSingleNode("Ascending");
                        if (subNode != null)
                            language.Main.Menu.Tools.Ascending = subNode.InnerText;
                        subNode = node.SelectSingleNode("Descending");
                        if (subNode != null)
                            language.Main.Menu.Tools.Descending = subNode.InnerText;
                        subNode = node.SelectSingleNode("MakeNewEmptyTranslationFromCurrentSubtitle");
                        if (subNode != null)
                            language.Main.Menu.Tools.MakeNewEmptyTranslationFromCurrentSubtitle = subNode.InnerText;
                        subNode = node.SelectSingleNode("BatchConvert");
                        if (subNode != null)
                            language.Main.Menu.Tools.BatchConvert = subNode.InnerText;
                        subNode = node.SelectSingleNode("GenerateTimeAsText");
                        if (subNode != null)
                            language.Main.Menu.Tools.GenerateTimeAsText = subNode.InnerText;
                        subNode = node.SelectSingleNode("MeasurementConverter");
                        if (subNode != null)
                            language.Main.Menu.Tools.MeasurementConverter = subNode.InnerText;
                        subNode = node.SelectSingleNode("SplitSubtitle");
                        if (subNode != null)
                            language.Main.Menu.Tools.SplitSubtitle = subNode.InnerText;
                        subNode = node.SelectSingleNode("AppendSubtitle");
                        if (subNode != null)
                            language.Main.Menu.Tools.AppendSubtitle = subNode.InnerText;
                        subNode = node.SelectSingleNode("JoinSubtitles");
                        if (subNode != null)
                            language.Main.Menu.Tools.JoinSubtitles = subNode.InnerText;

                    }

                    language.Main.Menu.Video = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.VideoMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Video");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Video.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("OpenVideo");
                        if (subNode != null)
                            language.Main.Menu.Video.OpenVideo = subNode.InnerText;
                        subNode = node.SelectSingleNode("OpenDvd");
                        if (subNode != null)
                            language.Main.Menu.Video.OpenDvd = subNode.InnerText;
                        subNode = node.SelectSingleNode("ChooseAudioTrack");
                        if (subNode != null)
                            language.Main.Menu.Video.ChooseAudioTrack = subNode.InnerText;
                        subNode = node.SelectSingleNode("CloseVideo");
                        if (subNode != null)
                            language.Main.Menu.Video.CloseVideo = subNode.InnerText;
                        subNode = node.SelectSingleNode("ImportSceneChanges");
                        if (subNode != null)
                            language.Main.Menu.Video.ImportSceneChanges = subNode.InnerText;
                        subNode = node.SelectSingleNode("RemoveSceneChanges");
                        if (subNode != null)
                            language.Main.Menu.Video.RemoveSceneChanges = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowHideVideo");
                        if (subNode != null)
                            language.Main.Menu.Video.ShowHideVideo = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowHideWaveForm");
                        if (subNode != null)
                            language.Main.Menu.Video.ShowHideWaveForm = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowHideWaveformAndSpectrogram");
                        if (subNode != null)
                            language.Main.Menu.Video.ShowHideWaveformAndSpectrogram = subNode.InnerText;
                        subNode = node.SelectSingleNode("UnDockVideoControls");
                        if (subNode != null)
                            language.Main.Menu.Video.UnDockVideoControls = subNode.InnerText;
                        subNode = node.SelectSingleNode("ReDockVideoControls");
                        if (subNode != null)
                            language.Main.Menu.Video.ReDockVideoControls = subNode.InnerText;

                    }

                    language.Main.Menu.SpellCheck = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.SpellCheckMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/SpellCheck");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("SpellCheck");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.SpellCheck = subNode.InnerText;
                        subNode = node.SelectSingleNode("SpellCheckFromCurrentLine");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.SpellCheckFromCurrentLine = subNode.InnerText;
                        subNode = node.SelectSingleNode("FindDoubleWords");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.FindDoubleWords = subNode.InnerText;
                        subNode = node.SelectSingleNode("FindDoubleLines");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.FindDoubleLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("GetDictionaries");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.GetDictionaries = subNode.InnerText;
                        subNode = node.SelectSingleNode("AddToNamesEtcList");
                        if (subNode != null)
                            language.Main.Menu.SpellCheck.AddToNamesEtcList = subNode.InnerText;

                    }

                    language.Main.Menu.Synchronization = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.SynchronizationkMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Synchronization");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Synchronization.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("AdjustAllTimes");
                        if (subNode != null)
                            language.Main.Menu.Synchronization.AdjustAllTimes = subNode.InnerText;
                        subNode = node.SelectSingleNode("VisualSync");
                        if (subNode != null)
                            language.Main.Menu.Synchronization.VisualSync = subNode.InnerText;
                        subNode = node.SelectSingleNode("PointSync");
                        if (subNode != null)
                            language.Main.Menu.Synchronization.PointSync = subNode.InnerText;
                        subNode = node.SelectSingleNode("PointSyncViaOtherSubtitle");
                        if (subNode != null)
                            language.Main.Menu.Synchronization.PointSyncViaOtherSubtitle = subNode.InnerText;

                    }

                    language.Main.Menu.AutoTranslate = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.AutoTranslateMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/AutoTranslate");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.AutoTranslate.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("TranslatePoweredByGoogle");
                        if (subNode != null)
                            language.Main.Menu.AutoTranslate.TranslatePoweredByGoogle = subNode.InnerText;
                        subNode = node.SelectSingleNode("TranslatePoweredByMicrosoft");
                        if (subNode != null)
                            language.Main.Menu.AutoTranslate.TranslatePoweredByMicrosoft = subNode.InnerText;
                        subNode = node.SelectSingleNode("TranslateFromSwedishToDanish");
                        if (subNode != null)
                            language.Main.Menu.AutoTranslate.TranslateFromSwedishToDanish = subNode.InnerText;

                    }

                    language.Main.Menu.Options = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.OptionsMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Options");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Options.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("Settings");
                        if (subNode != null)
                            language.Main.Menu.Options.Settings = subNode.InnerText;
                        subNode = node.SelectSingleNode("ChooseLanguage");
                        if (subNode != null)
                            language.Main.Menu.Options.ChooseLanguage = subNode.InnerText;

                    }

                    language.Main.Menu.Networking = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.NetworkingMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Networking");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Networking.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("StartNewSession");
                        if (subNode != null)
                            language.Main.Menu.Networking.StartNewSession = subNode.InnerText;
                        subNode = node.SelectSingleNode("JoinSession");
                        if (subNode != null)
                            language.Main.Menu.Networking.JoinSession = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowSessionInfoAndLog");
                        if (subNode != null)
                            language.Main.Menu.Networking.ShowSessionInfoAndLog = subNode.InnerText;
                        subNode = node.SelectSingleNode("Chat");
                        if (subNode != null)
                            language.Main.Menu.Networking.Chat = subNode.InnerText;
                        subNode = node.SelectSingleNode("LeaveSession");
                        if (subNode != null)
                            language.Main.Menu.Networking.LeaveSession = subNode.InnerText;

                    }

                    language.Main.Menu.Help = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.HelpMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/Help");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("CheckForUpdates");
                        if (subNode != null)
                            language.Main.Menu.Help.CheckForUpdates = subNode.InnerText;
                        subNode = node.SelectSingleNode("Title");
                        if (subNode != null)
                            language.Main.Menu.Help.Title = subNode.InnerText;
                        subNode = node.SelectSingleNode("Help");
                        if (subNode != null)
                            language.Main.Menu.Help.Help = subNode.InnerText;
                        subNode = node.SelectSingleNode("About");
                        if (subNode != null)
                            language.Main.Menu.Help.About = subNode.InnerText;

                    }

                    language.Main.Menu.ToolBar = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.ToolBarMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/ToolBar");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("New");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.New = subNode.InnerText;
                        subNode = node.SelectSingleNode("Open");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.Open = subNode.InnerText;
                        subNode = node.SelectSingleNode("Save");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.Save = subNode.InnerText;
                        subNode = node.SelectSingleNode("SaveAs");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.SaveAs = subNode.InnerText;
                        subNode = node.SelectSingleNode("Find");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.Find = subNode.InnerText;
                        subNode = node.SelectSingleNode("Replace");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.Replace = subNode.InnerText;
                        subNode = node.SelectSingleNode("FixCommonErrors");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.FixCommonErrors = subNode.InnerText;
                        subNode = node.SelectSingleNode("VisualSync");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.VisualSync = subNode.InnerText;
                        subNode = node.SelectSingleNode("SpellCheck");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.SpellCheck = subNode.InnerText;
                        subNode = node.SelectSingleNode("Settings");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.Settings = subNode.InnerText;
                        subNode = node.SelectSingleNode("Help");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.Help = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowHideWaveForm");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.ShowHideWaveForm = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowHideVideo");
                        if (subNode != null)
                            language.Main.Menu.ToolBar.ShowHideVideo = subNode.InnerText;

                    }

                    language.Main.Menu.ContextMenu = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainMenu.ListViewContextMenu();
                    node = doc.DocumentElement.SelectSingleNode("Main/Menu/ContextMenu");
                    if (node != null)
                    {
                        subNode = node.SelectSingleNode("AdvancedSubStationAlphaSetStyle");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.AdvancedSubStationAlphaSetStyle = subNode.InnerText;
                        subNode = node.SelectSingleNode("SubStationAlphaSetStyle");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.SubStationAlphaSetStyle = subNode.InnerText;
                        subNode = node.SelectSingleNode("SubStationAlphaStyles");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.SubStationAlphaStyles = subNode.InnerText;
                        subNode = node.SelectSingleNode("AdvancedSubStationAlphaStyles");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.AdvancedSubStationAlphaStyles = subNode.InnerText;
                        subNode = node.SelectSingleNode("TimedTextSetStyle");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.TimedTextSetStyle = subNode.InnerText;
                        subNode = node.SelectSingleNode("TimedTextStyles");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.TimedTextStyles = subNode.InnerText;
                        subNode = node.SelectSingleNode("TimedTextSetLanguage");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.TimedTextSetLanguage = subNode.InnerText;
                        subNode = node.SelectSingleNode("SamiSetStyle");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.SamiSetStyle = subNode.InnerText;
                        subNode = node.SelectSingleNode("Cut");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Cut = subNode.InnerText;
                        subNode = node.SelectSingleNode("Copy");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Copy = subNode.InnerText;
                        subNode = node.SelectSingleNode("Paste");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Paste = subNode.InnerText;
                        subNode = node.SelectSingleNode("Delete");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Delete = subNode.InnerText;
                        subNode = node.SelectSingleNode("SplitLineAtCursorPosition");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.SplitLineAtCursorPosition = subNode.InnerText;
                        subNode = node.SelectSingleNode("AutoDurationCurrentLine");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.AutoDurationCurrentLine = subNode.InnerText;
                        subNode = node.SelectSingleNode("SelectAll");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.SelectAll = subNode.InnerText;
                        subNode = node.SelectSingleNode("InsertFirstLine");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.InsertFirstLine = subNode.InnerText;
                        subNode = node.SelectSingleNode("InsertBefore");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.InsertBefore = subNode.InnerText;
                        subNode = node.SelectSingleNode("InsertAfter");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.InsertAfter = subNode.InnerText;
                        subNode = node.SelectSingleNode("InsertSubtitleAfter");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.InsertSubtitleAfter = subNode.InnerText;
                        subNode = node.SelectSingleNode("CopyToClipboard");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.CopyToClipboard = subNode.InnerText;
                        subNode = node.SelectSingleNode("Column");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Column = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnDeleteText");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnDeleteText = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnDeleteTextAndShiftCellsUp");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnDeleteTextAndShiftCellsUp = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnInsertEmptyTextAndShiftCellsDown");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnInsertEmptyTextAndShiftCellsDown = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnInsertTextFromSubtitle");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnInsertTextFromSubtitle = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnImportTextAndShiftCellsDown");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnImportTextAndShiftCellsDown = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnPasteFromClipboard");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnPasteFromClipboard = subNode.InnerText;
                        subNode = node.SelectSingleNode("ColumnCopyOriginalTextToCurrent");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ColumnCopyOriginalTextToCurrent = subNode.InnerText;
                        subNode = node.SelectSingleNode("Split");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Split = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.MergeSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeSelectedLinesASDialogue");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.MergeSelectedLinesASDialogue = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeWithLineBefore");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.MergeWithLineBefore = subNode.InnerText;
                        subNode = node.SelectSingleNode("MergeWithLineAfter");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.MergeWithLineAfter = subNode.InnerText;
                        subNode = node.SelectSingleNode("Normal");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Normal = subNode.InnerText;
                        subNode = node.SelectSingleNode("Underline");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Underline = subNode.InnerText;
                        subNode = node.SelectSingleNode("Color");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Color = subNode.InnerText;
                        subNode = node.SelectSingleNode("FontName");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.FontName = subNode.InnerText;
                        subNode = node.SelectSingleNode("Alignment");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.Alignment = subNode.InnerText;
                        subNode = node.SelectSingleNode("AutoBalanceSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.AutoBalanceSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("RemoveLineBreaksFromSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.RemoveLineBreaksFromSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("TypewriterEffect");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.TypewriterEffect = subNode.InnerText;
                        subNode = node.SelectSingleNode("KaraokeEffect");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.KaraokeEffect = subNode.InnerText;
                        subNode = node.SelectSingleNode("ShowSelectedLinesEarlierLater");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ShowSelectedLinesEarlierLater = subNode.InnerText;
                        subNode = node.SelectSingleNode("VisualSyncSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.VisualSyncSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("GoogleAndMicrosoftTranslateSelectedLine");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.GoogleAndMicrosoftTranslateSelectedLine = subNode.InnerText;
                        subNode = node.SelectSingleNode("GoogleTranslateSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.GoogleTranslateSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("AdjustDisplayDurationForSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.AdjustDisplayDurationForSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("FixCommonErrorsInSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.FixCommonErrorsInSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("ChangeCasingForSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.ChangeCasingForSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("SaveSelectedLines");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.SaveSelectedLines = subNode.InnerText;
                        subNode = node.SelectSingleNode("WebVTTSetNewVoice");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.WebVTTSetNewVoice = subNode.InnerText;
                        subNode = node.SelectSingleNode("WebVTTRemoveVoices");
                        if (subNode != null)
                            language.Main.Menu.ContextMenu.WebVTTRemoveVoices = subNode.InnerText;

                    }

                }

                language.Main.Controls = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainControls();
                node = doc.DocumentElement.SelectSingleNode("Main/Controls");
                if (node != null)
                {
                    subNode = node.SelectSingleNode("SubtitleFormat");
                    if (subNode != null)
                        language.Main.Controls.SubtitleFormat = subNode.InnerText;
                    subNode = node.SelectSingleNode("FileEncoding");
                    if (subNode != null)
                        language.Main.Controls.FileEncoding = subNode.InnerText;
                    subNode = node.SelectSingleNode("ListView");
                    if (subNode != null)
                        language.Main.Controls.ListView = subNode.InnerText;
                    subNode = node.SelectSingleNode("SourceView");
                    if (subNode != null)
                        language.Main.Controls.SourceView = subNode.InnerText;
                    subNode = node.SelectSingleNode("UndoChangesInEditPanel");
                    if (subNode != null)
                        language.Main.Controls.UndoChangesInEditPanel = subNode.InnerText;
                    subNode = node.SelectSingleNode("Previous");
                    if (subNode != null)
                        language.Main.Controls.Previous = subNode.InnerText;
                    subNode = node.SelectSingleNode("Next");
                    if (subNode != null)
                        language.Main.Controls.Next = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoBreak");
                    if (subNode != null)
                        language.Main.Controls.AutoBreak = subNode.InnerText;
                    subNode = node.SelectSingleNode("Unbreak");
                    if (subNode != null)
                        language.Main.Controls.Unbreak = subNode.InnerText;

                }

                language.Main.VideoControls = new Nikse.SubtitleEdit.Logic.LanguageStructure.Main.MainVideoControls();
                node = doc.DocumentElement.SelectSingleNode("Main/VideoControls");
                if (node != null)
                {
                    subNode = node.SelectSingleNode("Translate");
                    if (subNode != null)
                        language.Main.VideoControls.Translate = subNode.InnerText;
                    subNode = node.SelectSingleNode("Create");
                    if (subNode != null)
                        language.Main.VideoControls.Create = subNode.InnerText;
                    subNode = node.SelectSingleNode("Adjust");
                    if (subNode != null)
                        language.Main.VideoControls.Adjust = subNode.InnerText;
                    subNode = node.SelectSingleNode("SelectCurrentElementWhilePlaying");
                    if (subNode != null)
                        language.Main.VideoControls.SelectCurrentElementWhilePlaying = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoRepeat");
                    if (subNode != null)
                        language.Main.VideoControls.AutoRepeat = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoRepeatOn");
                    if (subNode != null)
                        language.Main.VideoControls.AutoRepeatOn = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoRepeatCount");
                    if (subNode != null)
                        language.Main.VideoControls.AutoRepeatCount = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoContinue");
                    if (subNode != null)
                        language.Main.VideoControls.AutoContinue = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoContinueOn");
                    if (subNode != null)
                        language.Main.VideoControls.AutoContinueOn = subNode.InnerText;
                    subNode = node.SelectSingleNode("DelayInSeconds");
                    if (subNode != null)
                        language.Main.VideoControls.DelayInSeconds = subNode.InnerText;
                    subNode = node.SelectSingleNode("OriginalText");
                    if (subNode != null)
                        language.Main.VideoControls.OriginalText = subNode.InnerText;
                    subNode = node.SelectSingleNode("Previous");
                    if (subNode != null)
                        language.Main.VideoControls.Previous = subNode.InnerText;
                    subNode = node.SelectSingleNode("Stop");
                    if (subNode != null)
                        language.Main.VideoControls.Stop = subNode.InnerText;
                    subNode = node.SelectSingleNode("PlayCurrent");
                    if (subNode != null)
                        language.Main.VideoControls.PlayCurrent = subNode.InnerText;
                    subNode = node.SelectSingleNode("Next");
                    if (subNode != null)
                        language.Main.VideoControls.Next = subNode.InnerText;
                    subNode = node.SelectSingleNode("Playing");
                    if (subNode != null)
                        language.Main.VideoControls.Playing = subNode.InnerText;
                    subNode = node.SelectSingleNode("RepeatingLastTime");
                    if (subNode != null)
                        language.Main.VideoControls.RepeatingLastTime = subNode.InnerText;
                    subNode = node.SelectSingleNode("RepeatingXTimesLeft");
                    if (subNode != null)
                        language.Main.VideoControls.RepeatingXTimesLeft = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoContinueInOneSecond");
                    if (subNode != null)
                        language.Main.VideoControls.AutoContinueInOneSecond = subNode.InnerText;
                    subNode = node.SelectSingleNode("AutoContinueInXSeconds");
                    if (subNode != null)
                        language.Main.VideoControls.AutoContinueInXSeconds = subNode.InnerText;
                    subNode = node.SelectSingleNode("StillTypingAutoContinueStopped");
                    if (subNode != null)
                        language.Main.VideoControls.StillTypingAutoContinueStopped = subNode.InnerText;
                    subNode = node.SelectSingleNode("InsertNewSubtitleAtVideoPosition");
                    if (subNode != null)
                        language.Main.VideoControls.InsertNewSubtitleAtVideoPosition = subNode.InnerText;
                    subNode = node.SelectSingleNode("Auto");
                    if (subNode != null)
                        language.Main.VideoControls.Auto = subNode.InnerText;
                    subNode = node.SelectSingleNode("PlayFromJustBeforeText");
                    if (subNode != null)
                        language.Main.VideoControls.PlayFromJustBeforeText = subNode.InnerText;
                    subNode = node.SelectSingleNode("Pause");
                    if (subNode != null)
                        language.Main.VideoControls.Pause = subNode.InnerText;
                    subNode = node.SelectSingleNode("GoToSubtitlePositionAndPause");
                    if (subNode != null)
                        language.Main.VideoControls.GoToSubtitlePositionAndPause = subNode.InnerText;
                    subNode = node.SelectSingleNode("SetStartTime");
                    if (subNode != null)
                        language.Main.VideoControls.SetStartTime = subNode.InnerText;
                    subNode = node.SelectSingleNode("SetEndTimeAndGoToNext");
                    if (subNode != null)
                        language.Main.VideoControls.SetEndTimeAndGoToNext = subNode.InnerText;
                    subNode = node.SelectSingleNode("AdjustedViaEndTime");
                    if (subNode != null)
                        language.Main.VideoControls.AdjustedViaEndTime = subNode.InnerText;
                    subNode = node.SelectSingleNode("SetEndTime");
                    if (subNode != null)
                        language.Main.VideoControls.SetEndTime = subNode.InnerText;
                    subNode = node.SelectSingleNode("SetstartTimeAndOffsetOfRest");
                    if (subNode != null)
                        language.Main.VideoControls.SetstartTimeAndOffsetOfRest = subNode.InnerText;
                    subNode = node.SelectSingleNode("SearchTextOnline");
                    if (subNode != null)
                        language.Main.VideoControls.SearchTextOnline = subNode.InnerText;
                    subNode = node.SelectSingleNode("GoogleTranslate");
                    if (subNode != null)
                        language.Main.VideoControls.GoogleTranslate = subNode.InnerText;
                    subNode = node.SelectSingleNode("GoogleIt");
                    if (subNode != null)
                        language.Main.VideoControls.GoogleIt = subNode.InnerText;
                    subNode = node.SelectSingleNode("SecondsBackShort");
                    if (subNode != null)
                        language.Main.VideoControls.SecondsBackShort = subNode.InnerText;
                    subNode = node.SelectSingleNode("SecondsForwardShort");
                    if (subNode != null)
                        language.Main.VideoControls.SecondsForwardShort = subNode.InnerText;
                    subNode = node.SelectSingleNode("VideoPosition");
                    if (subNode != null)
                        language.Main.VideoControls.VideoPosition = subNode.InnerText;
                    subNode = node.SelectSingleNode("TranslateTip");
                    if (subNode != null)
                        language.Main.VideoControls.TranslateTip = subNode.InnerText;
                    subNode = node.SelectSingleNode("CreateTip");
                    if (subNode != null)
                        language.Main.VideoControls.CreateTip = subNode.InnerText;
                    subNode = node.SelectSingleNode("AdjustTip");
                    if (subNode != null)
                        language.Main.VideoControls.AdjustTip = subNode.InnerText;
                    subNode = node.SelectSingleNode("BeforeChangingTimeInWaveFormX");
                    if (subNode != null)
                        language.Main.VideoControls.BeforeChangingTimeInWaveFormX = subNode.InnerText;
                    subNode = node.SelectSingleNode("NewTextInsertAtX");
                    if (subNode != null)
                        language.Main.VideoControls.NewTextInsertAtX = subNode.InnerText;
                    subNode = node.SelectSingleNode("Center");
                    if (subNode != null)
                        language.Main.VideoControls.Center = subNode.InnerText;
                    subNode = node.SelectSingleNode("PlayRate");
                    if (subNode != null)
                        language.Main.VideoControls.PlayRate = subNode.InnerText;
                    subNode = node.SelectSingleNode("Slow");
                    if (subNode != null)
                        language.Main.VideoControls.Slow = subNode.InnerText;
                    subNode = node.SelectSingleNode("Normal");
                    if (subNode != null)
                        language.Main.VideoControls.Normal = subNode.InnerText;
                    subNode = node.SelectSingleNode("Fast");
                    if (subNode != null)
                        language.Main.VideoControls.Fast = subNode.InnerText;
                    subNode = node.SelectSingleNode("VeryFast");
                    if (subNode != null)
                        language.Main.VideoControls.VeryFast = subNode.InnerText;

                }

            }

            language.MatroskaSubtitleChooser = new Nikse.SubtitleEdit.Logic.LanguageStructure.MatroskaSubtitleChooser();
            node = doc.DocumentElement.SelectSingleNode("MatroskaSubtitleChooser");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.MatroskaSubtitleChooser.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseChoose");
                if (subNode != null)
                    language.MatroskaSubtitleChooser.PleaseChoose = subNode.InnerText;
                subNode = node.SelectSingleNode("TrackXLanguageYTypeZ");
                if (subNode != null)
                    language.MatroskaSubtitleChooser.TrackXLanguageYTypeZ = subNode.InnerText;

            }

            language.MeasurementConverter = new Nikse.SubtitleEdit.Logic.LanguageStructure.MeasurementConverter();
            node = doc.DocumentElement.SelectSingleNode("MeasurementConverter");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.MeasurementConverter.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertFrom");
                if (subNode != null)
                    language.MeasurementConverter.ConvertFrom = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertTo");
                if (subNode != null)
                    language.MeasurementConverter.ConvertTo = subNode.InnerText;
                subNode = node.SelectSingleNode("CopyToClipboard");
                if (subNode != null)
                    language.MeasurementConverter.CopyToClipboard = subNode.InnerText;
                subNode = node.SelectSingleNode("Celsius");
                if (subNode != null)
                    language.MeasurementConverter.Celsius = subNode.InnerText;
                subNode = node.SelectSingleNode("Fahrenheit");
                if (subNode != null)
                    language.MeasurementConverter.Fahrenheit = subNode.InnerText;
                subNode = node.SelectSingleNode("Miles");
                if (subNode != null)
                    language.MeasurementConverter.Miles = subNode.InnerText;
                subNode = node.SelectSingleNode("Kilometers");
                if (subNode != null)
                    language.MeasurementConverter.Kilometers = subNode.InnerText;
                subNode = node.SelectSingleNode("Meters");
                if (subNode != null)
                    language.MeasurementConverter.Meters = subNode.InnerText;
                subNode = node.SelectSingleNode("Yards");
                if (subNode != null)
                    language.MeasurementConverter.Yards = subNode.InnerText;
                subNode = node.SelectSingleNode("Feet");
                if (subNode != null)
                    language.MeasurementConverter.Feet = subNode.InnerText;
                subNode = node.SelectSingleNode("Inches");
                if (subNode != null)
                    language.MeasurementConverter.Inches = subNode.InnerText;
                subNode = node.SelectSingleNode("Pounds");
                if (subNode != null)
                    language.MeasurementConverter.Pounds = subNode.InnerText;
                subNode = node.SelectSingleNode("Kilos");
                if (subNode != null)
                    language.MeasurementConverter.Kilos = subNode.InnerText;

            }

            language.MergeDoubleLines = new Nikse.SubtitleEdit.Logic.LanguageStructure.MergeDoubleLines();
            node = doc.DocumentElement.SelectSingleNode("MergeDoubleLines");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.MergeDoubleLines.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxMillisecondsBetweenLines");
                if (subNode != null)
                    language.MergeDoubleLines.MaxMillisecondsBetweenLines = subNode.InnerText;
                subNode = node.SelectSingleNode("IncludeIncrementing");
                if (subNode != null)
                    language.MergeDoubleLines.IncludeIncrementing = subNode.InnerText;

            }

            language.MergedShortLines = new Nikse.SubtitleEdit.Logic.LanguageStructure.MergeShortLines();
            node = doc.DocumentElement.SelectSingleNode("MergedShortLines");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.MergedShortLines.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("MaximumCharacters");
                if (subNode != null)
                    language.MergedShortLines.MaximumCharacters = subNode.InnerText;
                subNode = node.SelectSingleNode("MaximumMillisecondsBetween");
                if (subNode != null)
                    language.MergedShortLines.MaximumMillisecondsBetween = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfMergesX");
                if (subNode != null)
                    language.MergedShortLines.NumberOfMergesX = subNode.InnerText;
                subNode = node.SelectSingleNode("MergedText");
                if (subNode != null)
                    language.MergedShortLines.MergedText = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyMergeContinuationLines");
                if (subNode != null)
                    language.MergedShortLines.OnlyMergeContinuationLines = subNode.InnerText;

            }

            language.MergeTextWithSameTimeCodes = new Nikse.SubtitleEdit.Logic.LanguageStructure.MergeTextWithSameTimeCodes();
            node = doc.DocumentElement.SelectSingleNode("MergeTextWithSameTimeCodes");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.MergeTextWithSameTimeCodes.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxDifferenceMilliseconds");
                if (subNode != null)
                    language.MergeTextWithSameTimeCodes.MaxDifferenceMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("ReBreakLines");
                if (subNode != null)
                    language.MergeTextWithSameTimeCodes.ReBreakLines = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfMergesX");
                if (subNode != null)
                    language.MergeTextWithSameTimeCodes.NumberOfMergesX = subNode.InnerText;
                subNode = node.SelectSingleNode("MergedText");
                if (subNode != null)
                    language.MergeTextWithSameTimeCodes.MergedText = subNode.InnerText;

            }

            language.ModifySelection = new Nikse.SubtitleEdit.Logic.LanguageStructure.ModifySelection();
            node = doc.DocumentElement.SelectSingleNode("ModifySelection");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ModifySelection.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Rule");
                if (subNode != null)
                    language.ModifySelection.Rule = subNode.InnerText;
                subNode = node.SelectSingleNode("CaseSensitive");
                if (subNode != null)
                    language.ModifySelection.CaseSensitive = subNode.InnerText;
                subNode = node.SelectSingleNode("DoWithMatches");
                if (subNode != null)
                    language.ModifySelection.DoWithMatches = subNode.InnerText;
                subNode = node.SelectSingleNode("MakeNewSelection");
                if (subNode != null)
                    language.ModifySelection.MakeNewSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("AddToCurrentSelection");
                if (subNode != null)
                    language.ModifySelection.AddToCurrentSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtractFromCurrentSelection");
                if (subNode != null)
                    language.ModifySelection.SubtractFromCurrentSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("IntersectWithCurrentSelection");
                if (subNode != null)
                    language.ModifySelection.IntersectWithCurrentSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("MatchingLinesX");
                if (subNode != null)
                    language.ModifySelection.MatchingLinesX = subNode.InnerText;
                subNode = node.SelectSingleNode("Contains");
                if (subNode != null)
                    language.ModifySelection.Contains = subNode.InnerText;
                subNode = node.SelectSingleNode("StartsWith");
                if (subNode != null)
                    language.ModifySelection.StartsWith = subNode.InnerText;
                subNode = node.SelectSingleNode("EndsWith");
                if (subNode != null)
                    language.ModifySelection.EndsWith = subNode.InnerText;
                subNode = node.SelectSingleNode("NoContains");
                if (subNode != null)
                    language.ModifySelection.NoContains = subNode.InnerText;
                subNode = node.SelectSingleNode("RegEx");
                if (subNode != null)
                    language.ModifySelection.RegEx = subNode.InnerText;
                subNode = node.SelectSingleNode("UnequalLines");
                if (subNode != null)
                    language.ModifySelection.UnequalLines = subNode.InnerText;
                subNode = node.SelectSingleNode("EqualLines");
                if (subNode != null)
                    language.ModifySelection.EqualLines = subNode.InnerText;

            }

            language.MultipleReplace = new Nikse.SubtitleEdit.Logic.LanguageStructure.MultipleReplace();
            node = doc.DocumentElement.SelectSingleNode("MultipleReplace");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.MultipleReplace.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("FindWhat");
                if (subNode != null)
                    language.MultipleReplace.FindWhat = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceWith");
                if (subNode != null)
                    language.MultipleReplace.ReplaceWith = subNode.InnerText;
                subNode = node.SelectSingleNode("Normal");
                if (subNode != null)
                    language.MultipleReplace.Normal = subNode.InnerText;
                subNode = node.SelectSingleNode("CaseSensitive");
                if (subNode != null)
                    language.MultipleReplace.CaseSensitive = subNode.InnerText;
                subNode = node.SelectSingleNode("RegularExpression");
                if (subNode != null)
                    language.MultipleReplace.RegularExpression = subNode.InnerText;
                subNode = node.SelectSingleNode("LinesFoundX");
                if (subNode != null)
                    language.MultipleReplace.LinesFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("Delete");
                if (subNode != null)
                    language.MultipleReplace.Delete = subNode.InnerText;
                subNode = node.SelectSingleNode("Add");
                if (subNode != null)
                    language.MultipleReplace.Add = subNode.InnerText;
                subNode = node.SelectSingleNode("Update");
                if (subNode != null)
                    language.MultipleReplace.Update = subNode.InnerText;
                subNode = node.SelectSingleNode("Enabled");
                if (subNode != null)
                    language.MultipleReplace.Enabled = subNode.InnerText;
                subNode = node.SelectSingleNode("SearchType");
                if (subNode != null)
                    language.MultipleReplace.SearchType = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveAll");
                if (subNode != null)
                    language.MultipleReplace.RemoveAll = subNode.InnerText;
                subNode = node.SelectSingleNode("Import");
                if (subNode != null)
                    language.MultipleReplace.Import = subNode.InnerText;
                subNode = node.SelectSingleNode("Export");
                if (subNode != null)
                    language.MultipleReplace.Export = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportRulesTitle");
                if (subNode != null)
                    language.MultipleReplace.ImportRulesTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("ExportRulesTitle");
                if (subNode != null)
                    language.MultipleReplace.ExportRulesTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("Rules");
                if (subNode != null)
                    language.MultipleReplace.Rules = subNode.InnerText;

            }

            language.NetworkChat = new Nikse.SubtitleEdit.Logic.LanguageStructure.NetworkChat();
            node = doc.DocumentElement.SelectSingleNode("NetworkChat");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.NetworkChat.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Send");
                if (subNode != null)
                    language.NetworkChat.Send = subNode.InnerText;

            }

            language.NetworkJoin = new Nikse.SubtitleEdit.Logic.LanguageStructure.NetworkJoin();
            node = doc.DocumentElement.SelectSingleNode("NetworkJoin");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.NetworkJoin.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Information");
                if (subNode != null)
                    language.NetworkJoin.Information = subNode.InnerText;
                subNode = node.SelectSingleNode("Join");
                if (subNode != null)
                    language.NetworkJoin.Join = subNode.InnerText;

            }

            language.NetworkLogAndInfo = new Nikse.SubtitleEdit.Logic.LanguageStructure.NetworkLogAndInfo();
            node = doc.DocumentElement.SelectSingleNode("NetworkLogAndInfo");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.NetworkLogAndInfo.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Log");
                if (subNode != null)
                    language.NetworkLogAndInfo.Log = subNode.InnerText;

            }

            language.NetworkStart = new Nikse.SubtitleEdit.Logic.LanguageStructure.NetworkStart();
            node = doc.DocumentElement.SelectSingleNode("NetworkStart");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.NetworkStart.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ConnectionTo");
                if (subNode != null)
                    language.NetworkStart.ConnectionTo = subNode.InnerText;
                subNode = node.SelectSingleNode("Information");
                if (subNode != null)
                    language.NetworkStart.Information = subNode.InnerText;
                subNode = node.SelectSingleNode("Start");
                if (subNode != null)
                    language.NetworkStart.Start = subNode.InnerText;

            }

            language.OpenVideoDvd = new Nikse.SubtitleEdit.Logic.LanguageStructure.OpenVideoDvd();
            node = doc.DocumentElement.SelectSingleNode("OpenVideoDvd");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.OpenVideoDvd.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenDvdFrom");
                if (subNode != null)
                    language.OpenVideoDvd.OpenDvdFrom = subNode.InnerText;
                subNode = node.SelectSingleNode("Disc");
                if (subNode != null)
                    language.OpenVideoDvd.Disc = subNode.InnerText;
                subNode = node.SelectSingleNode("Folder");
                if (subNode != null)
                    language.OpenVideoDvd.Folder = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseDrive");
                if (subNode != null)
                    language.OpenVideoDvd.ChooseDrive = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseFolder");
                if (subNode != null)
                    language.OpenVideoDvd.ChooseFolder = subNode.InnerText;

            }

            language.PluginsGet = new Nikse.SubtitleEdit.Logic.LanguageStructure.PluginsGet();
            node = doc.DocumentElement.SelectSingleNode("PluginsGet");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.PluginsGet.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("InstalledPlugins");
                if (subNode != null)
                    language.PluginsGet.InstalledPlugins = subNode.InnerText;
                subNode = node.SelectSingleNode("GetPlugins");
                if (subNode != null)
                    language.PluginsGet.GetPlugins = subNode.InnerText;
                subNode = node.SelectSingleNode("Description");
                if (subNode != null)
                    language.PluginsGet.Description = subNode.InnerText;
                subNode = node.SelectSingleNode("Version");
                if (subNode != null)
                    language.PluginsGet.Version = subNode.InnerText;
                subNode = node.SelectSingleNode("Date");
                if (subNode != null)
                    language.PluginsGet.Date = subNode.InnerText;
                subNode = node.SelectSingleNode("Type");
                if (subNode != null)
                    language.PluginsGet.Type = subNode.InnerText;
                subNode = node.SelectSingleNode("OpenPluginsFolder");
                if (subNode != null)
                    language.PluginsGet.OpenPluginsFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("GetPluginsInfo1");
                if (subNode != null)
                    language.PluginsGet.GetPluginsInfo1 = subNode.InnerText;
                subNode = node.SelectSingleNode("GetPluginsInfo2");
                if (subNode != null)
                    language.PluginsGet.GetPluginsInfo2 = subNode.InnerText;
                subNode = node.SelectSingleNode("PluginXDownloaded");
                if (subNode != null)
                    language.PluginsGet.PluginXDownloaded = subNode.InnerText;
                subNode = node.SelectSingleNode("Download");
                if (subNode != null)
                    language.PluginsGet.Download = subNode.InnerText;
                subNode = node.SelectSingleNode("Remove");
                if (subNode != null)
                    language.PluginsGet.Remove = subNode.InnerText;
                subNode = node.SelectSingleNode("UpdateAllX");
                if (subNode != null)
                    language.PluginsGet.UpdateAllX = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToDownloadPluginListX");
                if (subNode != null)
                    language.PluginsGet.UnableToDownloadPluginListX = subNode.InnerText;
                subNode = node.SelectSingleNode("NewVersionOfSubtitleEditRequired");
                if (subNode != null)
                    language.PluginsGet.NewVersionOfSubtitleEditRequired = subNode.InnerText;
                subNode = node.SelectSingleNode("UpdateAvailable");
                if (subNode != null)
                    language.PluginsGet.UpdateAvailable = subNode.InnerText;
                subNode = node.SelectSingleNode("UpdateAll");
                if (subNode != null)
                    language.PluginsGet.UpdateAll = subNode.InnerText;
                subNode = node.SelectSingleNode("XPluginsUpdated");
                if (subNode != null)
                    language.PluginsGet.XPluginsUpdated = subNode.InnerText;

            }

            language.RegularExpressionContextMenu = new Nikse.SubtitleEdit.Logic.LanguageStructure.RegularExpressionContextMenu();
            node = doc.DocumentElement.SelectSingleNode("RegularExpressionContextMenu");
            if (node != null)
            {
                subNode = node.SelectSingleNode("WordBoundary");
                if (subNode != null)
                    language.RegularExpressionContextMenu.WordBoundary = subNode.InnerText;
                subNode = node.SelectSingleNode("NonWordBoundary");
                if (subNode != null)
                    language.RegularExpressionContextMenu.NonWordBoundary = subNode.InnerText;
                subNode = node.SelectSingleNode("NewLine");
                if (subNode != null)
                    language.RegularExpressionContextMenu.NewLine = subNode.InnerText;
                subNode = node.SelectSingleNode("NewLineShort");
                if (subNode != null)
                    language.RegularExpressionContextMenu.NewLineShort = subNode.InnerText;
                subNode = node.SelectSingleNode("AnyDigit");
                if (subNode != null)
                    language.RegularExpressionContextMenu.AnyDigit = subNode.InnerText;
                subNode = node.SelectSingleNode("AnyCharacter");
                if (subNode != null)
                    language.RegularExpressionContextMenu.AnyCharacter = subNode.InnerText;
                subNode = node.SelectSingleNode("AnyWhitespace");
                if (subNode != null)
                    language.RegularExpressionContextMenu.AnyWhitespace = subNode.InnerText;
                subNode = node.SelectSingleNode("ZeroOrMore");
                if (subNode != null)
                    language.RegularExpressionContextMenu.ZeroOrMore = subNode.InnerText;
                subNode = node.SelectSingleNode("OneOrMore");
                if (subNode != null)
                    language.RegularExpressionContextMenu.OneOrMore = subNode.InnerText;
                subNode = node.SelectSingleNode("InCharacterGroup");
                if (subNode != null)
                    language.RegularExpressionContextMenu.InCharacterGroup = subNode.InnerText;
                subNode = node.SelectSingleNode("NotInCharacterGroup");
                if (subNode != null)
                    language.RegularExpressionContextMenu.NotInCharacterGroup = subNode.InnerText;

            }

            language.RemoveTextFromHearImpaired = new Nikse.SubtitleEdit.Logic.LanguageStructure.RemoveTextFromHearImpaired();
            node = doc.DocumentElement.SelectSingleNode("RemoveTextFromHearImpaired");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveTextConditions");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.RemoveTextConditions = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveTextBetween");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.RemoveTextBetween = subNode.InnerText;
                subNode = node.SelectSingleNode("SquareBrackets");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.SquareBrackets = subNode.InnerText;
                subNode = node.SelectSingleNode("Brackets");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.Brackets = subNode.InnerText;
                subNode = node.SelectSingleNode("Parentheses");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.Parentheses = subNode.InnerText;
                subNode = node.SelectSingleNode("QuestionMarks");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.QuestionMarks = subNode.InnerText;
                subNode = node.SelectSingleNode("And");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.And = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveTextBeforeColon");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.RemoveTextBeforeColon = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyIfTextIsUppercase");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.OnlyIfTextIsUppercase = subNode.InnerText;
                subNode = node.SelectSingleNode("OnlyIfInSeparateLine");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.OnlyIfInSeparateLine = subNode.InnerText;
                subNode = node.SelectSingleNode("LinesFoundX");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.LinesFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveTextIfContains");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.RemoveTextIfContains = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveTextIfAllUppercase");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.RemoveTextIfAllUppercase = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveInterjections");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.RemoveInterjections = subNode.InnerText;
                subNode = node.SelectSingleNode("EditInterjections");
                if (subNode != null)
                    language.RemoveTextFromHearImpaired.EditInterjections = subNode.InnerText;

            }

            language.ReplaceDialog = new Nikse.SubtitleEdit.Logic.LanguageStructure.ReplaceDialog();
            node = doc.DocumentElement.SelectSingleNode("ReplaceDialog");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ReplaceDialog.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("FindWhat");
                if (subNode != null)
                    language.ReplaceDialog.FindWhat = subNode.InnerText;
                subNode = node.SelectSingleNode("Normal");
                if (subNode != null)
                    language.ReplaceDialog.Normal = subNode.InnerText;
                subNode = node.SelectSingleNode("CaseSensitive");
                if (subNode != null)
                    language.ReplaceDialog.CaseSensitive = subNode.InnerText;
                subNode = node.SelectSingleNode("RegularExpression");
                if (subNode != null)
                    language.ReplaceDialog.RegularExpression = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceWith");
                if (subNode != null)
                    language.ReplaceDialog.ReplaceWith = subNode.InnerText;
                subNode = node.SelectSingleNode("Find");
                if (subNode != null)
                    language.ReplaceDialog.Find = subNode.InnerText;
                subNode = node.SelectSingleNode("Replace");
                if (subNode != null)
                    language.ReplaceDialog.Replace = subNode.InnerText;
                subNode = node.SelectSingleNode("ReplaceAll");
                if (subNode != null)
                    language.ReplaceDialog.ReplaceAll = subNode.InnerText;

            }

            language.RestoreAutoBackup = new Nikse.SubtitleEdit.Logic.LanguageStructure.RestoreAutoBackup();
            node = doc.DocumentElement.SelectSingleNode("RestoreAutoBackup");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.RestoreAutoBackup.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Information");
                if (subNode != null)
                    language.RestoreAutoBackup.Information = subNode.InnerText;
                subNode = node.SelectSingleNode("DateAndTime");
                if (subNode != null)
                    language.RestoreAutoBackup.DateAndTime = subNode.InnerText;
                subNode = node.SelectSingleNode("FileName");
                if (subNode != null)
                    language.RestoreAutoBackup.FileName = subNode.InnerText;
                subNode = node.SelectSingleNode("Extension");
                if (subNode != null)
                    language.RestoreAutoBackup.Extension = subNode.InnerText;
                subNode = node.SelectSingleNode("NoBackedUpFilesFound");
                if (subNode != null)
                    language.RestoreAutoBackup.NoBackedUpFilesFound = subNode.InnerText;

            }

            language.SeekSilence = new Nikse.SubtitleEdit.Logic.LanguageStructure.SeekSilence();
            node = doc.DocumentElement.SelectSingleNode("SeekSilence");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SeekSilence.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("SearchDirection");
                if (subNode != null)
                    language.SeekSilence.SearchDirection = subNode.InnerText;
                subNode = node.SelectSingleNode("Forward");
                if (subNode != null)
                    language.SeekSilence.Forward = subNode.InnerText;
                subNode = node.SelectSingleNode("Back");
                if (subNode != null)
                    language.SeekSilence.Back = subNode.InnerText;
                subNode = node.SelectSingleNode("LengthInSeconds");
                if (subNode != null)
                    language.SeekSilence.LengthInSeconds = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxVolume");
                if (subNode != null)
                    language.SeekSilence.MaxVolume = subNode.InnerText;

            }

            language.SetMinimumDisplayTimeBetweenParagraphs = new Nikse.SubtitleEdit.Logic.LanguageStructure.SetMinimumDisplayTimeBetweenParagraphs();
            node = doc.DocumentElement.SelectSingleNode("SetMinimumDisplayTimeBetweenParagraphs");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SetMinimumDisplayTimeBetweenParagraphs.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("PreviewLinesModifiedX");
                if (subNode != null)
                    language.SetMinimumDisplayTimeBetweenParagraphs.PreviewLinesModifiedX = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowOnlyModifiedLines");
                if (subNode != null)
                    language.SetMinimumDisplayTimeBetweenParagraphs.ShowOnlyModifiedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("MinimumMillisecondsBetweenParagraphs");
                if (subNode != null)
                    language.SetMinimumDisplayTimeBetweenParagraphs.MinimumMillisecondsBetweenParagraphs = subNode.InnerText;
                subNode = node.SelectSingleNode("FrameInfo");
                if (subNode != null)
                    language.SetMinimumDisplayTimeBetweenParagraphs.FrameInfo = subNode.InnerText;
                subNode = node.SelectSingleNode("OneFrameXisYMilliseconds");
                if (subNode != null)
                    language.SetMinimumDisplayTimeBetweenParagraphs.OneFrameXisYMilliseconds = subNode.InnerText;

            }

            language.SetSyncPoint = new Nikse.SubtitleEdit.Logic.LanguageStructure.SetSyncPoint();
            node = doc.DocumentElement.SelectSingleNode("SetSyncPoint");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SetSyncPoint.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("SyncPointTimeCode");
                if (subNode != null)
                    language.SetSyncPoint.SyncPointTimeCode = subNode.InnerText;
                subNode = node.SelectSingleNode("ThreeSecondsBack");
                if (subNode != null)
                    language.SetSyncPoint.ThreeSecondsBack = subNode.InnerText;
                subNode = node.SelectSingleNode("HalfASecondBack");
                if (subNode != null)
                    language.SetSyncPoint.HalfASecondBack = subNode.InnerText;
                subNode = node.SelectSingleNode("HalfASecondForward");
                if (subNode != null)
                    language.SetSyncPoint.HalfASecondForward = subNode.InnerText;
                subNode = node.SelectSingleNode("ThreeSecondsForward");
                if (subNode != null)
                    language.SetSyncPoint.ThreeSecondsForward = subNode.InnerText;

            }

            language.Settings = new Nikse.SubtitleEdit.Logic.LanguageStructure.Settings();
            node = doc.DocumentElement.SelectSingleNode("Settings");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.Settings.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("General");
                if (subNode != null)
                    language.Settings.General = subNode.InnerText;
                subNode = node.SelectSingleNode("Toolbar");
                if (subNode != null)
                    language.Settings.Toolbar = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoPlayer");
                if (subNode != null)
                    language.Settings.VideoPlayer = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformAndSpectrogram");
                if (subNode != null)
                    language.Settings.WaveformAndSpectrogram = subNode.InnerText;
                subNode = node.SelectSingleNode("Tools");
                if (subNode != null)
                    language.Settings.Tools = subNode.InnerText;
                subNode = node.SelectSingleNode("WordLists");
                if (subNode != null)
                    language.Settings.WordLists = subNode.InnerText;
                subNode = node.SelectSingleNode("SsaStyle");
                if (subNode != null)
                    language.Settings.SsaStyle = subNode.InnerText;
                subNode = node.SelectSingleNode("Proxy");
                if (subNode != null)
                    language.Settings.Proxy = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowToolBarButtons");
                if (subNode != null)
                    language.Settings.ShowToolBarButtons = subNode.InnerText;
                subNode = node.SelectSingleNode("New");
                if (subNode != null)
                    language.Settings.New = subNode.InnerText;
                subNode = node.SelectSingleNode("Open");
                if (subNode != null)
                    language.Settings.Open = subNode.InnerText;
                subNode = node.SelectSingleNode("Save");
                if (subNode != null)
                    language.Settings.Save = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveAs");
                if (subNode != null)
                    language.Settings.SaveAs = subNode.InnerText;
                subNode = node.SelectSingleNode("Find");
                if (subNode != null)
                    language.Settings.Find = subNode.InnerText;
                subNode = node.SelectSingleNode("Replace");
                if (subNode != null)
                    language.Settings.Replace = subNode.InnerText;
                subNode = node.SelectSingleNode("VisualSync");
                if (subNode != null)
                    language.Settings.VisualSync = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheck");
                if (subNode != null)
                    language.Settings.SpellCheck = subNode.InnerText;
                subNode = node.SelectSingleNode("SettingsName");
                if (subNode != null)
                    language.Settings.SettingsName = subNode.InnerText;
                subNode = node.SelectSingleNode("Help");
                if (subNode != null)
                    language.Settings.Help = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowFrameRate");
                if (subNode != null)
                    language.Settings.ShowFrameRate = subNode.InnerText;
                subNode = node.SelectSingleNode("DefaultFrameRate");
                if (subNode != null)
                    language.Settings.DefaultFrameRate = subNode.InnerText;
                subNode = node.SelectSingleNode("DefaultFileEncoding");
                if (subNode != null)
                    language.Settings.DefaultFileEncoding = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoDetectAnsiEncoding");
                if (subNode != null)
                    language.Settings.AutoDetectAnsiEncoding = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleLineMaximumLength");
                if (subNode != null)
                    language.Settings.SubtitleLineMaximumLength = subNode.InnerText;
                subNode = node.SelectSingleNode("MaximumCharactersPerSecond");
                if (subNode != null)
                    language.Settings.MaximumCharactersPerSecond = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoWrapWhileTyping");
                if (subNode != null)
                    language.Settings.AutoWrapWhileTyping = subNode.InnerText;
                subNode = node.SelectSingleNode("DurationMinimumMilliseconds");
                if (subNode != null)
                    language.Settings.DurationMinimumMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("DurationMaximumMilliseconds");
                if (subNode != null)
                    language.Settings.DurationMaximumMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("MinimumGapMilliseconds");
                if (subNode != null)
                    language.Settings.MinimumGapMilliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleFont");
                if (subNode != null)
                    language.Settings.SubtitleFont = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleFontSize");
                if (subNode != null)
                    language.Settings.SubtitleFontSize = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleBold");
                if (subNode != null)
                    language.Settings.SubtitleBold = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleCenter");
                if (subNode != null)
                    language.Settings.SubtitleCenter = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleFontColor");
                if (subNode != null)
                    language.Settings.SubtitleFontColor = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleBackgroundColor");
                if (subNode != null)
                    language.Settings.SubtitleBackgroundColor = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellChecker");
                if (subNode != null)
                    language.Settings.SpellChecker = subNode.InnerText;
                subNode = node.SelectSingleNode("RememberRecentFiles");
                if (subNode != null)
                    language.Settings.RememberRecentFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("StartWithLastFileLoaded");
                if (subNode != null)
                    language.Settings.StartWithLastFileLoaded = subNode.InnerText;
                subNode = node.SelectSingleNode("RememberSelectedLine");
                if (subNode != null)
                    language.Settings.RememberSelectedLine = subNode.InnerText;
                subNode = node.SelectSingleNode("RememberPositionAndSize");
                if (subNode != null)
                    language.Settings.RememberPositionAndSize = subNode.InnerText;
                subNode = node.SelectSingleNode("StartInSourceView");
                if (subNode != null)
                    language.Settings.StartInSourceView = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveBlankLinesWhenOpening");
                if (subNode != null)
                    language.Settings.RemoveBlankLinesWhenOpening = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowLineBreaksAs");
                if (subNode != null)
                    language.Settings.ShowLineBreaksAs = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewDoubleClickAction");
                if (subNode != null)
                    language.Settings.MainListViewDoubleClickAction = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewNothing");
                if (subNode != null)
                    language.Settings.MainListViewNothing = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewVideoGoToPositionAndPause");
                if (subNode != null)
                    language.Settings.MainListViewVideoGoToPositionAndPause = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewVideoGoToPositionAndPlay");
                if (subNode != null)
                    language.Settings.MainListViewVideoGoToPositionAndPlay = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewEditText");
                if (subNode != null)
                    language.Settings.MainListViewEditText = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewVideoGoToPositionMinus1SecAndPause");
                if (subNode != null)
                    language.Settings.MainListViewVideoGoToPositionMinus1SecAndPause = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewVideoGoToPositionMinusHalfSecAndPause");
                if (subNode != null)
                    language.Settings.MainListViewVideoGoToPositionMinusHalfSecAndPause = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewVideoGoToPositionMinus1SecAndPlay");
                if (subNode != null)
                    language.Settings.MainListViewVideoGoToPositionMinus1SecAndPlay = subNode.InnerText;
                subNode = node.SelectSingleNode("MainListViewEditTextAndPause");
                if (subNode != null)
                    language.Settings.MainListViewEditTextAndPause = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBackup");
                if (subNode != null)
                    language.Settings.AutoBackup = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBackupEveryMinute");
                if (subNode != null)
                    language.Settings.AutoBackupEveryMinute = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBackupEveryFiveMinutes");
                if (subNode != null)
                    language.Settings.AutoBackupEveryFiveMinutes = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBackupEveryFifteenMinutes");
                if (subNode != null)
                    language.Settings.AutoBackupEveryFifteenMinutes = subNode.InnerText;
                subNode = node.SelectSingleNode("CheckForUpdates");
                if (subNode != null)
                    language.Settings.CheckForUpdates = subNode.InnerText;
                subNode = node.SelectSingleNode("AllowEditOfOriginalSubtitle");
                if (subNode != null)
                    language.Settings.AllowEditOfOriginalSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("PromptDeleteLines");
                if (subNode != null)
                    language.Settings.PromptDeleteLines = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeMode");
                if (subNode != null)
                    language.Settings.TimeCodeMode = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeModeHHMMSSMsec");
                if (subNode != null)
                    language.Settings.TimeCodeModeHHMMSSMsec = subNode.InnerText;
                subNode = node.SelectSingleNode("TimeCodeModeHHMMSSFF");
                if (subNode != null)
                    language.Settings.TimeCodeModeHHMMSSFF = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoEngine");
                if (subNode != null)
                    language.Settings.VideoEngine = subNode.InnerText;
                subNode = node.SelectSingleNode("DirectShow");
                if (subNode != null)
                    language.Settings.DirectShow = subNode.InnerText;
                subNode = node.SelectSingleNode("DirectShowDescription");
                if (subNode != null)
                    language.Settings.DirectShowDescription = subNode.InnerText;
                subNode = node.SelectSingleNode("ManagedDirectX");
                if (subNode != null)
                    language.Settings.ManagedDirectX = subNode.InnerText;
                subNode = node.SelectSingleNode("ManagedDirectXDescription");
                if (subNode != null)
                    language.Settings.ManagedDirectXDescription = subNode.InnerText;
                subNode = node.SelectSingleNode("MPlayer");
                if (subNode != null)
                    language.Settings.MPlayer = subNode.InnerText;
                subNode = node.SelectSingleNode("MPlayerDescription");
                if (subNode != null)
                    language.Settings.MPlayerDescription = subNode.InnerText;
                subNode = node.SelectSingleNode("VlcMediaPlayer");
                if (subNode != null)
                    language.Settings.VlcMediaPlayer = subNode.InnerText;
                subNode = node.SelectSingleNode("VlcMediaPlayerDescription");
                if (subNode != null)
                    language.Settings.VlcMediaPlayerDescription = subNode.InnerText;
                subNode = node.SelectSingleNode("VlcBrowseToLabel");
                if (subNode != null)
                    language.Settings.VlcBrowseToLabel = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowStopButton");
                if (subNode != null)
                    language.Settings.ShowStopButton = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowMuteButton");
                if (subNode != null)
                    language.Settings.ShowMuteButton = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowFullscreenButton");
                if (subNode != null)
                    language.Settings.ShowFullscreenButton = subNode.InnerText;
                subNode = node.SelectSingleNode("PreviewFontSize");
                if (subNode != null)
                    language.Settings.PreviewFontSize = subNode.InnerText;
                subNode = node.SelectSingleNode("MainWindowVideoControls");
                if (subNode != null)
                    language.Settings.MainWindowVideoControls = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearchTextAndUrl");
                if (subNode != null)
                    language.Settings.CustomSearchTextAndUrl = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormAppearance");
                if (subNode != null)
                    language.Settings.WaveFormAppearance = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormGridColor");
                if (subNode != null)
                    language.Settings.WaveFormGridColor = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormShowGridLines");
                if (subNode != null)
                    language.Settings.WaveFormShowGridLines = subNode.InnerText;
                subNode = node.SelectSingleNode("ReverseMouseWheelScrollDirection");
                if (subNode != null)
                    language.Settings.ReverseMouseWheelScrollDirection = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormAllowOverlap");
                if (subNode != null)
                    language.Settings.WaveFormAllowOverlap = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormFocusMouseEnter");
                if (subNode != null)
                    language.Settings.WaveFormFocusMouseEnter = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormListViewFocusMouseEnter");
                if (subNode != null)
                    language.Settings.WaveFormListViewFocusMouseEnter = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformBorderHitMs1");
                if (subNode != null)
                    language.Settings.WaveformBorderHitMs1 = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformBorderHitMs2");
                if (subNode != null)
                    language.Settings.WaveformBorderHitMs2 = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormColor");
                if (subNode != null)
                    language.Settings.WaveFormColor = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormSelectedColor");
                if (subNode != null)
                    language.Settings.WaveFormSelectedColor = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormBackgroundColor");
                if (subNode != null)
                    language.Settings.WaveFormBackgroundColor = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveFormTextColor");
                if (subNode != null)
                    language.Settings.WaveFormTextColor = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformAndSpectrogramsFolderEmpty");
                if (subNode != null)
                    language.Settings.WaveformAndSpectrogramsFolderEmpty = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformAndSpectrogramsFolderInfo");
                if (subNode != null)
                    language.Settings.WaveformAndSpectrogramsFolderInfo = subNode.InnerText;
                subNode = node.SelectSingleNode("Spectrogram");
                if (subNode != null)
                    language.Settings.Spectrogram = subNode.InnerText;
                subNode = node.SelectSingleNode("GenerateSpectrogram");
                if (subNode != null)
                    language.Settings.GenerateSpectrogram = subNode.InnerText;
                subNode = node.SelectSingleNode("SpectrogramAppearance");
                if (subNode != null)
                    language.Settings.SpectrogramAppearance = subNode.InnerText;
                subNode = node.SelectSingleNode("SpectrogramOneColorGradient");
                if (subNode != null)
                    language.Settings.SpectrogramOneColorGradient = subNode.InnerText;
                subNode = node.SelectSingleNode("SpectrogramClassic");
                if (subNode != null)
                    language.Settings.SpectrogramClassic = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformUseFFMPEG");
                if (subNode != null)
                    language.Settings.WaveformUseFFMPEG = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformFFMPEGPath");
                if (subNode != null)
                    language.Settings.WaveformFFMPEGPath = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformBrowseToFFMPEG");
                if (subNode != null)
                    language.Settings.WaveformBrowseToFFMPEG = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformBrowseToVLC");
                if (subNode != null)
                    language.Settings.WaveformBrowseToVLC = subNode.InnerText;
                subNode = node.SelectSingleNode("SubStationAlphaStyle");
                if (subNode != null)
                    language.Settings.SubStationAlphaStyle = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseFont");
                if (subNode != null)
                    language.Settings.ChooseFont = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseColor");
                if (subNode != null)
                    language.Settings.ChooseColor = subNode.InnerText;
                subNode = node.SelectSingleNode("SsaOutline");
                if (subNode != null)
                    language.Settings.SsaOutline = subNode.InnerText;
                subNode = node.SelectSingleNode("SsaShadow");
                if (subNode != null)
                    language.Settings.SsaShadow = subNode.InnerText;
                subNode = node.SelectSingleNode("SsaOpaqueBox");
                if (subNode != null)
                    language.Settings.SsaOpaqueBox = subNode.InnerText;
                subNode = node.SelectSingleNode("Testing123");
                if (subNode != null)
                    language.Settings.Testing123 = subNode.InnerText;
                subNode = node.SelectSingleNode("Language");
                if (subNode != null)
                    language.Settings.Language = subNode.InnerText;
                subNode = node.SelectSingleNode("NamesIgnoreLists");
                if (subNode != null)
                    language.Settings.NamesIgnoreLists = subNode.InnerText;
                subNode = node.SelectSingleNode("AddNameEtc");
                if (subNode != null)
                    language.Settings.AddNameEtc = subNode.InnerText;
                subNode = node.SelectSingleNode("AddWord");
                if (subNode != null)
                    language.Settings.AddWord = subNode.InnerText;
                subNode = node.SelectSingleNode("Remove");
                if (subNode != null)
                    language.Settings.Remove = subNode.InnerText;
                subNode = node.SelectSingleNode("AddPair");
                if (subNode != null)
                    language.Settings.AddPair = subNode.InnerText;
                subNode = node.SelectSingleNode("UserWordList");
                if (subNode != null)
                    language.Settings.UserWordList = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrFixList");
                if (subNode != null)
                    language.Settings.OcrFixList = subNode.InnerText;
                subNode = node.SelectSingleNode("Location");
                if (subNode != null)
                    language.Settings.Location = subNode.InnerText;
                subNode = node.SelectSingleNode("UseOnlineNamesEtc");
                if (subNode != null)
                    language.Settings.UseOnlineNamesEtc = subNode.InnerText;
                subNode = node.SelectSingleNode("WordAddedX");
                if (subNode != null)
                    language.Settings.WordAddedX = subNode.InnerText;
                subNode = node.SelectSingleNode("WordAlreadyExists");
                if (subNode != null)
                    language.Settings.WordAlreadyExists = subNode.InnerText;
                subNode = node.SelectSingleNode("WordNotFound");
                if (subNode != null)
                    language.Settings.WordNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveX");
                if (subNode != null)
                    language.Settings.RemoveX = subNode.InnerText;
                subNode = node.SelectSingleNode("CannotUpdateNamesEtcOnline");
                if (subNode != null)
                    language.Settings.CannotUpdateNamesEtcOnline = subNode.InnerText;
                subNode = node.SelectSingleNode("ProxyServerSettings");
                if (subNode != null)
                    language.Settings.ProxyServerSettings = subNode.InnerText;
                subNode = node.SelectSingleNode("ProxyAddress");
                if (subNode != null)
                    language.Settings.ProxyAddress = subNode.InnerText;
                subNode = node.SelectSingleNode("ProxyAuthentication");
                if (subNode != null)
                    language.Settings.ProxyAuthentication = subNode.InnerText;
                subNode = node.SelectSingleNode("ProxyUserName");
                if (subNode != null)
                    language.Settings.ProxyUserName = subNode.InnerText;
                subNode = node.SelectSingleNode("ProxyPassword");
                if (subNode != null)
                    language.Settings.ProxyPassword = subNode.InnerText;
                subNode = node.SelectSingleNode("ProxyDomain");
                if (subNode != null)
                    language.Settings.ProxyDomain = subNode.InnerText;
                subNode = node.SelectSingleNode("PlayXSecondsAndBack");
                if (subNode != null)
                    language.Settings.PlayXSecondsAndBack = subNode.InnerText;
                subNode = node.SelectSingleNode("StartSceneIndex");
                if (subNode != null)
                    language.Settings.StartSceneIndex = subNode.InnerText;
                subNode = node.SelectSingleNode("EndSceneIndex");
                if (subNode != null)
                    language.Settings.EndSceneIndex = subNode.InnerText;
                subNode = node.SelectSingleNode("FirstPlusX");
                if (subNode != null)
                    language.Settings.FirstPlusX = subNode.InnerText;
                subNode = node.SelectSingleNode("LastMinusX");
                if (subNode != null)
                    language.Settings.LastMinusX = subNode.InnerText;
                subNode = node.SelectSingleNode("FixCommonerrors");
                if (subNode != null)
                    language.Settings.FixCommonerrors = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeLinesShorterThan");
                if (subNode != null)
                    language.Settings.MergeLinesShorterThan = subNode.InnerText;
                subNode = node.SelectSingleNode("MusicSymbol");
                if (subNode != null)
                    language.Settings.MusicSymbol = subNode.InnerText;
                subNode = node.SelectSingleNode("MusicSymbolsToReplace");
                if (subNode != null)
                    language.Settings.MusicSymbolsToReplace = subNode.InnerText;
                subNode = node.SelectSingleNode("FixCommonOcrErrorsUseHardcodedRules");
                if (subNode != null)
                    language.Settings.FixCommonOcrErrorsUseHardcodedRules = subNode.InnerText;
                subNode = node.SelectSingleNode("FixCommonerrorsFixShortDisplayTimesAllowMoveStartTime");
                if (subNode != null)
                    language.Settings.FixCommonerrorsFixShortDisplayTimesAllowMoveStartTime = subNode.InnerText;
                subNode = node.SelectSingleNode("Shortcuts");
                if (subNode != null)
                    language.Settings.Shortcuts = subNode.InnerText;
                subNode = node.SelectSingleNode("Shortcut");
                if (subNode != null)
                    language.Settings.Shortcut = subNode.InnerText;
                subNode = node.SelectSingleNode("Control");
                if (subNode != null)
                    language.Settings.Control = subNode.InnerText;
                subNode = node.SelectSingleNode("Alt");
                if (subNode != null)
                    language.Settings.Alt = subNode.InnerText;
                subNode = node.SelectSingleNode("Shift");
                if (subNode != null)
                    language.Settings.Shift = subNode.InnerText;
                subNode = node.SelectSingleNode("Key");
                if (subNode != null)
                    language.Settings.Key = subNode.InnerText;
                subNode = node.SelectSingleNode("TextBox");
                if (subNode != null)
                    language.Settings.TextBox = subNode.InnerText;
                subNode = node.SelectSingleNode("UpdateShortcut");
                if (subNode != null)
                    language.Settings.UpdateShortcut = subNode.InnerText;
                subNode = node.SelectSingleNode("ShortcutIsNotValid");
                if (subNode != null)
                    language.Settings.ShortcutIsNotValid = subNode.InnerText;
                subNode = node.SelectSingleNode("ToggleDockUndockOfVideoControls");
                if (subNode != null)
                    language.Settings.ToggleDockUndockOfVideoControls = subNode.InnerText;
                subNode = node.SelectSingleNode("CreateSetEndAddNewAndGoToNew");
                if (subNode != null)
                    language.Settings.CreateSetEndAddNewAndGoToNew = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustViaEndAutoStartAndGoToNext");
                if (subNode != null)
                    language.Settings.AdjustViaEndAutoStartAndGoToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSetStartAutoDurationAndGoToNext");
                if (subNode != null)
                    language.Settings.AdjustSetStartAutoDurationAndGoToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSetEndNextStartAndGoToNext");
                if (subNode != null)
                    language.Settings.AdjustSetEndNextStartAndGoToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustStartDownEndUpAndGoToNext");
                if (subNode != null)
                    language.Settings.AdjustStartDownEndUpAndGoToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSelected100MsForward");
                if (subNode != null)
                    language.Settings.AdjustSelected100MsForward = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSelected100MsBack");
                if (subNode != null)
                    language.Settings.AdjustSelected100MsBack = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSetStartTimeKeepDuration");
                if (subNode != null)
                    language.Settings.AdjustSetStartTimeKeepDuration = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSetEndAndOffsetTheRest");
                if (subNode != null)
                    language.Settings.AdjustSetEndAndOffsetTheRest = subNode.InnerText;
                subNode = node.SelectSingleNode("AdjustSetEndAndOffsetTheRestAndGoToNext");
                if (subNode != null)
                    language.Settings.AdjustSetEndAndOffsetTheRestAndGoToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("MainCreateStartDownEndUp");
                if (subNode != null)
                    language.Settings.MainCreateStartDownEndUp = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeDialogue");
                if (subNode != null)
                    language.Settings.MergeDialogue = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToNext");
                if (subNode != null)
                    language.Settings.GoToNext = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToPrevious");
                if (subNode != null)
                    language.Settings.GoToPrevious = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToCurrentSubtitleStart");
                if (subNode != null)
                    language.Settings.GoToCurrentSubtitleStart = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToCurrentSubtitleEnd");
                if (subNode != null)
                    language.Settings.GoToCurrentSubtitleEnd = subNode.InnerText;
                subNode = node.SelectSingleNode("ToggleFocus");
                if (subNode != null)
                    language.Settings.ToggleFocus = subNode.InnerText;
                subNode = node.SelectSingleNode("ToggleDialogueDashes");
                if (subNode != null)
                    language.Settings.ToggleDialogueDashes = subNode.InnerText;
                subNode = node.SelectSingleNode("Alignment");
                if (subNode != null)
                    language.Settings.Alignment = subNode.InnerText;
                subNode = node.SelectSingleNode("CopyTextOnly");
                if (subNode != null)
                    language.Settings.CopyTextOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoDurationSelectedLines");
                if (subNode != null)
                    language.Settings.AutoDurationSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("ReverseStartAndEndingForRTL");
                if (subNode != null)
                    language.Settings.ReverseStartAndEndingForRTL = subNode.InnerText;
                subNode = node.SelectSingleNode("VerticalZoom");
                if (subNode != null)
                    language.Settings.VerticalZoom = subNode.InnerText;
                subNode = node.SelectSingleNode("VerticalZoomOut");
                if (subNode != null)
                    language.Settings.VerticalZoomOut = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformSeekSilenceForward");
                if (subNode != null)
                    language.Settings.WaveformSeekSilenceForward = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformSeekSilenceBack");
                if (subNode != null)
                    language.Settings.WaveformSeekSilenceBack = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformAddTextHere");
                if (subNode != null)
                    language.Settings.WaveformAddTextHere = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformPlayNewSelection");
                if (subNode != null)
                    language.Settings.WaveformPlayNewSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformPlayFirstSelectedSubtitle");
                if (subNode != null)
                    language.Settings.WaveformPlayFirstSelectedSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("WaveformFocusListView");
                if (subNode != null)
                    language.Settings.WaveformFocusListView = subNode.InnerText;
                subNode = node.SelectSingleNode("GoBack1Frame");
                if (subNode != null)
                    language.Settings.GoBack1Frame = subNode.InnerText;
                subNode = node.SelectSingleNode("GoForward1Frame");
                if (subNode != null)
                    language.Settings.GoForward1Frame = subNode.InnerText;
                subNode = node.SelectSingleNode("GoBack100Milliseconds");
                if (subNode != null)
                    language.Settings.GoBack100Milliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("GoForward100Milliseconds");
                if (subNode != null)
                    language.Settings.GoForward100Milliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("GoBack500Milliseconds");
                if (subNode != null)
                    language.Settings.GoBack500Milliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("GoForward500Milliseconds");
                if (subNode != null)
                    language.Settings.GoForward500Milliseconds = subNode.InnerText;
                subNode = node.SelectSingleNode("GoBack1Second");
                if (subNode != null)
                    language.Settings.GoBack1Second = subNode.InnerText;
                subNode = node.SelectSingleNode("GoForward1Second");
                if (subNode != null)
                    language.Settings.GoForward1Second = subNode.InnerText;
                subNode = node.SelectSingleNode("TogglePlayPause");
                if (subNode != null)
                    language.Settings.TogglePlayPause = subNode.InnerText;
                subNode = node.SelectSingleNode("Pause");
                if (subNode != null)
                    language.Settings.Pause = subNode.InnerText;
                subNode = node.SelectSingleNode("Fullscreen");
                if (subNode != null)
                    language.Settings.Fullscreen = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearch1");
                if (subNode != null)
                    language.Settings.CustomSearch1 = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearch2");
                if (subNode != null)
                    language.Settings.CustomSearch2 = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearch3");
                if (subNode != null)
                    language.Settings.CustomSearch3 = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearch4");
                if (subNode != null)
                    language.Settings.CustomSearch4 = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearch5");
                if (subNode != null)
                    language.Settings.CustomSearch5 = subNode.InnerText;
                subNode = node.SelectSingleNode("CustomSearch6");
                if (subNode != null)
                    language.Settings.CustomSearch6 = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxColoring");
                if (subNode != null)
                    language.Settings.SyntaxColoring = subNode.InnerText;
                subNode = node.SelectSingleNode("ListViewSyntaxColoring");
                if (subNode != null)
                    language.Settings.ListViewSyntaxColoring = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxColorDurationIfTooSmall");
                if (subNode != null)
                    language.Settings.SyntaxColorDurationIfTooSmall = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxColorDurationIfTooLarge");
                if (subNode != null)
                    language.Settings.SyntaxColorDurationIfTooLarge = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxColorTextIfTooLong");
                if (subNode != null)
                    language.Settings.SyntaxColorTextIfTooLong = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxColorTextMoreThanXLines");
                if (subNode != null)
                    language.Settings.SyntaxColorTextMoreThanXLines = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxColorOverlap");
                if (subNode != null)
                    language.Settings.SyntaxColorOverlap = subNode.InnerText;
                subNode = node.SelectSingleNode("SyntaxErrorColor");
                if (subNode != null)
                    language.Settings.SyntaxErrorColor = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToFirstSelectedLine");
                if (subNode != null)
                    language.Settings.GoToFirstSelectedLine = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeSelectedLines");
                if (subNode != null)
                    language.Settings.MergeSelectedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("ToggleTranslationMode");
                if (subNode != null)
                    language.Settings.ToggleTranslationMode = subNode.InnerText;
                subNode = node.SelectSingleNode("SwitchOriginalAndTranslation");
                if (subNode != null)
                    language.Settings.SwitchOriginalAndTranslation = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeOriginalAndTranslation");
                if (subNode != null)
                    language.Settings.MergeOriginalAndTranslation = subNode.InnerText;
                subNode = node.SelectSingleNode("ShortcutIsAlreadyDefinedX");
                if (subNode != null)
                    language.Settings.ShortcutIsAlreadyDefinedX = subNode.InnerText;
                subNode = node.SelectSingleNode("ToggleTranslationAndOriginalInPreviews");
                if (subNode != null)
                    language.Settings.ToggleTranslationAndOriginalInPreviews = subNode.InnerText;
                subNode = node.SelectSingleNode("ListViewColumnDelete");
                if (subNode != null)
                    language.Settings.ListViewColumnDelete = subNode.InnerText;
                subNode = node.SelectSingleNode("ListViewColumnInsert");
                if (subNode != null)
                    language.Settings.ListViewColumnInsert = subNode.InnerText;
                subNode = node.SelectSingleNode("ListViewColumnPaste");
                if (subNode != null)
                    language.Settings.ListViewColumnPaste = subNode.InnerText;
                subNode = node.SelectSingleNode("ListViewFocusWaveform");
                if (subNode != null)
                    language.Settings.ListViewFocusWaveform = subNode.InnerText;
                subNode = node.SelectSingleNode("ListViewGoToNextError");
                if (subNode != null)
                    language.Settings.ListViewGoToNextError = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowBeamer");
                if (subNode != null)
                    language.Settings.ShowBeamer = subNode.InnerText;
                subNode = node.SelectSingleNode("MainTextBoxMoveLastWordDown");
                if (subNode != null)
                    language.Settings.MainTextBoxMoveLastWordDown = subNode.InnerText;
                subNode = node.SelectSingleNode("MainTextBoxMoveFirstWordFromNextUp");
                if (subNode != null)
                    language.Settings.MainTextBoxMoveFirstWordFromNextUp = subNode.InnerText;
                subNode = node.SelectSingleNode("MainTextBoxSelectionToLower");
                if (subNode != null)
                    language.Settings.MainTextBoxSelectionToLower = subNode.InnerText;
                subNode = node.SelectSingleNode("MainTextBoxSelectionToUpper");
                if (subNode != null)
                    language.Settings.MainTextBoxSelectionToUpper = subNode.InnerText;
                subNode = node.SelectSingleNode("MainTextBoxAutoBreak");
                if (subNode != null)
                    language.Settings.MainTextBoxAutoBreak = subNode.InnerText;
                subNode = node.SelectSingleNode("MainTextBoxUnbreak");
                if (subNode != null)
                    language.Settings.MainTextBoxUnbreak = subNode.InnerText;
                subNode = node.SelectSingleNode("MainFileSaveAll");
                if (subNode != null)
                    language.Settings.MainFileSaveAll = subNode.InnerText;
                subNode = node.SelectSingleNode("Miscellaneous");
                if (subNode != null)
                    language.Settings.Miscellaneous = subNode.InnerText;
                subNode = node.SelectSingleNode("UseDoNotBreakAfterList");
                if (subNode != null)
                    language.Settings.UseDoNotBreakAfterList = subNode.InnerText;

            }

            language.ShowEarlierLater = new Nikse.SubtitleEdit.Logic.LanguageStructure.ShowEarlierLater();
            node = doc.DocumentElement.SelectSingleNode("ShowEarlierLater");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ShowEarlierLater.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleAll");
                if (subNode != null)
                    language.ShowEarlierLater.TitleAll = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowEarlier");
                if (subNode != null)
                    language.ShowEarlierLater.ShowEarlier = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowLater");
                if (subNode != null)
                    language.ShowEarlierLater.ShowLater = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalAdjustmentX");
                if (subNode != null)
                    language.ShowEarlierLater.TotalAdjustmentX = subNode.InnerText;
                subNode = node.SelectSingleNode("AllLines");
                if (subNode != null)
                    language.ShowEarlierLater.AllLines = subNode.InnerText;
                subNode = node.SelectSingleNode("SelectedLinesOnly");
                if (subNode != null)
                    language.ShowEarlierLater.SelectedLinesOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("SelectedLinesAndForward");
                if (subNode != null)
                    language.ShowEarlierLater.SelectedLinesAndForward = subNode.InnerText;

            }

            language.ShowHistory = new Nikse.SubtitleEdit.Logic.LanguageStructure.ShowHistory();
            node = doc.DocumentElement.SelectSingleNode("ShowHistory");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.ShowHistory.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("SelectRollbackPoint");
                if (subNode != null)
                    language.ShowHistory.SelectRollbackPoint = subNode.InnerText;
                subNode = node.SelectSingleNode("Time");
                if (subNode != null)
                    language.ShowHistory.Time = subNode.InnerText;
                subNode = node.SelectSingleNode("Description");
                if (subNode != null)
                    language.ShowHistory.Description = subNode.InnerText;
                subNode = node.SelectSingleNode("CompareHistoryItems");
                if (subNode != null)
                    language.ShowHistory.CompareHistoryItems = subNode.InnerText;
                subNode = node.SelectSingleNode("CompareWithCurrent");
                if (subNode != null)
                    language.ShowHistory.CompareWithCurrent = subNode.InnerText;
                subNode = node.SelectSingleNode("Rollback");
                if (subNode != null)
                    language.ShowHistory.Rollback = subNode.InnerText;

            }

            language.SpellCheck = new Nikse.SubtitleEdit.Logic.LanguageStructure.SpellCheck();
            node = doc.DocumentElement.SelectSingleNode("SpellCheck");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SpellCheck.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("FullText");
                if (subNode != null)
                    language.SpellCheck.FullText = subNode.InnerText;
                subNode = node.SelectSingleNode("WordNotFound");
                if (subNode != null)
                    language.SpellCheck.WordNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("Language");
                if (subNode != null)
                    language.SpellCheck.Language = subNode.InnerText;
                subNode = node.SelectSingleNode("Change");
                if (subNode != null)
                    language.SpellCheck.Change = subNode.InnerText;
                subNode = node.SelectSingleNode("ChangeAll");
                if (subNode != null)
                    language.SpellCheck.ChangeAll = subNode.InnerText;
                subNode = node.SelectSingleNode("SkipOnce");
                if (subNode != null)
                    language.SpellCheck.SkipOnce = subNode.InnerText;
                subNode = node.SelectSingleNode("SkipAll");
                if (subNode != null)
                    language.SpellCheck.SkipAll = subNode.InnerText;
                subNode = node.SelectSingleNode("AddToUserDictionary");
                if (subNode != null)
                    language.SpellCheck.AddToUserDictionary = subNode.InnerText;
                subNode = node.SelectSingleNode("AddToNamesAndIgnoreList");
                if (subNode != null)
                    language.SpellCheck.AddToNamesAndIgnoreList = subNode.InnerText;
                subNode = node.SelectSingleNode("AddToOcrReplaceList");
                if (subNode != null)
                    language.SpellCheck.AddToOcrReplaceList = subNode.InnerText;
                subNode = node.SelectSingleNode("Abort");
                if (subNode != null)
                    language.SpellCheck.Abort = subNode.InnerText;
                subNode = node.SelectSingleNode("Use");
                if (subNode != null)
                    language.SpellCheck.Use = subNode.InnerText;
                subNode = node.SelectSingleNode("UseAlways");
                if (subNode != null)
                    language.SpellCheck.UseAlways = subNode.InnerText;
                subNode = node.SelectSingleNode("Suggestions");
                if (subNode != null)
                    language.SpellCheck.Suggestions = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheckProgress");
                if (subNode != null)
                    language.SpellCheck.SpellCheckProgress = subNode.InnerText;
                subNode = node.SelectSingleNode("EditWholeText");
                if (subNode != null)
                    language.SpellCheck.EditWholeText = subNode.InnerText;
                subNode = node.SelectSingleNode("EditWordOnly");
                if (subNode != null)
                    language.SpellCheck.EditWordOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("AddXToNamesEtc");
                if (subNode != null)
                    language.SpellCheck.AddXToNamesEtc = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoFixNames");
                if (subNode != null)
                    language.SpellCheck.AutoFixNames = subNode.InnerText;
                subNode = node.SelectSingleNode("CheckOneLetterWords");
                if (subNode != null)
                    language.SpellCheck.CheckOneLetterWords = subNode.InnerText;
                subNode = node.SelectSingleNode("TreatINQuoteAsING");
                if (subNode != null)
                    language.SpellCheck.TreatINQuoteAsING = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageText");
                if (subNode != null)
                    language.SpellCheck.ImageText = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheckCompleted");
                if (subNode != null)
                    language.SpellCheck.SpellCheckCompleted = subNode.InnerText;
                subNode = node.SelectSingleNode("SpellCheckAborted");
                if (subNode != null)
                    language.SpellCheck.SpellCheckAborted = subNode.InnerText;
                subNode = node.SelectSingleNode("UndoX");
                if (subNode != null)
                    language.SpellCheck.UndoX = subNode.InnerText;

            }

            language.Split = new Nikse.SubtitleEdit.Logic.LanguageStructure.Split();
            node = doc.DocumentElement.SelectSingleNode("Split");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.Split.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitOptions");
                if (subNode != null)
                    language.Split.SplitOptions = subNode.InnerText;
                subNode = node.SelectSingleNode("Lines");
                if (subNode != null)
                    language.Split.Lines = subNode.InnerText;
                subNode = node.SelectSingleNode("Characters");
                if (subNode != null)
                    language.Split.Characters = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfEqualParts");
                if (subNode != null)
                    language.Split.NumberOfEqualParts = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleInfo");
                if (subNode != null)
                    language.Split.SubtitleInfo = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfLinesX");
                if (subNode != null)
                    language.Split.NumberOfLinesX = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfCharactersX");
                if (subNode != null)
                    language.Split.NumberOfCharactersX = subNode.InnerText;
                subNode = node.SelectSingleNode("Output");
                if (subNode != null)
                    language.Split.Output = subNode.InnerText;
                subNode = node.SelectSingleNode("FileName");
                if (subNode != null)
                    language.Split.FileName = subNode.InnerText;
                subNode = node.SelectSingleNode("OutputFolder");
                if (subNode != null)
                    language.Split.OutputFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("DoSplit");
                if (subNode != null)
                    language.Split.DoSplit = subNode.InnerText;
                subNode = node.SelectSingleNode("Basic");
                if (subNode != null)
                    language.Split.Basic = subNode.InnerText;

            }

            language.SplitLongLines = new Nikse.SubtitleEdit.Logic.LanguageStructure.SplitLongLines();
            node = doc.DocumentElement.SelectSingleNode("SplitLongLines");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SplitLongLines.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("SingleLineMaximumLength");
                if (subNode != null)
                    language.SplitLongLines.SingleLineMaximumLength = subNode.InnerText;
                subNode = node.SelectSingleNode("LineMaximumLength");
                if (subNode != null)
                    language.SplitLongLines.LineMaximumLength = subNode.InnerText;
                subNode = node.SelectSingleNode("LineContinuationBeginEndStrings");
                if (subNode != null)
                    language.SplitLongLines.LineContinuationBeginEndStrings = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfSplits");
                if (subNode != null)
                    language.SplitLongLines.NumberOfSplits = subNode.InnerText;
                subNode = node.SelectSingleNode("LongestSingleLineIsXAtY");
                if (subNode != null)
                    language.SplitLongLines.LongestSingleLineIsXAtY = subNode.InnerText;
                subNode = node.SelectSingleNode("LongestLineIsXAtY");
                if (subNode != null)
                    language.SplitLongLines.LongestLineIsXAtY = subNode.InnerText;

            }

            language.SplitSubtitle = new Nikse.SubtitleEdit.Logic.LanguageStructure.SplitSubtitle();
            node = doc.DocumentElement.SelectSingleNode("SplitSubtitle");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SplitSubtitle.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Description1");
                if (subNode != null)
                    language.SplitSubtitle.Description1 = subNode.InnerText;
                subNode = node.SelectSingleNode("Description2");
                if (subNode != null)
                    language.SplitSubtitle.Description2 = subNode.InnerText;
                subNode = node.SelectSingleNode("Split");
                if (subNode != null)
                    language.SplitSubtitle.Split = subNode.InnerText;
                subNode = node.SelectSingleNode("Done");
                if (subNode != null)
                    language.SplitSubtitle.Done = subNode.InnerText;
                subNode = node.SelectSingleNode("NothingToSplit");
                if (subNode != null)
                    language.SplitSubtitle.NothingToSplit = subNode.InnerText;
                subNode = node.SelectSingleNode("SavePartOneAs");
                if (subNode != null)
                    language.SplitSubtitle.SavePartOneAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SavePartTwoAs");
                if (subNode != null)
                    language.SplitSubtitle.SavePartTwoAs = subNode.InnerText;
                subNode = node.SelectSingleNode("Part1");
                if (subNode != null)
                    language.SplitSubtitle.Part1 = subNode.InnerText;
                subNode = node.SelectSingleNode("Part2");
                if (subNode != null)
                    language.SplitSubtitle.Part2 = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToSaveFileX");
                if (subNode != null)
                    language.SplitSubtitle.UnableToSaveFileX = subNode.InnerText;
                subNode = node.SelectSingleNode("OverwriteExistingFiles");
                if (subNode != null)
                    language.SplitSubtitle.OverwriteExistingFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("FolderNotFoundX");
                if (subNode != null)
                    language.SplitSubtitle.FolderNotFoundX = subNode.InnerText;
                subNode = node.SelectSingleNode("Untitled");
                if (subNode != null)
                    language.SplitSubtitle.Untitled = subNode.InnerText;

            }

            language.StartNumberingFrom = new Nikse.SubtitleEdit.Logic.LanguageStructure.StartNumberingFrom();
            node = doc.DocumentElement.SelectSingleNode("StartNumberingFrom");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.StartNumberingFrom.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("StartFromNumber");
                if (subNode != null)
                    language.StartNumberingFrom.StartFromNumber = subNode.InnerText;
                subNode = node.SelectSingleNode("PleaseEnterAValidNumber");
                if (subNode != null)
                    language.StartNumberingFrom.PleaseEnterAValidNumber = subNode.InnerText;

            }

            language.Statistics = new Nikse.SubtitleEdit.Logic.LanguageStructure.Statistics();
            node = doc.DocumentElement.SelectSingleNode("Statistics");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.Statistics.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleWithFileName");
                if (subNode != null)
                    language.Statistics.TitleWithFileName = subNode.InnerText;
                subNode = node.SelectSingleNode("GeneralStatistics");
                if (subNode != null)
                    language.Statistics.GeneralStatistics = subNode.InnerText;
                subNode = node.SelectSingleNode("MostUsed");
                if (subNode != null)
                    language.Statistics.MostUsed = subNode.InnerText;
                subNode = node.SelectSingleNode("MostUsedLines");
                if (subNode != null)
                    language.Statistics.MostUsedLines = subNode.InnerText;
                subNode = node.SelectSingleNode("MostUsedWords");
                if (subNode != null)
                    language.Statistics.MostUsedWords = subNode.InnerText;
                subNode = node.SelectSingleNode("NothingFound");
                if (subNode != null)
                    language.Statistics.NothingFound = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfLinesX");
                if (subNode != null)
                    language.Statistics.NumberOfLinesX = subNode.InnerText;
                subNode = node.SelectSingleNode("LengthInFormatXinCharactersY");
                if (subNode != null)
                    language.Statistics.LengthInFormatXinCharactersY = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfCharactersInTextOnly");
                if (subNode != null)
                    language.Statistics.NumberOfCharactersInTextOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("TotalCharsPerSecond");
                if (subNode != null)
                    language.Statistics.TotalCharsPerSecond = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfItalicTags");
                if (subNode != null)
                    language.Statistics.NumberOfItalicTags = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfBoldTags");
                if (subNode != null)
                    language.Statistics.NumberOfBoldTags = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfUnderlineTags");
                if (subNode != null)
                    language.Statistics.NumberOfUnderlineTags = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfFontTags");
                if (subNode != null)
                    language.Statistics.NumberOfFontTags = subNode.InnerText;
                subNode = node.SelectSingleNode("NumberOfAlignmentTags");
                if (subNode != null)
                    language.Statistics.NumberOfAlignmentTags = subNode.InnerText;
                subNode = node.SelectSingleNode("LineLengthMinimum");
                if (subNode != null)
                    language.Statistics.LineLengthMinimum = subNode.InnerText;
                subNode = node.SelectSingleNode("LineLengthMaximum");
                if (subNode != null)
                    language.Statistics.LineLengthMaximum = subNode.InnerText;
                subNode = node.SelectSingleNode("LineLengthAvarage");
                if (subNode != null)
                    language.Statistics.LineLengthAvarage = subNode.InnerText;
                subNode = node.SelectSingleNode("LinesPerSubtitleAvarage");
                if (subNode != null)
                    language.Statistics.LinesPerSubtitleAvarage = subNode.InnerText;
                subNode = node.SelectSingleNode("SingleLineLengthMinimum");
                if (subNode != null)
                    language.Statistics.SingleLineLengthMinimum = subNode.InnerText;
                subNode = node.SelectSingleNode("SingleLineLengthMaximum");
                if (subNode != null)
                    language.Statistics.SingleLineLengthMaximum = subNode.InnerText;
                subNode = node.SelectSingleNode("SingleLineLengthAvarage");
                if (subNode != null)
                    language.Statistics.SingleLineLengthAvarage = subNode.InnerText;
                subNode = node.SelectSingleNode("DurationMinimum");
                if (subNode != null)
                    language.Statistics.DurationMinimum = subNode.InnerText;
                subNode = node.SelectSingleNode("DurationMaximum");
                if (subNode != null)
                    language.Statistics.DurationMaximum = subNode.InnerText;
                subNode = node.SelectSingleNode("DurationAvarage");
                if (subNode != null)
                    language.Statistics.DurationAvarage = subNode.InnerText;

            }

            language.SubStationAlphaProperties = new Nikse.SubtitleEdit.Logic.LanguageStructure.SubStationAlphaProperties();
            node = doc.DocumentElement.SelectSingleNode("SubStationAlphaProperties");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SubStationAlphaProperties.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleSubstationAlpha");
                if (subNode != null)
                    language.SubStationAlphaProperties.TitleSubstationAlpha = subNode.InnerText;
                subNode = node.SelectSingleNode("Script");
                if (subNode != null)
                    language.SubStationAlphaProperties.Script = subNode.InnerText;
                subNode = node.SelectSingleNode("ScriptTitle");
                if (subNode != null)
                    language.SubStationAlphaProperties.ScriptTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("OriginalScript");
                if (subNode != null)
                    language.SubStationAlphaProperties.OriginalScript = subNode.InnerText;
                subNode = node.SelectSingleNode("Translation");
                if (subNode != null)
                    language.SubStationAlphaProperties.Translation = subNode.InnerText;
                subNode = node.SelectSingleNode("Editing");
                if (subNode != null)
                    language.SubStationAlphaProperties.Editing = subNode.InnerText;
                subNode = node.SelectSingleNode("Timing");
                if (subNode != null)
                    language.SubStationAlphaProperties.Timing = subNode.InnerText;
                subNode = node.SelectSingleNode("SyncPoint");
                if (subNode != null)
                    language.SubStationAlphaProperties.SyncPoint = subNode.InnerText;
                subNode = node.SelectSingleNode("UpdatedBy");
                if (subNode != null)
                    language.SubStationAlphaProperties.UpdatedBy = subNode.InnerText;
                subNode = node.SelectSingleNode("UpdateDetails");
                if (subNode != null)
                    language.SubStationAlphaProperties.UpdateDetails = subNode.InnerText;
                subNode = node.SelectSingleNode("Resolution");
                if (subNode != null)
                    language.SubStationAlphaProperties.Resolution = subNode.InnerText;
                subNode = node.SelectSingleNode("VideoResolution");
                if (subNode != null)
                    language.SubStationAlphaProperties.VideoResolution = subNode.InnerText;
                subNode = node.SelectSingleNode("Options");
                if (subNode != null)
                    language.SubStationAlphaProperties.Options = subNode.InnerText;
                subNode = node.SelectSingleNode("WrapStyle");
                if (subNode != null)
                    language.SubStationAlphaProperties.WrapStyle = subNode.InnerText;
                subNode = node.SelectSingleNode("Collision");
                if (subNode != null)
                    language.SubStationAlphaProperties.Collision = subNode.InnerText;
                subNode = node.SelectSingleNode("ScaleBorderAndShadow");
                if (subNode != null)
                    language.SubStationAlphaProperties.ScaleBorderAndShadow = subNode.InnerText;

            }

            language.SubStationAlphaStyles = new Nikse.SubtitleEdit.Logic.LanguageStructure.SubStationAlphaStyles();
            node = doc.DocumentElement.SelectSingleNode("SubStationAlphaStyles");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.SubStationAlphaStyles.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleSubstationAlpha");
                if (subNode != null)
                    language.SubStationAlphaStyles.TitleSubstationAlpha = subNode.InnerText;
                subNode = node.SelectSingleNode("Styles");
                if (subNode != null)
                    language.SubStationAlphaStyles.Styles = subNode.InnerText;
                subNode = node.SelectSingleNode("Properties");
                if (subNode != null)
                    language.SubStationAlphaStyles.Properties = subNode.InnerText;
                subNode = node.SelectSingleNode("Name");
                if (subNode != null)
                    language.SubStationAlphaStyles.Name = subNode.InnerText;
                subNode = node.SelectSingleNode("Font");
                if (subNode != null)
                    language.SubStationAlphaStyles.Font = subNode.InnerText;
                subNode = node.SelectSingleNode("FontName");
                if (subNode != null)
                    language.SubStationAlphaStyles.FontName = subNode.InnerText;
                subNode = node.SelectSingleNode("FontSize");
                if (subNode != null)
                    language.SubStationAlphaStyles.FontSize = subNode.InnerText;
                subNode = node.SelectSingleNode("UseCount");
                if (subNode != null)
                    language.SubStationAlphaStyles.UseCount = subNode.InnerText;
                subNode = node.SelectSingleNode("Primary");
                if (subNode != null)
                    language.SubStationAlphaStyles.Primary = subNode.InnerText;
                subNode = node.SelectSingleNode("Secondary");
                if (subNode != null)
                    language.SubStationAlphaStyles.Secondary = subNode.InnerText;
                subNode = node.SelectSingleNode("Tertiary");
                if (subNode != null)
                    language.SubStationAlphaStyles.Tertiary = subNode.InnerText;
                subNode = node.SelectSingleNode("Outline");
                if (subNode != null)
                    language.SubStationAlphaStyles.Outline = subNode.InnerText;
                subNode = node.SelectSingleNode("Shadow");
                if (subNode != null)
                    language.SubStationAlphaStyles.Shadow = subNode.InnerText;
                subNode = node.SelectSingleNode("Back");
                if (subNode != null)
                    language.SubStationAlphaStyles.Back = subNode.InnerText;
                subNode = node.SelectSingleNode("Alignment");
                if (subNode != null)
                    language.SubStationAlphaStyles.Alignment = subNode.InnerText;
                subNode = node.SelectSingleNode("TopLeft");
                if (subNode != null)
                    language.SubStationAlphaStyles.TopLeft = subNode.InnerText;
                subNode = node.SelectSingleNode("TopCenter");
                if (subNode != null)
                    language.SubStationAlphaStyles.TopCenter = subNode.InnerText;
                subNode = node.SelectSingleNode("TopRight");
                if (subNode != null)
                    language.SubStationAlphaStyles.TopRight = subNode.InnerText;
                subNode = node.SelectSingleNode("MiddleLeft");
                if (subNode != null)
                    language.SubStationAlphaStyles.MiddleLeft = subNode.InnerText;
                subNode = node.SelectSingleNode("MiddleCenter");
                if (subNode != null)
                    language.SubStationAlphaStyles.MiddleCenter = subNode.InnerText;
                subNode = node.SelectSingleNode("MiddleRight");
                if (subNode != null)
                    language.SubStationAlphaStyles.MiddleRight = subNode.InnerText;
                subNode = node.SelectSingleNode("BottomLeft");
                if (subNode != null)
                    language.SubStationAlphaStyles.BottomLeft = subNode.InnerText;
                subNode = node.SelectSingleNode("BottomCenter");
                if (subNode != null)
                    language.SubStationAlphaStyles.BottomCenter = subNode.InnerText;
                subNode = node.SelectSingleNode("BottomRight");
                if (subNode != null)
                    language.SubStationAlphaStyles.BottomRight = subNode.InnerText;
                subNode = node.SelectSingleNode("Colors");
                if (subNode != null)
                    language.SubStationAlphaStyles.Colors = subNode.InnerText;
                subNode = node.SelectSingleNode("Margins");
                if (subNode != null)
                    language.SubStationAlphaStyles.Margins = subNode.InnerText;
                subNode = node.SelectSingleNode("MarginLeft");
                if (subNode != null)
                    language.SubStationAlphaStyles.MarginLeft = subNode.InnerText;
                subNode = node.SelectSingleNode("MarginRight");
                if (subNode != null)
                    language.SubStationAlphaStyles.MarginRight = subNode.InnerText;
                subNode = node.SelectSingleNode("MarginVertical");
                if (subNode != null)
                    language.SubStationAlphaStyles.MarginVertical = subNode.InnerText;
                subNode = node.SelectSingleNode("Border");
                if (subNode != null)
                    language.SubStationAlphaStyles.Border = subNode.InnerText;
                subNode = node.SelectSingleNode("PlusShadow");
                if (subNode != null)
                    language.SubStationAlphaStyles.PlusShadow = subNode.InnerText;
                subNode = node.SelectSingleNode("OpaqueBox");
                if (subNode != null)
                    language.SubStationAlphaStyles.OpaqueBox = subNode.InnerText;
                subNode = node.SelectSingleNode("Import");
                if (subNode != null)
                    language.SubStationAlphaStyles.Import = subNode.InnerText;
                subNode = node.SelectSingleNode("Export");
                if (subNode != null)
                    language.SubStationAlphaStyles.Export = subNode.InnerText;
                subNode = node.SelectSingleNode("Copy");
                if (subNode != null)
                    language.SubStationAlphaStyles.Copy = subNode.InnerText;
                subNode = node.SelectSingleNode("CopyOfY");
                if (subNode != null)
                    language.SubStationAlphaStyles.CopyOfY = subNode.InnerText;
                subNode = node.SelectSingleNode("CopyXOfY");
                if (subNode != null)
                    language.SubStationAlphaStyles.CopyXOfY = subNode.InnerText;
                subNode = node.SelectSingleNode("New");
                if (subNode != null)
                    language.SubStationAlphaStyles.New = subNode.InnerText;
                subNode = node.SelectSingleNode("Remove");
                if (subNode != null)
                    language.SubStationAlphaStyles.Remove = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveAll");
                if (subNode != null)
                    language.SubStationAlphaStyles.RemoveAll = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportStyleFromFile");
                if (subNode != null)
                    language.SubStationAlphaStyles.ImportStyleFromFile = subNode.InnerText;
                subNode = node.SelectSingleNode("ExportStyleToFile");
                if (subNode != null)
                    language.SubStationAlphaStyles.ExportStyleToFile = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseStyle");
                if (subNode != null)
                    language.SubStationAlphaStyles.ChooseStyle = subNode.InnerText;
                subNode = node.SelectSingleNode("StyleAlreadyExits");
                if (subNode != null)
                    language.SubStationAlphaStyles.StyleAlreadyExits = subNode.InnerText;
                subNode = node.SelectSingleNode("StyleXExportedToFileY");
                if (subNode != null)
                    language.SubStationAlphaStyles.StyleXExportedToFileY = subNode.InnerText;
                subNode = node.SelectSingleNode("StyleXImportedFromFileY");
                if (subNode != null)
                    language.SubStationAlphaStyles.StyleXImportedFromFileY = subNode.InnerText;

            }

            language.PointSync = new Nikse.SubtitleEdit.Logic.LanguageStructure.PointSync();
            node = doc.DocumentElement.SelectSingleNode("PointSync");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.PointSync.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleViaOtherSubtitle");
                if (subNode != null)
                    language.PointSync.TitleViaOtherSubtitle = subNode.InnerText;
                subNode = node.SelectSingleNode("SyncHelp");
                if (subNode != null)
                    language.PointSync.SyncHelp = subNode.InnerText;
                subNode = node.SelectSingleNode("SetSyncPoint");
                if (subNode != null)
                    language.PointSync.SetSyncPoint = subNode.InnerText;
                subNode = node.SelectSingleNode("RemoveSyncPoint");
                if (subNode != null)
                    language.PointSync.RemoveSyncPoint = subNode.InnerText;
                subNode = node.SelectSingleNode("SyncPointsX");
                if (subNode != null)
                    language.PointSync.SyncPointsX = subNode.InnerText;
                subNode = node.SelectSingleNode("Info");
                if (subNode != null)
                    language.PointSync.Info = subNode.InnerText;
                subNode = node.SelectSingleNode("ApplySync");
                if (subNode != null)
                    language.PointSync.ApplySync = subNode.InnerText;

            }

            language.TransportStreamSubtitleChooser = new Nikse.SubtitleEdit.Logic.LanguageStructure.TransportStreamSubtitleChooser();
            node = doc.DocumentElement.SelectSingleNode("TransportStreamSubtitleChooser");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.TransportStreamSubtitleChooser.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("PidLine");
                if (subNode != null)
                    language.TransportStreamSubtitleChooser.PidLine = subNode.InnerText;
                subNode = node.SelectSingleNode("SubLine");
                if (subNode != null)
                    language.TransportStreamSubtitleChooser.SubLine = subNode.InnerText;

            }

            language.UnknownSubtitle = new Nikse.SubtitleEdit.Logic.LanguageStructure.UnknownSubtitle();
            node = doc.DocumentElement.SelectSingleNode("UnknownSubtitle");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.UnknownSubtitle.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Message");
                if (subNode != null)
                    language.UnknownSubtitle.Message = subNode.InnerText;

            }

            language.VisualSync = new Nikse.SubtitleEdit.Logic.LanguageStructure.VisualSync();
            node = doc.DocumentElement.SelectSingleNode("VisualSync");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.VisualSync.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("StartScene");
                if (subNode != null)
                    language.VisualSync.StartScene = subNode.InnerText;
                subNode = node.SelectSingleNode("EndScene");
                if (subNode != null)
                    language.VisualSync.EndScene = subNode.InnerText;
                subNode = node.SelectSingleNode("Synchronize");
                if (subNode != null)
                    language.VisualSync.Synchronize = subNode.InnerText;
                subNode = node.SelectSingleNode("HalfASecondBack");
                if (subNode != null)
                    language.VisualSync.HalfASecondBack = subNode.InnerText;
                subNode = node.SelectSingleNode("ThreeSecondsBack");
                if (subNode != null)
                    language.VisualSync.ThreeSecondsBack = subNode.InnerText;
                subNode = node.SelectSingleNode("PlayXSecondsAndBack");
                if (subNode != null)
                    language.VisualSync.PlayXSecondsAndBack = subNode.InnerText;
                subNode = node.SelectSingleNode("FindText");
                if (subNode != null)
                    language.VisualSync.FindText = subNode.InnerText;
                subNode = node.SelectSingleNode("GoToSubPosition");
                if (subNode != null)
                    language.VisualSync.GoToSubPosition = subNode.InnerText;
                subNode = node.SelectSingleNode("KeepChangesTitle");
                if (subNode != null)
                    language.VisualSync.KeepChangesTitle = subNode.InnerText;
                subNode = node.SelectSingleNode("KeepChangesMessage");
                if (subNode != null)
                    language.VisualSync.KeepChangesMessage = subNode.InnerText;
                subNode = node.SelectSingleNode("SynchronizationDone");
                if (subNode != null)
                    language.VisualSync.SynchronizationDone = subNode.InnerText;
                subNode = node.SelectSingleNode("StartSceneMustComeBeforeEndScene");
                if (subNode != null)
                    language.VisualSync.StartSceneMustComeBeforeEndScene = subNode.InnerText;
                subNode = node.SelectSingleNode("Tip");
                if (subNode != null)
                    language.VisualSync.Tip = subNode.InnerText;

            }

            language.VobSubEditCharacters = new Nikse.SubtitleEdit.Logic.LanguageStructure.VobSubEditCharacters();
            node = doc.DocumentElement.SelectSingleNode("VobSubEditCharacters");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.VobSubEditCharacters.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ChooseCharacter");
                if (subNode != null)
                    language.VobSubEditCharacters.ChooseCharacter = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageCompareFiles");
                if (subNode != null)
                    language.VobSubEditCharacters.ImageCompareFiles = subNode.InnerText;
                subNode = node.SelectSingleNode("CurrentCompareImage");
                if (subNode != null)
                    language.VobSubEditCharacters.CurrentCompareImage = subNode.InnerText;
                subNode = node.SelectSingleNode("TextAssociatedWithImage");
                if (subNode != null)
                    language.VobSubEditCharacters.TextAssociatedWithImage = subNode.InnerText;
                subNode = node.SelectSingleNode("IsItalic");
                if (subNode != null)
                    language.VobSubEditCharacters.IsItalic = subNode.InnerText;
                subNode = node.SelectSingleNode("Update");
                if (subNode != null)
                    language.VobSubEditCharacters.Update = subNode.InnerText;
                subNode = node.SelectSingleNode("Delete");
                if (subNode != null)
                    language.VobSubEditCharacters.Delete = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageDoubleSize");
                if (subNode != null)
                    language.VobSubEditCharacters.ImageDoubleSize = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageFileNotFound");
                if (subNode != null)
                    language.VobSubEditCharacters.ImageFileNotFound = subNode.InnerText;
                subNode = node.SelectSingleNode("Image");
                if (subNode != null)
                    language.VobSubEditCharacters.Image = subNode.InnerText;

            }

            language.VobSubOcr = new Nikse.SubtitleEdit.Logic.LanguageStructure.VobSubOcr();
            node = doc.DocumentElement.SelectSingleNode("VobSubOcr");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.VobSubOcr.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("TitleBluRay");
                if (subNode != null)
                    language.VobSubOcr.TitleBluRay = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrMethod");
                if (subNode != null)
                    language.VobSubOcr.OcrMethod = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrViaModi");
                if (subNode != null)
                    language.VobSubOcr.OcrViaModi = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrViaTesseract");
                if (subNode != null)
                    language.VobSubOcr.OcrViaTesseract = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrViaNOCR");
                if (subNode != null)
                    language.VobSubOcr.OcrViaNOCR = subNode.InnerText;
                subNode = node.SelectSingleNode("Language");
                if (subNode != null)
                    language.VobSubOcr.Language = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrViaImageCompare");
                if (subNode != null)
                    language.VobSubOcr.OcrViaImageCompare = subNode.InnerText;
                subNode = node.SelectSingleNode("ImageDatabase");
                if (subNode != null)
                    language.VobSubOcr.ImageDatabase = subNode.InnerText;
                subNode = node.SelectSingleNode("NoOfPixelsIsSpace");
                if (subNode != null)
                    language.VobSubOcr.NoOfPixelsIsSpace = subNode.InnerText;
                subNode = node.SelectSingleNode("MaxErrorPercent");
                if (subNode != null)
                    language.VobSubOcr.MaxErrorPercent = subNode.InnerText;
                subNode = node.SelectSingleNode("New");
                if (subNode != null)
                    language.VobSubOcr.New = subNode.InnerText;
                subNode = node.SelectSingleNode("Edit");
                if (subNode != null)
                    language.VobSubOcr.Edit = subNode.InnerText;
                subNode = node.SelectSingleNode("StartOcr");
                if (subNode != null)
                    language.VobSubOcr.StartOcr = subNode.InnerText;
                subNode = node.SelectSingleNode("Stop");
                if (subNode != null)
                    language.VobSubOcr.Stop = subNode.InnerText;
                subNode = node.SelectSingleNode("StartOcrFrom");
                if (subNode != null)
                    language.VobSubOcr.StartOcrFrom = subNode.InnerText;
                subNode = node.SelectSingleNode("LoadingVobSubImages");
                if (subNode != null)
                    language.VobSubOcr.LoadingVobSubImages = subNode.InnerText;
                subNode = node.SelectSingleNode("LoadingImageCompareDatabase");
                if (subNode != null)
                    language.VobSubOcr.LoadingImageCompareDatabase = subNode.InnerText;
                subNode = node.SelectSingleNode("ConvertingImageCompareDatabase");
                if (subNode != null)
                    language.VobSubOcr.ConvertingImageCompareDatabase = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleImage");
                if (subNode != null)
                    language.VobSubOcr.SubtitleImage = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleText");
                if (subNode != null)
                    language.VobSubOcr.SubtitleText = subNode.InnerText;
                subNode = node.SelectSingleNode("UnableToCreateCharacterDatabaseFolder");
                if (subNode != null)
                    language.VobSubOcr.UnableToCreateCharacterDatabaseFolder = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleImageXofY");
                if (subNode != null)
                    language.VobSubOcr.SubtitleImageXofY = subNode.InnerText;
                subNode = node.SelectSingleNode("ImagePalette");
                if (subNode != null)
                    language.VobSubOcr.ImagePalette = subNode.InnerText;
                subNode = node.SelectSingleNode("UseCustomColors");
                if (subNode != null)
                    language.VobSubOcr.UseCustomColors = subNode.InnerText;
                subNode = node.SelectSingleNode("Transparent");
                if (subNode != null)
                    language.VobSubOcr.Transparent = subNode.InnerText;
                subNode = node.SelectSingleNode("TransparentMinAlpha");
                if (subNode != null)
                    language.VobSubOcr.TransparentMinAlpha = subNode.InnerText;
                subNode = node.SelectSingleNode("TransportStream");
                if (subNode != null)
                    language.VobSubOcr.TransportStream = subNode.InnerText;
                subNode = node.SelectSingleNode("TransportStreamGrayscale");
                if (subNode != null)
                    language.VobSubOcr.TransportStreamGrayscale = subNode.InnerText;
                subNode = node.SelectSingleNode("TransportStreamGetColor");
                if (subNode != null)
                    language.VobSubOcr.TransportStreamGetColor = subNode.InnerText;
                subNode = node.SelectSingleNode("PromptForUnknownWords");
                if (subNode != null)
                    language.VobSubOcr.PromptForUnknownWords = subNode.InnerText;
                subNode = node.SelectSingleNode("TryToGuessUnkownWords");
                if (subNode != null)
                    language.VobSubOcr.TryToGuessUnkownWords = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoBreakSubtitleIfMoreThanTwoLines");
                if (subNode != null)
                    language.VobSubOcr.AutoBreakSubtitleIfMoreThanTwoLines = subNode.InnerText;
                subNode = node.SelectSingleNode("AllFixes");
                if (subNode != null)
                    language.VobSubOcr.AllFixes = subNode.InnerText;
                subNode = node.SelectSingleNode("GuessesUsed");
                if (subNode != null)
                    language.VobSubOcr.GuessesUsed = subNode.InnerText;
                subNode = node.SelectSingleNode("UnknownWords");
                if (subNode != null)
                    language.VobSubOcr.UnknownWords = subNode.InnerText;
                subNode = node.SelectSingleNode("OcrAutoCorrectionSpellchecking");
                if (subNode != null)
                    language.VobSubOcr.OcrAutoCorrectionSpellchecking = subNode.InnerText;
                subNode = node.SelectSingleNode("FixOcrErrors");
                if (subNode != null)
                    language.VobSubOcr.FixOcrErrors = subNode.InnerText;
                subNode = node.SelectSingleNode("ImportTextWithMatchingTimeCodes");
                if (subNode != null)
                    language.VobSubOcr.ImportTextWithMatchingTimeCodes = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveSubtitleImageAs");
                if (subNode != null)
                    language.VobSubOcr.SaveSubtitleImageAs = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveAllSubtitleImagesAsBdnXml");
                if (subNode != null)
                    language.VobSubOcr.SaveAllSubtitleImagesAsBdnXml = subNode.InnerText;
                subNode = node.SelectSingleNode("SaveAllSubtitleImagesWithHtml");
                if (subNode != null)
                    language.VobSubOcr.SaveAllSubtitleImagesWithHtml = subNode.InnerText;
                subNode = node.SelectSingleNode("XImagesSavedInY");
                if (subNode != null)
                    language.VobSubOcr.XImagesSavedInY = subNode.InnerText;
                subNode = node.SelectSingleNode("TryModiForUnknownWords");
                if (subNode != null)
                    language.VobSubOcr.TryModiForUnknownWords = subNode.InnerText;
                subNode = node.SelectSingleNode("DictionaryX");
                if (subNode != null)
                    language.VobSubOcr.DictionaryX = subNode.InnerText;
                subNode = node.SelectSingleNode("RightToLeft");
                if (subNode != null)
                    language.VobSubOcr.RightToLeft = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowOnlyForcedSubtitles");
                if (subNode != null)
                    language.VobSubOcr.ShowOnlyForcedSubtitles = subNode.InnerText;
                subNode = node.SelectSingleNode("UseTimeCodesFromIdx");
                if (subNode != null)
                    language.VobSubOcr.UseTimeCodesFromIdx = subNode.InnerText;
                subNode = node.SelectSingleNode("NoMatch");
                if (subNode != null)
                    language.VobSubOcr.NoMatch = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoTransparentBackground");
                if (subNode != null)
                    language.VobSubOcr.AutoTransparentBackground = subNode.InnerText;
                subNode = node.SelectSingleNode("InspectCompareMatchesForCurrentImage");
                if (subNode != null)
                    language.VobSubOcr.InspectCompareMatchesForCurrentImage = subNode.InnerText;
                subNode = node.SelectSingleNode("EditLastAdditions");
                if (subNode != null)
                    language.VobSubOcr.EditLastAdditions = subNode.InnerText;

            }

            language.VobSubOcrCharacter = new Nikse.SubtitleEdit.Logic.LanguageStructure.VobSubOcrCharacter();
            node = doc.DocumentElement.SelectSingleNode("VobSubOcrCharacter");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.VobSubOcrCharacter.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("ShrinkSelection");
                if (subNode != null)
                    language.VobSubOcrCharacter.ShrinkSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("ExpandSelection");
                if (subNode != null)
                    language.VobSubOcrCharacter.ExpandSelection = subNode.InnerText;
                subNode = node.SelectSingleNode("SubtitleImage");
                if (subNode != null)
                    language.VobSubOcrCharacter.SubtitleImage = subNode.InnerText;
                subNode = node.SelectSingleNode("Characters");
                if (subNode != null)
                    language.VobSubOcrCharacter.Characters = subNode.InnerText;
                subNode = node.SelectSingleNode("CharactersAsText");
                if (subNode != null)
                    language.VobSubOcrCharacter.CharactersAsText = subNode.InnerText;
                subNode = node.SelectSingleNode("Italic");
                if (subNode != null)
                    language.VobSubOcrCharacter.Italic = subNode.InnerText;
                subNode = node.SelectSingleNode("Abort");
                if (subNode != null)
                    language.VobSubOcrCharacter.Abort = subNode.InnerText;
                subNode = node.SelectSingleNode("Skip");
                if (subNode != null)
                    language.VobSubOcrCharacter.Skip = subNode.InnerText;
                subNode = node.SelectSingleNode("Nordic");
                if (subNode != null)
                    language.VobSubOcrCharacter.Nordic = subNode.InnerText;
                subNode = node.SelectSingleNode("Spanish");
                if (subNode != null)
                    language.VobSubOcrCharacter.Spanish = subNode.InnerText;
                subNode = node.SelectSingleNode("German");
                if (subNode != null)
                    language.VobSubOcrCharacter.German = subNode.InnerText;
                subNode = node.SelectSingleNode("AutoSubmitOnFirstChar");
                if (subNode != null)
                    language.VobSubOcrCharacter.AutoSubmitOnFirstChar = subNode.InnerText;
                subNode = node.SelectSingleNode("EditLastX");
                if (subNode != null)
                    language.VobSubOcrCharacter.EditLastX = subNode.InnerText;

            }

            language.VobSubOcrCharacterInspect = new Nikse.SubtitleEdit.Logic.LanguageStructure.VobSubOcrCharacterInspect();
            node = doc.DocumentElement.SelectSingleNode("VobSubOcrCharacterInspect");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.VobSubOcrCharacterInspect.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("InspectItems");
                if (subNode != null)
                    language.VobSubOcrCharacterInspect.InspectItems = subNode.InnerText;
                subNode = node.SelectSingleNode("AddBetterMatch");
                if (subNode != null)
                    language.VobSubOcrCharacterInspect.AddBetterMatch = subNode.InnerText;

            }

            language.VobSubOcrNewFolder = new Nikse.SubtitleEdit.Logic.LanguageStructure.VobSubOcrNewFolder();
            node = doc.DocumentElement.SelectSingleNode("VobSubOcrNewFolder");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.VobSubOcrNewFolder.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("Message");
                if (subNode != null)
                    language.VobSubOcrNewFolder.Message = subNode.InnerText;

            }

            language.WaveForm = new Nikse.SubtitleEdit.Logic.LanguageStructure.WaveForm();
            node = doc.DocumentElement.SelectSingleNode("WaveForm");
            if (node != null)
            {
                subNode = node.SelectSingleNode("ClickToAddWaveForm");
                if (subNode != null)
                    language.WaveForm.ClickToAddWaveForm = subNode.InnerText;
                subNode = node.SelectSingleNode("ClickToAddWaveformAndSpectrogram");
                if (subNode != null)
                    language.WaveForm.ClickToAddWaveformAndSpectrogram = subNode.InnerText;
                subNode = node.SelectSingleNode("Seconds");
                if (subNode != null)
                    language.WaveForm.Seconds = subNode.InnerText;
                subNode = node.SelectSingleNode("ZoomIn");
                if (subNode != null)
                    language.WaveForm.ZoomIn = subNode.InnerText;
                subNode = node.SelectSingleNode("ZoomOut");
                if (subNode != null)
                    language.WaveForm.ZoomOut = subNode.InnerText;
                subNode = node.SelectSingleNode("AddParagraphHere");
                if (subNode != null)
                    language.WaveForm.AddParagraphHere = subNode.InnerText;
                subNode = node.SelectSingleNode("AddParagraphHereAndPasteText");
                if (subNode != null)
                    language.WaveForm.AddParagraphHereAndPasteText = subNode.InnerText;
                subNode = node.SelectSingleNode("FocusTextBox");
                if (subNode != null)
                    language.WaveForm.FocusTextBox = subNode.InnerText;
                subNode = node.SelectSingleNode("DeleteParagraph");
                if (subNode != null)
                    language.WaveForm.DeleteParagraph = subNode.InnerText;
                subNode = node.SelectSingleNode("Split");
                if (subNode != null)
                    language.WaveForm.Split = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitAtCursor");
                if (subNode != null)
                    language.WaveForm.SplitAtCursor = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeWithPrevious");
                if (subNode != null)
                    language.WaveForm.MergeWithPrevious = subNode.InnerText;
                subNode = node.SelectSingleNode("MergeWithNext");
                if (subNode != null)
                    language.WaveForm.MergeWithNext = subNode.InnerText;
                subNode = node.SelectSingleNode("PlaySelection");
                if (subNode != null)
                    language.WaveForm.PlaySelection = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowWaveformAndSpectrogram");
                if (subNode != null)
                    language.WaveForm.ShowWaveformAndSpectrogram = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowWaveformOnly");
                if (subNode != null)
                    language.WaveForm.ShowWaveformOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("ShowSpectrogramOnly");
                if (subNode != null)
                    language.WaveForm.ShowSpectrogramOnly = subNode.InnerText;
                subNode = node.SelectSingleNode("GuessTimeCodes");
                if (subNode != null)
                    language.WaveForm.GuessTimeCodes = subNode.InnerText;
                subNode = node.SelectSingleNode("SeekSilence");
                if (subNode != null)
                    language.WaveForm.SeekSilence = subNode.InnerText;

            }

            language.WaveFormGenerateTimeCodes = new Nikse.SubtitleEdit.Logic.LanguageStructure.WaveFormGenerateTimeCodes();
            node = doc.DocumentElement.SelectSingleNode("WaveFormGenerateTimeCodes");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("StartFrom");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.StartFrom = subNode.InnerText;
                subNode = node.SelectSingleNode("CurrentVideoPosition");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.CurrentVideoPosition = subNode.InnerText;
                subNode = node.SelectSingleNode("Beginning");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.Beginning = subNode.InnerText;
                subNode = node.SelectSingleNode("DeleteLines");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.DeleteLines = subNode.InnerText;
                subNode = node.SelectSingleNode("FromCurrentVideoPosition");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.FromCurrentVideoPosition = subNode.InnerText;
                subNode = node.SelectSingleNode("DetectOptions");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.DetectOptions = subNode.InnerText;
                subNode = node.SelectSingleNode("ScanBlocksOfMs");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.ScanBlocksOfMs = subNode.InnerText;
                subNode = node.SelectSingleNode("BlockAverageVolMin1");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.BlockAverageVolMin1 = subNode.InnerText;
                subNode = node.SelectSingleNode("BlockAverageVolMin2");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.BlockAverageVolMin2 = subNode.InnerText;
                subNode = node.SelectSingleNode("BlockAverageVolMax1");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.BlockAverageVolMax1 = subNode.InnerText;
                subNode = node.SelectSingleNode("BlockAverageVolMax2");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.BlockAverageVolMax2 = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitLongLinesAt1");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.SplitLongLinesAt1 = subNode.InnerText;
                subNode = node.SelectSingleNode("SplitLongLinesAt2");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.SplitLongLinesAt2 = subNode.InnerText;
                subNode = node.SelectSingleNode("Other");
                if (subNode != null)
                    language.WaveFormGenerateTimeCodes.Other = subNode.InnerText;

            }

            language.WebVttNewVoice = new Nikse.SubtitleEdit.Logic.LanguageStructure.WebVttNewVoice();
            node = doc.DocumentElement.SelectSingleNode("WebVttNewVoice");
            if (node != null)
            {
                subNode = node.SelectSingleNode("Title");
                if (subNode != null)
                    language.WebVttNewVoice.Title = subNode.InnerText;
                subNode = node.SelectSingleNode("VoiceName");
                if (subNode != null)
                    language.WebVttNewVoice.VoiceName = subNode.InnerText;

            }


            return language;
        }
    }
}
